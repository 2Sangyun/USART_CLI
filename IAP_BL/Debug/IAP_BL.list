
IAP_BL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007700  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000988  080078b0  080078b0  000178b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008238  08008238  00020a38  2**0
                  CONTENTS
  4 .ARM          00000008  08008238  08008238  00018238  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008240  08008240  00020a38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008240  08008240  00018240  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008244  08008244  00018244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a38  20000000  08008248  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020a38  2**0
                  CONTENTS
 10 .bss          000019c4  20000a38  20000a38  00020a38  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200023fc  200023fc  00020a38  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020a38  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015607  00000000  00000000  00020a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003768  00000000  00000000  0003606f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  000397d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ef0  00000000  00000000  0003a830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026fd4  00000000  00000000  0003b720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000148b0  00000000  00000000  000626f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd5af  00000000  00000000  00076fa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00154553  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e48  00000000  00000000  001545a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000a38 	.word	0x20000a38
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08007898 	.word	0x08007898

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000a3c 	.word	0x20000a3c
 80001ec:	08007898 	.word	0x08007898

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <QueueInit>:
#include <string.h>

#include "circular_queue.h"


void QueueInit(Queue* q){
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	q->front = 0;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	q->rear = 0;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2200      	movs	r2, #0
 80005b8:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	q->cursor = 0;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2200      	movs	r2, #0
 80005c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	q->usage = 0;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <IsEmpty>:


int IsEmpty(Queue* q){
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	return (q->front == q->rear);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f8d3 21f4 	ldr.w	r2, [r3, #500]	; 0x1f4
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 80005ec:	429a      	cmp	r2, r3
 80005ee:	bf0c      	ite	eq
 80005f0:	2301      	moveq	r3, #1
 80005f2:	2300      	movne	r3, #0
 80005f4:	b2db      	uxtb	r3, r3
	//return (q->usage == 0);
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <IsFull>:


int IsFull(Queue* q){
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	return (q->front == ((q->rear + 1) % MAX_HISTORY_BUFFER_LENGTH));
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f8d3 01f4 	ldr.w	r0, [r3, #500]	; 0x1f4
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8000618:	1c59      	adds	r1, r3, #1
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <IsFull+0x44>)
 800061c:	fb83 2301 	smull	r2, r3, r3, r1
 8000620:	109a      	asrs	r2, r3, #2
 8000622:	17cb      	asrs	r3, r1, #31
 8000624:	1ad2      	subs	r2, r2, r3
 8000626:	4613      	mov	r3, r2
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	4413      	add	r3, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	1aca      	subs	r2, r1, r3
 8000630:	4290      	cmp	r0, r2
 8000632:	bf0c      	ite	eq
 8000634:	2301      	moveq	r3, #1
 8000636:	2300      	movne	r3, #0
 8000638:	b2db      	uxtb	r3, r3
	//return (q->usage == MAX_HISTORY_BUFFER);
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	66666667 	.word	0x66666667

0800064c <Enqueue>:


void Enqueue(Queue* q, uint8_t* str, uint8_t length){
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	4613      	mov	r3, r2
 8000658:	71fb      	strb	r3, [r7, #7]
	if(IsFull(q)){
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	f7ff ffd2 	bl	8000604 <IsFull>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d002      	beq.n	800066c <Enqueue+0x20>
		Dequeue(q);
 8000666:	68f8      	ldr	r0, [r7, #12]
 8000668:	f000 f82c 	bl	80006c4 <Dequeue>
	}
	memcpy(q->history[q->rear], str, length);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8000672:	2232      	movs	r2, #50	; 0x32
 8000674:	fb02 f303 	mul.w	r3, r2, r3
 8000678:	68fa      	ldr	r2, [r7, #12]
 800067a:	4413      	add	r3, r2
 800067c:	79fa      	ldrb	r2, [r7, #7]
 800067e:	68b9      	ldr	r1, [r7, #8]
 8000680:	4618      	mov	r0, r3
 8000682:	f005 fd53 	bl	800612c <memcpy>
	q->rear = (q->rear + 1) % MAX_HISTORY_BUFFER_LENGTH;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800068c:	1c59      	adds	r1, r3, #1
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <Enqueue+0x74>)
 8000690:	fb83 2301 	smull	r2, r3, r3, r1
 8000694:	109a      	asrs	r2, r3, #2
 8000696:	17cb      	asrs	r3, r1, #31
 8000698:	1ad2      	subs	r2, r2, r3
 800069a:	4613      	mov	r3, r2
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4413      	add	r3, r2
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	1aca      	subs	r2, r1, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	q->usage++;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
}
 80006b8:	bf00      	nop
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	66666667 	.word	0x66666667

080006c4 <Dequeue>:


int Dequeue(Queue* q){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if (IsEmpty(q)) {
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff ff83 	bl	80005d8 <IsEmpty>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <Dequeue+0x18>
		return 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	e019      	b.n	8000710 <Dequeue+0x4c>
	}
	else {
		q->front = (q->front + 1) % MAX_HISTORY_BUFFER_LENGTH;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80006e2:	1c59      	adds	r1, r3, #1
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <Dequeue+0x54>)
 80006e6:	fb83 2301 	smull	r2, r3, r3, r1
 80006ea:	109a      	asrs	r2, r3, #2
 80006ec:	17cb      	asrs	r3, r1, #31
 80006ee:	1ad2      	subs	r2, r2, r3
 80006f0:	4613      	mov	r3, r2
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	4413      	add	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	1aca      	subs	r2, r1, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		q->usage--;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8000706:	1e5a      	subs	r2, r3, #1
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
		return 1;
 800070e:	2301      	movs	r3, #1
	}
}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	66666667 	.word	0x66666667

0800071c <move_cursor>:


int move_cursor(Queue* q, int dir){
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
	if (dir == UP){
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d11c      	bne.n	8000766 <move_cursor+0x4a>
		if(q->cursor == q->front){
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8000738:	429a      	cmp	r2, r3
 800073a:	d101      	bne.n	8000740 <move_cursor+0x24>
			return 0;
 800073c:	2300      	movs	r3, #0
 800073e:	e040      	b.n	80007c2 <move_cursor+0xa6>
		}

		if(q->cursor == 0){
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000746:	2b00      	cmp	r3, #0
 8000748:	d104      	bne.n	8000754 <move_cursor+0x38>
			q->cursor = MAX_HISTORY_BUFFER_LENGTH - 1;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2209      	movs	r2, #9
 800074e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8000752:	e006      	b.n	8000762 <move_cursor+0x46>
		}else{
			q->cursor = q->cursor - 1;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800075a:	1e5a      	subs	r2, r3, #1
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		}
		return 1;
 8000762:	2301      	movs	r3, #1
 8000764:	e02d      	b.n	80007c2 <move_cursor+0xa6>
	}
	else if(dir == DOWN){
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d129      	bne.n	80007c0 <move_cursor+0xa4>
		if(((q->cursor + 1) % MAX_HISTORY_BUFFER_LENGTH) == q->rear){
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000772:	1c59      	adds	r1, r3, #1
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <move_cursor+0xb4>)
 8000776:	fb83 2301 	smull	r2, r3, r3, r1
 800077a:	109a      	asrs	r2, r3, #2
 800077c:	17cb      	asrs	r3, r1, #31
 800077e:	1ad2      	subs	r2, r2, r3
 8000780:	4613      	mov	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	1aca      	subs	r2, r1, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8000790:	429a      	cmp	r2, r3
 8000792:	d101      	bne.n	8000798 <move_cursor+0x7c>
			return 0;
 8000794:	2300      	movs	r3, #0
 8000796:	e014      	b.n	80007c2 <move_cursor+0xa6>
		}

		q->cursor = (q->cursor + 1) % MAX_HISTORY_BUFFER_LENGTH;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800079e:	1c59      	adds	r1, r3, #1
 80007a0:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <move_cursor+0xb4>)
 80007a2:	fb83 2301 	smull	r2, r3, r3, r1
 80007a6:	109a      	asrs	r2, r3, #2
 80007a8:	17cb      	asrs	r3, r1, #31
 80007aa:	1ad2      	subs	r2, r2, r3
 80007ac:	4613      	mov	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	1aca      	subs	r2, r1, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		return 1;
 80007bc:	2301      	movs	r3, #1
 80007be:	e000      	b.n	80007c2 <move_cursor+0xa6>
	}
	return 0;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	66666667 	.word	0x66666667

080007d4 <print_history>:



void print_history(Queue* q, int num){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
	if(q->usage == 0){
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d06e      	beq.n	80008c6 <print_history+0xf2>
		return;
	}

	int idx = 1;
 80007e8:	2301      	movs	r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]

	if(num){
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d038      	beq.n	8000864 <print_history+0x90>
		for(int i = 0; i < num; ++i){
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	e006      	b.n	8000806 <print_history+0x32>
			move_cursor(q, UP);
 80007f8:	2100      	movs	r1, #0
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff8e 	bl	800071c <move_cursor>
		for(int i = 0; i < num; ++i){
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	3301      	adds	r3, #1
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	429a      	cmp	r2, r3
 800080c:	dbf4      	blt.n	80007f8 <print_history+0x24>
		}

		while(q->cursor != q->rear){
 800080e:	e020      	b.n	8000852 <print_history+0x7e>
			printf("%d %s\r\n", idx++, q->history[q->cursor]);
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	60fa      	str	r2, [r7, #12]
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800081c:	2132      	movs	r1, #50	; 0x32
 800081e:	fb01 f202 	mul.w	r2, r1, r2
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	440a      	add	r2, r1
 8000826:	4619      	mov	r1, r3
 8000828:	4829      	ldr	r0, [pc, #164]	; (80008d0 <print_history+0xfc>)
 800082a:	f005 fd75 	bl	8006318 <iprintf>
			q->cursor = (q->cursor + 1) % MAX_HISTORY_BUFFER_LENGTH;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000834:	1c59      	adds	r1, r3, #1
 8000836:	4b27      	ldr	r3, [pc, #156]	; (80008d4 <print_history+0x100>)
 8000838:	fb83 2301 	smull	r2, r3, r3, r1
 800083c:	109a      	asrs	r2, r3, #2
 800083e:	17cb      	asrs	r3, r1, #31
 8000840:	1ad2      	subs	r2, r2, r3
 8000842:	4613      	mov	r3, r2
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4413      	add	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	1aca      	subs	r2, r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while(q->cursor != q->rear){
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800085e:	429a      	cmp	r2, r3
 8000860:	d1d6      	bne.n	8000810 <print_history+0x3c>
 8000862:	e031      	b.n	80008c8 <print_history+0xf4>
		}
	}else{
		q->cursor = q->front;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f8d3 21f4 	ldr.w	r2, [r3, #500]	; 0x1f4
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while(q->cursor != q->rear){
 8000870:	e020      	b.n	80008b4 <print_history+0xe0>

			printf("%d %s\r\n", idx++, q->history[q->cursor]);
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	60fa      	str	r2, [r7, #12]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800087e:	2132      	movs	r1, #50	; 0x32
 8000880:	fb01 f202 	mul.w	r2, r1, r2
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	440a      	add	r2, r1
 8000888:	4619      	mov	r1, r3
 800088a:	4811      	ldr	r0, [pc, #68]	; (80008d0 <print_history+0xfc>)
 800088c:	f005 fd44 	bl	8006318 <iprintf>

			//printf("******\n");
			q->cursor = (q->cursor + 1) % MAX_HISTORY_BUFFER_LENGTH;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000896:	1c59      	adds	r1, r3, #1
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <print_history+0x100>)
 800089a:	fb83 2301 	smull	r2, r3, r3, r1
 800089e:	109a      	asrs	r2, r3, #2
 80008a0:	17cb      	asrs	r3, r1, #31
 80008a2:	1ad2      	subs	r2, r2, r3
 80008a4:	4613      	mov	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	4413      	add	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	1aca      	subs	r2, r1, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while(q->cursor != q->rear){
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d1d6      	bne.n	8000872 <print_history+0x9e>
 80008c4:	e000      	b.n	80008c8 <print_history+0xf4>
		return;
 80008c6:	bf00      	nop
		}

	}
}
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	080078b0 	.word	0x080078b0
 80008d4:	66666667 	.word	0x66666667

080008d8 <CliInit>:
char cmd_buf[MAX_CMD_BUFFER_LENGTH];
char tmp_buf[MAX_CMD_BUFFER_LENGTH];


void CliInit(UART_HandleTypeDef* huart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	QueueInit(&que);
 80008e0:	4806      	ldr	r0, [pc, #24]	; (80008fc <CliInit+0x24>)
 80008e2:	f7ff fe5f 	bl	80005a4 <QueueInit>
	UartInit(huart);
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f000 faf0 	bl	8000ecc <UartInit>
	CommandInit();
 80008ec:	f000 f8aa 	bl	8000a44 <CommandInit>
	CliDisplayInfo();
 80008f0:	f000 f806 	bl	8000900 <CliDisplayInfo>
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200015ec 	.word	0x200015ec

08000900 <CliDisplayInfo>:


void CliDisplayInfo()
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	printf("===========================================================================\r\n");
 8000904:	4808      	ldr	r0, [pc, #32]	; (8000928 <CliDisplayInfo+0x28>)
 8000906:	f005 fda3 	bl	8006450 <puts>
	printf("* Created on: 2022-07-15\r\n");
 800090a:	4808      	ldr	r0, [pc, #32]	; (800092c <CliDisplayInfo+0x2c>)
 800090c:	f005 fda0 	bl	8006450 <puts>
	printf("* Author: sangyun\r\n");
 8000910:	4807      	ldr	r0, [pc, #28]	; (8000930 <CliDisplayInfo+0x30>)
 8000912:	f005 fd9d 	bl	8006450 <puts>
	printf("* Uart CLI Ver 1.0\r\n");
 8000916:	4807      	ldr	r0, [pc, #28]	; (8000934 <CliDisplayInfo+0x34>)
 8000918:	f005 fd9a 	bl	8006450 <puts>
	printf("===========================================================================\r\n");
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <CliDisplayInfo+0x28>)
 800091e:	f005 fd97 	bl	8006450 <puts>
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	080078b8 	.word	0x080078b8
 800092c:	08007908 	.word	0x08007908
 8000930:	08007924 	.word	0x08007924
 8000934:	08007938 	.word	0x08007938

08000938 <CliDo>:


void CliDo(UART_HandleTypeDef* huart)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	memset(cmd_buf, 0x00, MAX_CMD_BUFFER_LENGTH);
 8000940:	2232      	movs	r2, #50	; 0x32
 8000942:	2100      	movs	r1, #0
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <CliDo+0x44>)
 8000946:	f005 fbff 	bl	8006148 <memset>

	UartTransmitBuffer(huart, (uint8_t *)"CMD>>", 6);
 800094a:	2206      	movs	r2, #6
 800094c:	490c      	ldr	r1, [pc, #48]	; (8000980 <CliDo+0x48>)
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f000 fb5a 	bl	8001008 <UartTransmitBuffer>

	if(UartReceiveBuffer(huart, (uint8_t *)cmd_buf, MAX_CMD_BUFFER_LENGTH) == 0){
 8000954:	2232      	movs	r2, #50	; 0x32
 8000956:	4909      	ldr	r1, [pc, #36]	; (800097c <CliDo+0x44>)
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f000 fae5 	bl	8000f28 <UartReceiveBuffer>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d007      	beq.n	8000974 <CliDo+0x3c>
		return;
	}
	CLiParseCmdLine(huart, cmd_buf);
 8000964:	4905      	ldr	r1, [pc, #20]	; (800097c <CliDo+0x44>)
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f80c 	bl	8000984 <CLiParseCmdLine>
	HAL_Delay(10);
 800096c:	200a      	movs	r0, #10
 800096e:	f002 f823 	bl	80029b8 <HAL_Delay>
 8000972:	e000      	b.n	8000976 <CliDo+0x3e>
		return;
 8000974:	bf00      	nop

}
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000a54 	.word	0x20000a54
 8000980:	0800794c 	.word	0x0800794c

08000984 <CLiParseCmdLine>:


void CLiParseCmdLine(UART_HandleTypeDef* huart, char* cmd_line)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
	static const char *delim = " \f\n\r\t\v";
	char* tok;
	char* next_ptr;
	char *argv[5]= {0,};
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
	uint8_t argc = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	//char tmp_line[MAX_CMD_BUFFER_LENGTH];
	memset(tmp_buf, 0x00, sizeof(tmp_buf));
 80009a4:	2232      	movs	r2, #50	; 0x32
 80009a6:	2100      	movs	r1, #0
 80009a8:	481c      	ldr	r0, [pc, #112]	; (8000a1c <CLiParseCmdLine+0x98>)
 80009aa:	f005 fbcd 	bl	8006148 <memset>

	memcpy(tmp_buf, cmd_line, strlen(cmd_line));
 80009ae:	6838      	ldr	r0, [r7, #0]
 80009b0:	f7ff fc1e 	bl	80001f0 <strlen>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	6839      	ldr	r1, [r7, #0]
 80009ba:	4818      	ldr	r0, [pc, #96]	; (8000a1c <CLiParseCmdLine+0x98>)
 80009bc:	f005 fbb6 	bl	800612c <memcpy>

	tok = strtok_r(tmp_buf, delim, &next_ptr);
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <CLiParseCmdLine+0x9c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f107 021c 	add.w	r2, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4814      	ldr	r0, [pc, #80]	; (8000a1c <CLiParseCmdLine+0x98>)
 80009cc:	f005 fddc 	bl	8006588 <strtok_r>
 80009d0:	6278      	str	r0, [r7, #36]	; 0x24

	while(tok){
 80009d2:	e013      	b.n	80009fc <CLiParseCmdLine+0x78>
		argv[argc++] = tok;
 80009d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009d8:	1c5a      	adds	r2, r3, #1
 80009da:	f887 2023 	strb.w	r2, [r7, #35]	; 0x23
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	3328      	adds	r3, #40	; 0x28
 80009e2:	443b      	add	r3, r7
 80009e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009e6:	f843 2c20 	str.w	r2, [r3, #-32]
		tok = strtok_r(NULL, delim, &next_ptr);
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <CLiParseCmdLine+0x9c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f107 021c 	add.w	r2, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	2000      	movs	r0, #0
 80009f6:	f005 fdc7 	bl	8006588 <strtok_r>
 80009fa:	6278      	str	r0, [r7, #36]	; 0x24
	while(tok){
 80009fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d1e8      	bne.n	80009d4 <CLiParseCmdLine+0x50>
	}

	CliMatchCommand(argc, argv);
 8000a02:	f107 0208 	add.w	r2, r7, #8
 8000a06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 f809 	bl	8000a24 <CliMatchCommand>
}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	; 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000a88 	.word	0x20000a88
 8000a20:	20000000 	.word	0x20000000

08000a24 <CliMatchCommand>:


void CliMatchCommand(uint8_t argc, char* argv[])
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	71fb      	strb	r3, [r7, #7]
	CommnadDo(argc, argv);
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	6839      	ldr	r1, [r7, #0]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 f85f 	bl	8000af8 <CommnadDo>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <CommandInit>:
};
CommandSet commandSet[MAX_CMD_NUM];


void CommandInit()
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
	for(int i = 0; i< MAX_CMD_NUM; ++i){
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	e021      	b.n	8000a94 <CommandInit+0x50>
		if(strlen(commands[i]) == 0){
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2232      	movs	r2, #50	; 0x32
 8000a54:	fb02 f303 	mul.w	r3, r2, r3
 8000a58:	4a1e      	ldr	r2, [pc, #120]	; (8000ad4 <CommandInit+0x90>)
 8000a5a:	4413      	add	r3, r2
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d01c      	beq.n	8000a9c <CommandInit+0x58>
			break;
		}
		memcpy(commandSet[i].command_name, commands[i], MAX_HISTORY_BUFFER_LENGTH);
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	4613      	mov	r3, r2
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	1a9b      	subs	r3, r3, r2
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	4a1a      	ldr	r2, [pc, #104]	; (8000ad8 <CommandInit+0x94>)
 8000a6e:	1898      	adds	r0, r3, r2
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2232      	movs	r2, #50	; 0x32
 8000a74:	fb02 f303 	mul.w	r3, r2, r3
 8000a78:	4a16      	ldr	r2, [pc, #88]	; (8000ad4 <CommandInit+0x90>)
 8000a7a:	4413      	add	r3, r2
 8000a7c:	220a      	movs	r2, #10
 8000a7e:	4619      	mov	r1, r3
 8000a80:	f005 fb54 	bl	800612c <memcpy>
		usage++;
 8000a84:	4b15      	ldr	r3, [pc, #84]	; (8000adc <CommandInit+0x98>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	4a14      	ldr	r2, [pc, #80]	; (8000adc <CommandInit+0x98>)
 8000a8c:	6013      	str	r3, [r2, #0]
	for(int i = 0; i< MAX_CMD_NUM; ++i){
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3301      	adds	r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b31      	cmp	r3, #49	; 0x31
 8000a98:	ddda      	ble.n	8000a50 <CommandInit+0xc>
 8000a9a:	e000      	b.n	8000a9e <CommandInit+0x5a>
			break;
 8000a9c:	bf00      	nop
	}

	commandSet[0].CommandFuncPtr = CommandHistory;
 8000a9e:	4b0e      	ldr	r3, [pc, #56]	; (8000ad8 <CommandInit+0x94>)
 8000aa0:	4a0f      	ldr	r2, [pc, #60]	; (8000ae0 <CommandInit+0x9c>)
 8000aa2:	635a      	str	r2, [r3, #52]	; 0x34
	commandSet[1].CommandFuncPtr = CommandHelp;
 8000aa4:	4b0c      	ldr	r3, [pc, #48]	; (8000ad8 <CommandInit+0x94>)
 8000aa6:	4a0f      	ldr	r2, [pc, #60]	; (8000ae4 <CommandInit+0xa0>)
 8000aa8:	66da      	str	r2, [r3, #108]	; 0x6c
	commandSet[2].CommandFuncPtr = CommandMd;
 8000aaa:	4b0b      	ldr	r3, [pc, #44]	; (8000ad8 <CommandInit+0x94>)
 8000aac:	4a0e      	ldr	r2, [pc, #56]	; (8000ae8 <CommandInit+0xa4>)
 8000aae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	commandSet[3].CommandFuncPtr = CommandLed;
 8000ab2:	4b09      	ldr	r3, [pc, #36]	; (8000ad8 <CommandInit+0x94>)
 8000ab4:	4a0d      	ldr	r2, [pc, #52]	; (8000aec <CommandInit+0xa8>)
 8000ab6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	commandSet[4].CommandFuncPtr = CommandFwDownload;
 8000aba:	4b07      	ldr	r3, [pc, #28]	; (8000ad8 <CommandInit+0x94>)
 8000abc:	4a0c      	ldr	r2, [pc, #48]	; (8000af0 <CommandInit+0xac>)
 8000abe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	commandSet[5].CommandFuncPtr = CommandRunApplication;
 8000ac2:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <CommandInit+0x94>)
 8000ac4:	4a0b      	ldr	r2, [pc, #44]	; (8000af4 <CommandInit+0xb0>)
 8000ac6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c

}
 8000aca:	bf00      	nop
 8000acc:	3708      	adds	r7, #8
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	20000004 	.word	0x20000004
 8000ad8:	20000ac0 	.word	0x20000ac0
 8000adc:	20000abc 	.word	0x20000abc
 8000ae0:	08000b69 	.word	0x08000b69
 8000ae4:	08000ba9 	.word	0x08000ba9
 8000ae8:	08000c05 	.word	0x08000c05
 8000aec:	08000d99 	.word	0x08000d99
 8000af0:	08000d31 	.word	0x08000d31
 8000af4:	08000d7d 	.word	0x08000d7d

08000af8 <CommnadDo>:


void CommnadDo(uint8_t argc, char* argv[])
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	b084      	sub	sp, #16
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	4603      	mov	r3, r0
 8000b00:	6039      	str	r1, [r7, #0]
 8000b02:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < usage; ++i){
 8000b04:	2300      	movs	r3, #0
 8000b06:	60fb      	str	r3, [r7, #12]
 8000b08:	e01f      	b.n	8000b4a <CommnadDo+0x52>
		if(stricmp(argv[0], commandSet[i].command_name) == 0){
 8000b0a:	683b      	ldr	r3, [r7, #0]
 8000b0c:	6818      	ldr	r0, [r3, #0]
 8000b0e:	68fa      	ldr	r2, [r7, #12]
 8000b10:	4613      	mov	r3, r2
 8000b12:	00db      	lsls	r3, r3, #3
 8000b14:	1a9b      	subs	r3, r3, r2
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	4a11      	ldr	r2, [pc, #68]	; (8000b60 <CommnadDo+0x68>)
 8000b1a:	4413      	add	r3, r2
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	f005 fccf 	bl	80064c0 <strcasecmp>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d10d      	bne.n	8000b44 <CommnadDo+0x4c>
			commandSet[i].CommandFuncPtr(argc, argv);
 8000b28:	490d      	ldr	r1, [pc, #52]	; (8000b60 <CommnadDo+0x68>)
 8000b2a:	68fa      	ldr	r2, [r7, #12]
 8000b2c:	4613      	mov	r3, r2
 8000b2e:	00db      	lsls	r3, r3, #3
 8000b30:	1a9b      	subs	r3, r3, r2
 8000b32:	00db      	lsls	r3, r3, #3
 8000b34:	440b      	add	r3, r1
 8000b36:	3334      	adds	r3, #52	; 0x34
 8000b38:	681b      	ldr	r3, [r3, #0]
 8000b3a:	79fa      	ldrb	r2, [r7, #7]
 8000b3c:	6839      	ldr	r1, [r7, #0]
 8000b3e:	4610      	mov	r0, r2
 8000b40:	4798      	blx	r3
			break;
 8000b42:	e008      	b.n	8000b56 <CommnadDo+0x5e>
	for(int i = 0; i < usage; ++i){
 8000b44:	68fb      	ldr	r3, [r7, #12]
 8000b46:	3301      	adds	r3, #1
 8000b48:	60fb      	str	r3, [r7, #12]
 8000b4a:	4b06      	ldr	r3, [pc, #24]	; (8000b64 <CommnadDo+0x6c>)
 8000b4c:	681b      	ldr	r3, [r3, #0]
 8000b4e:	68fa      	ldr	r2, [r7, #12]
 8000b50:	429a      	cmp	r2, r3
 8000b52:	dbda      	blt.n	8000b0a <CommnadDo+0x12>
		}
	}
}
 8000b54:	bf00      	nop
 8000b56:	bf00      	nop
 8000b58:	3710      	adds	r7, #16
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	20000ac0 	.word	0x20000ac0
 8000b64:	20000abc 	.word	0x20000abc

08000b68 <CommandHistory>:


void CommandHistory(uint8_t argc, char* argv[])
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b084      	sub	sp, #16
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	4603      	mov	r3, r0
 8000b70:	6039      	str	r1, [r7, #0]
 8000b72:	71fb      	strb	r3, [r7, #7]
	if(argc > 2){
 8000b74:	79fb      	ldrb	r3, [r7, #7]
 8000b76:	2b02      	cmp	r3, #2
 8000b78:	d903      	bls.n	8000b82 <CommandHistory+0x1a>
		printf("Usage : history [num]\r\n");
 8000b7a:	4809      	ldr	r0, [pc, #36]	; (8000ba0 <CommandHistory+0x38>)
 8000b7c:	f005 fc68 	bl	8006450 <puts>
		return;
 8000b80:	e00a      	b.n	8000b98 <CommandHistory+0x30>
	}


	int num = atoi(argv[1]);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	3304      	adds	r3, #4
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f005 fa91 	bl	80060b0 <atoi>
 8000b8e:	60f8      	str	r0, [r7, #12]
	print_history(&que, num);
 8000b90:	68f9      	ldr	r1, [r7, #12]
 8000b92:	4804      	ldr	r0, [pc, #16]	; (8000ba4 <CommandHistory+0x3c>)
 8000b94:	f7ff fe1e 	bl	80007d4 <print_history>
}
 8000b98:	3710      	adds	r7, #16
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	0800795c 	.word	0x0800795c
 8000ba4:	200015ec 	.word	0x200015ec

08000ba8 <CommandHelp>:


void CommandHelp(uint8_t argc, char* argv[])
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b084      	sub	sp, #16
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	6039      	str	r1, [r7, #0]
 8000bb2:	71fb      	strb	r3, [r7, #7]
	printf("=====================================\r\n");
 8000bb4:	480f      	ldr	r0, [pc, #60]	; (8000bf4 <CommandHelp+0x4c>)
 8000bb6:	f005 fc4b 	bl	8006450 <puts>

	for(int i = 0; i< usage; ++i){
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
 8000bbe:	e00d      	b.n	8000bdc <CommandHelp+0x34>
		printf("* %s\r\n", commandSet[i].command_name);
 8000bc0:	68fa      	ldr	r2, [r7, #12]
 8000bc2:	4613      	mov	r3, r2
 8000bc4:	00db      	lsls	r3, r3, #3
 8000bc6:	1a9b      	subs	r3, r3, r2
 8000bc8:	00db      	lsls	r3, r3, #3
 8000bca:	4a0b      	ldr	r2, [pc, #44]	; (8000bf8 <CommandHelp+0x50>)
 8000bcc:	4413      	add	r3, r2
 8000bce:	4619      	mov	r1, r3
 8000bd0:	480a      	ldr	r0, [pc, #40]	; (8000bfc <CommandHelp+0x54>)
 8000bd2:	f005 fba1 	bl	8006318 <iprintf>
	for(int i = 0; i< usage; ++i){
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	60fb      	str	r3, [r7, #12]
 8000bdc:	4b08      	ldr	r3, [pc, #32]	; (8000c00 <CommandHelp+0x58>)
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	68fa      	ldr	r2, [r7, #12]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	dbec      	blt.n	8000bc0 <CommandHelp+0x18>
	}

	printf("=====================================\r\n");
 8000be6:	4803      	ldr	r0, [pc, #12]	; (8000bf4 <CommandHelp+0x4c>)
 8000be8:	f005 fc32 	bl	8006450 <puts>

}
 8000bec:	bf00      	nop
 8000bee:	3710      	adds	r7, #16
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	08007974 	.word	0x08007974
 8000bf8:	20000ac0 	.word	0x20000ac0
 8000bfc:	0800799c 	.word	0x0800799c
 8000c00:	20000abc 	.word	0x20000abc

08000c04 <CommandMd>:


void CommandMd(uint8_t argc, char* argv[])
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b08a      	sub	sp, #40	; 0x28
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	6039      	str	r1, [r7, #0]
 8000c0e:	71fb      	strb	r3, [r7, #7]
	int size = 0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	613b      	str	r3, [r7, #16]
	unsigned int *addr, *cp_addr;
	unsigned char asc[4];

	if (argc != 3){
 8000c14:	79fb      	ldrb	r3, [r7, #7]
 8000c16:	2b03      	cmp	r3, #3
 8000c18:	d003      	beq.n	8000c22 <CommandMd+0x1e>
		printf("Usage : md addr [size] \r\n");
 8000c1a:	483f      	ldr	r0, [pc, #252]	; (8000d18 <CommandMd+0x114>)
 8000c1c:	f005 fc18 	bl	8006450 <puts>
 8000c20:	e077      	b.n	8000d12 <CommandMd+0x10e>
		return;
	}

	size = (int)strtoul((const char *)argv[2], (char**)NULL, (int)0);
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	3308      	adds	r3, #8
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	2200      	movs	r2, #0
 8000c2a:	2100      	movs	r1, #0
 8000c2c:	4618      	mov	r0, r3
 8000c2e:	f005 fdad 	bl	800678c <strtoul>
 8000c32:	4603      	mov	r3, r0
 8000c34:	613b      	str	r3, [r7, #16]
	addr   = (unsigned int *)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	3304      	adds	r3, #4
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	2100      	movs	r1, #0
 8000c40:	4618      	mov	r0, r3
 8000c42:	f005 fda3 	bl	800678c <strtoul>
 8000c46:	4603      	mov	r3, r0
 8000c48:	627b      	str	r3, [r7, #36]	; 0x24
	cp_addr = (unsigned int *)addr;
 8000c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c4c:	623b      	str	r3, [r7, #32]

	printf("\r\n");
 8000c4e:	4833      	ldr	r0, [pc, #204]	; (8000d1c <CommandMd+0x118>)
 8000c50:	f005 fbfe 	bl	8006450 <puts>

	for (int idx = 0; idx < size; ++idx){
 8000c54:	2300      	movs	r3, #0
 8000c56:	61fb      	str	r3, [r7, #28]
 8000c58:	e057      	b.n	8000d0a <CommandMd+0x106>
		if((idx%4) == 0){
 8000c5a:	69fb      	ldr	r3, [r7, #28]
 8000c5c:	f003 0303 	and.w	r3, r3, #3
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d104      	bne.n	8000c6e <CommandMd+0x6a>
			printf(" 0x%08X: ", (unsigned int)addr);
 8000c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	482d      	ldr	r0, [pc, #180]	; (8000d20 <CommandMd+0x11c>)
 8000c6a:	f005 fb55 	bl	8006318 <iprintf>
		}
		printf(" 0x%08X", *(addr));
 8000c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	4619      	mov	r1, r3
 8000c74:	482b      	ldr	r0, [pc, #172]	; (8000d24 <CommandMd+0x120>)
 8000c76:	f005 fb4f 	bl	8006318 <iprintf>


		if ((idx%4) == 3)
 8000c7a:	69fb      	ldr	r3, [r7, #28]
 8000c7c:	425a      	negs	r2, r3
 8000c7e:	f003 0303 	and.w	r3, r3, #3
 8000c82:	f002 0203 	and.w	r2, r2, #3
 8000c86:	bf58      	it	pl
 8000c88:	4253      	negpl	r3, r2
 8000c8a:	2b03      	cmp	r3, #3
 8000c8c:	d137      	bne.n	8000cfe <CommandMd+0xfa>
		{
		  printf ("  |");
 8000c8e:	4826      	ldr	r0, [pc, #152]	; (8000d28 <CommandMd+0x124>)
 8000c90:	f005 fb42 	bl	8006318 <iprintf>
		  for (int idx1= 0; idx1< 4; idx1++)
 8000c94:	2300      	movs	r3, #0
 8000c96:	61bb      	str	r3, [r7, #24]
 8000c98:	e02b      	b.n	8000cf2 <CommandMd+0xee>
 8000c9a:	6a3b      	ldr	r3, [r7, #32]
 8000c9c:	681b      	ldr	r3, [r3, #0]
		  {
			memcpy((char *)asc, (char *)cp_addr, 4);
 8000c9e:	60fb      	str	r3, [r7, #12]
			for (int i = 0; i < 4; ++i)
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	e01c      	b.n	8000ce0 <CommandMd+0xdc>
			{
			  if (asc[i] > 0x1f && asc[i] < 0x7f)
 8000ca6:	f107 020c 	add.w	r2, r7, #12
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	4413      	add	r3, r2
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	2b1f      	cmp	r3, #31
 8000cb2:	d90f      	bls.n	8000cd4 <CommandMd+0xd0>
 8000cb4:	f107 020c 	add.w	r2, r7, #12
 8000cb8:	697b      	ldr	r3, [r7, #20]
 8000cba:	4413      	add	r3, r2
 8000cbc:	781b      	ldrb	r3, [r3, #0]
 8000cbe:	2b7e      	cmp	r3, #126	; 0x7e
 8000cc0:	d808      	bhi.n	8000cd4 <CommandMd+0xd0>
			  {
				printf("%c", asc[i]);
 8000cc2:	f107 020c 	add.w	r2, r7, #12
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	4413      	add	r3, r2
 8000cca:	781b      	ldrb	r3, [r3, #0]
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f005 fb3b 	bl	8006348 <putchar>
 8000cd2:	e002      	b.n	8000cda <CommandMd+0xd6>
			  }
			  else
			  {
				printf(".");
 8000cd4:	202e      	movs	r0, #46	; 0x2e
 8000cd6:	f005 fb37 	bl	8006348 <putchar>
			for (int i = 0; i < 4; ++i)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	617b      	str	r3, [r7, #20]
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	2b03      	cmp	r3, #3
 8000ce4:	dddf      	ble.n	8000ca6 <CommandMd+0xa2>
			  }
			}
			cp_addr+=1;
 8000ce6:	6a3b      	ldr	r3, [r7, #32]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	623b      	str	r3, [r7, #32]
		  for (int idx1= 0; idx1< 4; idx1++)
 8000cec:	69bb      	ldr	r3, [r7, #24]
 8000cee:	3301      	adds	r3, #1
 8000cf0:	61bb      	str	r3, [r7, #24]
 8000cf2:	69bb      	ldr	r3, [r7, #24]
 8000cf4:	2b03      	cmp	r3, #3
 8000cf6:	ddd0      	ble.n	8000c9a <CommandMd+0x96>
		  }
		  printf("|\r\n");
 8000cf8:	480c      	ldr	r0, [pc, #48]	; (8000d2c <CommandMd+0x128>)
 8000cfa:	f005 fba9 	bl	8006450 <puts>
		}
		addr++;
 8000cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d00:	3304      	adds	r3, #4
 8000d02:	627b      	str	r3, [r7, #36]	; 0x24
	for (int idx = 0; idx < size; ++idx){
 8000d04:	69fb      	ldr	r3, [r7, #28]
 8000d06:	3301      	adds	r3, #1
 8000d08:	61fb      	str	r3, [r7, #28]
 8000d0a:	69fa      	ldr	r2, [r7, #28]
 8000d0c:	693b      	ldr	r3, [r7, #16]
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	dba3      	blt.n	8000c5a <CommandMd+0x56>
	}
}
 8000d12:	3728      	adds	r7, #40	; 0x28
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	080079a4 	.word	0x080079a4
 8000d1c:	080079c0 	.word	0x080079c0
 8000d20:	080079c4 	.word	0x080079c4
 8000d24:	080079d0 	.word	0x080079d0
 8000d28:	080079d8 	.word	0x080079d8
 8000d2c:	080079dc 	.word	0x080079dc

08000d30 <CommandFwDownload>:

void CommandFwDownload(uint8_t argc, char* argv[])
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b082      	sub	sp, #8
 8000d34:	af00      	add	r7, sp, #0
 8000d36:	4603      	mov	r3, r0
 8000d38:	6039      	str	r1, [r7, #0]
 8000d3a:	71fb      	strb	r3, [r7, #7]
	// TO DO
	printf("BootLoader loacted in FLASH 0x%lx ~ 0x%lx\r\n", BOOTLOADER_ADDRESS, APPLICATION_ADDRESS - 1);
 8000d3c:	4a09      	ldr	r2, [pc, #36]	; (8000d64 <CommandFwDownload+0x34>)
 8000d3e:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000d42:	4809      	ldr	r0, [pc, #36]	; (8000d68 <CommandFwDownload+0x38>)
 8000d44:	f005 fae8 	bl	8006318 <iprintf>
	printf("User Application will loacte in FLASH 0x%lx ~ 0x%x\r\n", APPLICATION_ADDRESS, USER_FLASH_END_ADDRESS);
 8000d48:	4a08      	ldr	r2, [pc, #32]	; (8000d6c <CommandFwDownload+0x3c>)
 8000d4a:	4909      	ldr	r1, [pc, #36]	; (8000d70 <CommandFwDownload+0x40>)
 8000d4c:	4809      	ldr	r0, [pc, #36]	; (8000d74 <CommandFwDownload+0x44>)
 8000d4e:	f005 fae3 	bl	8006318 <iprintf>

	SerialDownload();
 8000d52:	f000 fff3 	bl	8001d3c <SerialDownload>
	UartInit(&huart3);
 8000d56:	4808      	ldr	r0, [pc, #32]	; (8000d78 <CommandFwDownload+0x48>)
 8000d58:	f000 f8b8 	bl	8000ecc <UartInit>

}
 8000d5c:	bf00      	nop
 8000d5e:	3708      	adds	r7, #8
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	0801ffff 	.word	0x0801ffff
 8000d68:	080079e0 	.word	0x080079e0
 8000d6c:	080fffff 	.word	0x080fffff
 8000d70:	08020000 	.word	0x08020000
 8000d74:	08007a0c 	.word	0x08007a0c
 8000d78:	20001a18 	.word	0x20001a18

08000d7c <CommandRunApplication>:


void CommandRunApplication(uint8_t argc, char* argv[])
{
 8000d7c:	b580      	push	{r7, lr}
 8000d7e:	b082      	sub	sp, #8
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	4603      	mov	r3, r0
 8000d84:	6039      	str	r1, [r7, #0]
 8000d86:	71fb      	strb	r3, [r7, #7]

	HAL_DeInit();
 8000d88:	f001 fd92 	bl	80028b0 <HAL_DeInit>
	RunApplication();
 8000d8c:	f001 f83a 	bl	8001e04 <RunApplication>
}
 8000d90:	bf00      	nop
 8000d92:	3708      	adds	r7, #8
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <CommandLed>:


void CommandLed(uint8_t argc, char* argv[])
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	6039      	str	r1, [r7, #0]
 8000da2:	71fb      	strb	r3, [r7, #7]
			printf("Usage : led [led_num] [On/Off]\n");
		}
	}else{
		printf("Usage : led [led_num] [On/Off]\n");
	}*/
}
 8000da4:	bf00      	nop
 8000da6:	370c      	adds	r7, #12
 8000da8:	46bd      	mov	sp, r7
 8000daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dae:	4770      	bx	lr

08000db0 <FindCommands>:



int FindCommands(char* cmd_buff, char* tab_buff)
{
 8000db0:	b590      	push	{r4, r7, lr}
 8000db2:	b089      	sub	sp, #36	; 0x24
 8000db4:	af00      	add	r7, sp, #0
 8000db6:	6078      	str	r0, [r7, #4]
 8000db8:	6039      	str	r1, [r7, #0]
	int count = 0, last_idx = 0;
 8000dba:	2300      	movs	r3, #0
 8000dbc:	61fb      	str	r3, [r7, #28]
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	61bb      	str	r3, [r7, #24]
	int cmd_buff_length = strlen(cmd_buff);
 8000dc2:	6878      	ldr	r0, [r7, #4]
 8000dc4:	f7ff fa14 	bl	80001f0 <strlen>
 8000dc8:	4603      	mov	r3, r0
 8000dca:	60fb      	str	r3, [r7, #12]

	char* check_list = (char *)malloc(sizeof(char) * usage);
 8000dcc:	4b3b      	ldr	r3, [pc, #236]	; (8000ebc <FindCommands+0x10c>)
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	4618      	mov	r0, r3
 8000dd2:	f005 f99b 	bl	800610c <malloc>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	60bb      	str	r3, [r7, #8]
	memset(check_list, 0x00, sizeof(char) * usage);
 8000dda:	4b38      	ldr	r3, [pc, #224]	; (8000ebc <FindCommands+0x10c>)
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	461a      	mov	r2, r3
 8000de0:	2100      	movs	r1, #0
 8000de2:	68b8      	ldr	r0, [r7, #8]
 8000de4:	f005 f9b0 	bl	8006148 <memset>

	if(cmd_buff_length == 0){
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d101      	bne.n	8000df2 <FindCommands+0x42>
		return 0;
 8000dee:	2300      	movs	r3, #0
 8000df0:	e060      	b.n	8000eb4 <FindCommands+0x104>
	}

	for(int i = 0; i < usage; ++i){
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]
 8000df6:	e01a      	b.n	8000e2e <FindCommands+0x7e>
		if(strnicmp(cmd_buff, commands[i], cmd_buff_length) == 0){
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	2232      	movs	r2, #50	; 0x32
 8000dfc:	fb02 f303 	mul.w	r3, r2, r3
 8000e00:	4a2f      	ldr	r2, [pc, #188]	; (8000ec0 <FindCommands+0x110>)
 8000e02:	4413      	add	r3, r2
 8000e04:	68fa      	ldr	r2, [r7, #12]
 8000e06:	4619      	mov	r1, r3
 8000e08:	6878      	ldr	r0, [r7, #4]
 8000e0a:	f005 fb73 	bl	80064f4 <strncasecmp>
 8000e0e:	4603      	mov	r3, r0
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d109      	bne.n	8000e28 <FindCommands+0x78>
			count++;
 8000e14:	69fb      	ldr	r3, [r7, #28]
 8000e16:	3301      	adds	r3, #1
 8000e18:	61fb      	str	r3, [r7, #28]
			last_idx = i;
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	61bb      	str	r3, [r7, #24]
			check_list[i] = 1;
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	68ba      	ldr	r2, [r7, #8]
 8000e22:	4413      	add	r3, r2
 8000e24:	2201      	movs	r2, #1
 8000e26:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < usage; ++i){
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	617b      	str	r3, [r7, #20]
 8000e2e:	4b23      	ldr	r3, [pc, #140]	; (8000ebc <FindCommands+0x10c>)
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	697a      	ldr	r2, [r7, #20]
 8000e34:	429a      	cmp	r2, r3
 8000e36:	dbdf      	blt.n	8000df8 <FindCommands+0x48>
		}
	}

	if(count == 0){
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d036      	beq.n	8000eac <FindCommands+0xfc>
		;
	}
	else if (count == 1){
 8000e3e:	69fb      	ldr	r3, [r7, #28]
 8000e40:	2b01      	cmp	r3, #1
 8000e42:	d115      	bne.n	8000e70 <FindCommands+0xc0>
		memcpy(tab_buff, commands[last_idx], strlen(commands[last_idx]));
 8000e44:	69bb      	ldr	r3, [r7, #24]
 8000e46:	2232      	movs	r2, #50	; 0x32
 8000e48:	fb02 f303 	mul.w	r3, r2, r3
 8000e4c:	4a1c      	ldr	r2, [pc, #112]	; (8000ec0 <FindCommands+0x110>)
 8000e4e:	189c      	adds	r4, r3, r2
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	2232      	movs	r2, #50	; 0x32
 8000e54:	fb02 f303 	mul.w	r3, r2, r3
 8000e58:	4a19      	ldr	r2, [pc, #100]	; (8000ec0 <FindCommands+0x110>)
 8000e5a:	4413      	add	r3, r2
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f7ff f9c7 	bl	80001f0 <strlen>
 8000e62:	4603      	mov	r3, r0
 8000e64:	461a      	mov	r2, r3
 8000e66:	4621      	mov	r1, r4
 8000e68:	6838      	ldr	r0, [r7, #0]
 8000e6a:	f005 f95f 	bl	800612c <memcpy>
 8000e6e:	e01d      	b.n	8000eac <FindCommands+0xfc>
	}
	else{
		printf("\r\n");
 8000e70:	4814      	ldr	r0, [pc, #80]	; (8000ec4 <FindCommands+0x114>)
 8000e72:	f005 faed 	bl	8006450 <puts>
		for(int i = 0; i < usage; ++i){
 8000e76:	2300      	movs	r3, #0
 8000e78:	613b      	str	r3, [r7, #16]
 8000e7a:	e012      	b.n	8000ea2 <FindCommands+0xf2>
			if(check_list[i]){
 8000e7c:	693b      	ldr	r3, [r7, #16]
 8000e7e:	68ba      	ldr	r2, [r7, #8]
 8000e80:	4413      	add	r3, r2
 8000e82:	781b      	ldrb	r3, [r3, #0]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d009      	beq.n	8000e9c <FindCommands+0xec>
				printf("* %s\r\n", commands[i]);
 8000e88:	693b      	ldr	r3, [r7, #16]
 8000e8a:	2232      	movs	r2, #50	; 0x32
 8000e8c:	fb02 f303 	mul.w	r3, r2, r3
 8000e90:	4a0b      	ldr	r2, [pc, #44]	; (8000ec0 <FindCommands+0x110>)
 8000e92:	4413      	add	r3, r2
 8000e94:	4619      	mov	r1, r3
 8000e96:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <FindCommands+0x118>)
 8000e98:	f005 fa3e 	bl	8006318 <iprintf>
		for(int i = 0; i < usage; ++i){
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	613b      	str	r3, [r7, #16]
 8000ea2:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <FindCommands+0x10c>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	693a      	ldr	r2, [r7, #16]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	dbe7      	blt.n	8000e7c <FindCommands+0xcc>
			}
		}
	}

	free(check_list);
 8000eac:	68b8      	ldr	r0, [r7, #8]
 8000eae:	f005 f935 	bl	800611c <free>
	return count;
 8000eb2:	69fb      	ldr	r3, [r7, #28]
}
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	3724      	adds	r7, #36	; 0x24
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	bd90      	pop	{r4, r7, pc}
 8000ebc:	20000abc 	.word	0x20000abc
 8000ec0:	20000004 	.word	0x20000004
 8000ec4:	080079c0 	.word	0x080079c0
 8000ec8:	0800799c 	.word	0x0800799c

08000ecc <UartInit>:
uint8_t g_rx_buffer 		= 0;

Queue que;

void UartInit(UART_HandleTypeDef* huart)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b082      	sub	sp, #8
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
	huart->Instance = USART3;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	4a12      	ldr	r2, [pc, #72]	; (8000f20 <UartInit+0x54>)
 8000ed8:	601a      	str	r2, [r3, #0]
	huart->Init.BaudRate = 115200;
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ee0:	605a      	str	r2, [r3, #4]
	huart->Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
	huart->Init.StopBits = UART_STOPBITS_1;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
	huart->Init.Parity = UART_PARITY_NONE;
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
	huart->Init.Mode = UART_MODE_TX_RX;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
	huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
	huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(huart) != HAL_OK){
 8000f06:	6878      	ldr	r0, [r7, #4]
 8000f08:	f003 fcb6 	bl	8004878 <HAL_UART_Init>
	  //Error_Handler();
	}

	HAL_UART_Receive_IT(huart, &g_rx_buffer, 1);
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	4905      	ldr	r1, [pc, #20]	; (8000f24 <UartInit+0x58>)
 8000f10:	6878      	ldr	r0, [r7, #4]
 8000f12:	f003 fe32 	bl	8004b7a <HAL_UART_Receive_IT>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40004800 	.word	0x40004800
 8000f24:	200015e9 	.word	0x200015e9

08000f28 <UartReceiveBuffer>:


int UartReceiveBuffer(UART_HandleTypeDef* huart, uint8_t *buf, uint8_t size)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	60f8      	str	r0, [r7, #12]
 8000f30:	60b9      	str	r1, [r7, #8]
 8000f32:	4613      	mov	r3, r2
 8000f34:	71fb      	strb	r3, [r7, #7]
	int ret_value = 0;
 8000f36:	2300      	movs	r3, #0
 8000f38:	617b      	str	r3, [r7, #20]

	while(cmd_buff[cmd_buff_length-2] != '\r' && cmd_buff[cmd_buff_length-1] != '\n')
 8000f3a:	e003      	b.n	8000f44 <UartReceiveBuffer+0x1c>
	{
		HAL_Delay(10);
 8000f3c:	200a      	movs	r0, #10
 8000f3e:	f001 fd3b 	bl	80029b8 <HAL_Delay>
		continue;
 8000f42:	bf00      	nop
	while(cmd_buff[cmd_buff_length-2] != '\r' && cmd_buff[cmd_buff_length-1] != '\n')
 8000f44:	4b2c      	ldr	r3, [pc, #176]	; (8000ff8 <UartReceiveBuffer+0xd0>)
 8000f46:	781b      	ldrb	r3, [r3, #0]
 8000f48:	3b02      	subs	r3, #2
 8000f4a:	4a2c      	ldr	r2, [pc, #176]	; (8000ffc <UartReceiveBuffer+0xd4>)
 8000f4c:	5cd3      	ldrb	r3, [r2, r3]
 8000f4e:	2b0d      	cmp	r3, #13
 8000f50:	d006      	beq.n	8000f60 <UartReceiveBuffer+0x38>
 8000f52:	4b29      	ldr	r3, [pc, #164]	; (8000ff8 <UartReceiveBuffer+0xd0>)
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	3b01      	subs	r3, #1
 8000f58:	4a28      	ldr	r2, [pc, #160]	; (8000ffc <UartReceiveBuffer+0xd4>)
 8000f5a:	5cd3      	ldrb	r3, [r2, r3]
 8000f5c:	2b0a      	cmp	r3, #10
 8000f5e:	d1ed      	bne.n	8000f3c <UartReceiveBuffer+0x14>
	}

	__HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	68da      	ldr	r2, [r3, #12]
 8000f66:	68fb      	ldr	r3, [r7, #12]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	f022 0220 	bic.w	r2, r2, #32
 8000f6e:	60da      	str	r2, [r3, #12]
	if(size < cmd_buff_length)
 8000f70:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <UartReceiveBuffer+0xd0>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	79fa      	ldrb	r2, [r7, #7]
 8000f76:	429a      	cmp	r2, r3
 8000f78:	d202      	bcs.n	8000f80 <UartReceiveBuffer+0x58>
		cmd_buff_length = size;
 8000f7a:	4a1f      	ldr	r2, [pc, #124]	; (8000ff8 <UartReceiveBuffer+0xd0>)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	7013      	strb	r3, [r2, #0]

	cmd_buff_length -= 2;
 8000f80:	4b1d      	ldr	r3, [pc, #116]	; (8000ff8 <UartReceiveBuffer+0xd0>)
 8000f82:	781b      	ldrb	r3, [r3, #0]
 8000f84:	3b02      	subs	r3, #2
 8000f86:	b2da      	uxtb	r2, r3
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <UartReceiveBuffer+0xd0>)
 8000f8a:	701a      	strb	r2, [r3, #0]
	memcpy(buf, cmd_buff, cmd_buff_length);
 8000f8c:	4b1a      	ldr	r3, [pc, #104]	; (8000ff8 <UartReceiveBuffer+0xd0>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	491a      	ldr	r1, [pc, #104]	; (8000ffc <UartReceiveBuffer+0xd4>)
 8000f94:	68b8      	ldr	r0, [r7, #8]
 8000f96:	f005 f8c9 	bl	800612c <memcpy>
	ret_value = cmd_buff_length;
 8000f9a:	4b17      	ldr	r3, [pc, #92]	; (8000ff8 <UartReceiveBuffer+0xd0>)
 8000f9c:	781b      	ldrb	r3, [r3, #0]
 8000f9e:	617b      	str	r3, [r7, #20]

	if(cmd_buff_length){
 8000fa0:	4b15      	ldr	r3, [pc, #84]	; (8000ff8 <UartReceiveBuffer+0xd0>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d00c      	beq.n	8000fc2 <UartReceiveBuffer+0x9a>
		Enqueue(&que, buf, cmd_buff_length);
 8000fa8:	4b13      	ldr	r3, [pc, #76]	; (8000ff8 <UartReceiveBuffer+0xd0>)
 8000faa:	781b      	ldrb	r3, [r3, #0]
 8000fac:	461a      	mov	r2, r3
 8000fae:	68b9      	ldr	r1, [r7, #8]
 8000fb0:	4813      	ldr	r0, [pc, #76]	; (8001000 <UartReceiveBuffer+0xd8>)
 8000fb2:	f7ff fb4b 	bl	800064c <Enqueue>
		que.cursor = que.rear;
 8000fb6:	4b12      	ldr	r3, [pc, #72]	; (8001000 <UartReceiveBuffer+0xd8>)
 8000fb8:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8000fbc:	4a10      	ldr	r2, [pc, #64]	; (8001000 <UartReceiveBuffer+0xd8>)
 8000fbe:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	}

	memset(cmd_buff, 0x00, sizeof(cmd_buff));
 8000fc2:	2233      	movs	r2, #51	; 0x33
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	480d      	ldr	r0, [pc, #52]	; (8000ffc <UartReceiveBuffer+0xd4>)
 8000fc8:	f005 f8be 	bl	8006148 <memset>
	cmd_buff_length = 0;
 8000fcc:	4b0a      	ldr	r3, [pc, #40]	; (8000ff8 <UartReceiveBuffer+0xd0>)
 8000fce:	2200      	movs	r2, #0
 8000fd0:	701a      	strb	r2, [r3, #0]

	__HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8000fd2:	68fb      	ldr	r3, [r7, #12]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	68da      	ldr	r2, [r3, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f042 0220 	orr.w	r2, r2, #32
 8000fe0:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_IT(huart, &g_rx_buffer, 1);
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	4907      	ldr	r1, [pc, #28]	; (8001004 <UartReceiveBuffer+0xdc>)
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f003 fdc7 	bl	8004b7a <HAL_UART_Receive_IT>
	return ret_value;
 8000fec:	697b      	ldr	r3, [r7, #20]
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	3718      	adds	r7, #24
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	200015e8 	.word	0x200015e8
 8000ffc:	200015b0 	.word	0x200015b0
 8001000:	200015ec 	.word	0x200015ec
 8001004:	200015e9 	.word	0x200015e9

08001008 <UartTransmitBuffer>:


int UartTransmitBuffer(UART_HandleTypeDef* huart, uint8_t *buf, uint8_t size){
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	60f8      	str	r0, [r7, #12]
 8001010:	60b9      	str	r1, [r7, #8]
 8001012:	4613      	mov	r3, r2
 8001014:	71fb      	strb	r3, [r7, #7]
	 if(HAL_UART_Transmit(huart, buf, size, 10) != HAL_OK)
 8001016:	79fb      	ldrb	r3, [r7, #7]
 8001018:	b29a      	uxth	r2, r3
 800101a:	230a      	movs	r3, #10
 800101c:	68b9      	ldr	r1, [r7, #8]
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f003 fc77 	bl	8004912 <HAL_UART_Transmit>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d002      	beq.n	8001030 <UartTransmitBuffer+0x28>
	        return -1;
 800102a:	f04f 33ff 	mov.w	r3, #4294967295
 800102e:	e000      	b.n	8001032 <UartTransmitBuffer+0x2a>

	    return 0;
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3710      	adds	r7, #16
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <UartWriteCmdBuffer>:


void UartWriteCmdBuffer(UART_HandleTypeDef* huart, int* uart_state)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b084      	sub	sp, #16
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
	char cdata[4], len = 1;
 8001046:	2301      	movs	r3, #1
 8001048:	73fb      	strb	r3, [r7, #15]
	memset(cdata, 0x00, 4);
 800104a:	f107 0308 	add.w	r3, r7, #8
 800104e:	2204      	movs	r2, #4
 8001050:	2100      	movs	r1, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f005 f878 	bl	8006148 <memset>

	if(*uart_state == UART_RX_IDLE){
 8001058:	683b      	ldr	r3, [r7, #0]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	2b00      	cmp	r3, #0
 800105e:	f040 8087 	bne.w	8001170 <UartWriteCmdBuffer+0x134>
		switch(g_rx_buffer) {
 8001062:	4b50      	ldr	r3, [pc, #320]	; (80011a4 <UartWriteCmdBuffer+0x168>)
 8001064:	781b      	ldrb	r3, [r3, #0]
 8001066:	2b1b      	cmp	r3, #27
 8001068:	dc30      	bgt.n	80010cc <UartWriteCmdBuffer+0x90>
 800106a:	2b08      	cmp	r3, #8
 800106c:	db71      	blt.n	8001152 <UartWriteCmdBuffer+0x116>
 800106e:	3b08      	subs	r3, #8
 8001070:	2b13      	cmp	r3, #19
 8001072:	d86e      	bhi.n	8001152 <UartWriteCmdBuffer+0x116>
 8001074:	a201      	add	r2, pc, #4	; (adr r2, 800107c <UartWriteCmdBuffer+0x40>)
 8001076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800107a:	bf00      	nop
 800107c:	0800111d 	.word	0x0800111d
 8001080:	080010db 	.word	0x080010db
 8001084:	080010e3 	.word	0x080010e3
 8001088:	08001153 	.word	0x08001153
 800108c:	08001153 	.word	0x08001153
 8001090:	080010e3 	.word	0x080010e3
 8001094:	08001153 	.word	0x08001153
 8001098:	08001153 	.word	0x08001153
 800109c:	08001153 	.word	0x08001153
 80010a0:	08001153 	.word	0x08001153
 80010a4:	08001153 	.word	0x08001153
 80010a8:	08001153 	.word	0x08001153
 80010ac:	08001153 	.word	0x08001153
 80010b0:	08001153 	.word	0x08001153
 80010b4:	08001153 	.word	0x08001153
 80010b8:	08001153 	.word	0x08001153
 80010bc:	08001153 	.word	0x08001153
 80010c0:	08001153 	.word	0x08001153
 80010c4:	08001153 	.word	0x08001153
 80010c8:	080010d3 	.word	0x080010d3
 80010cc:	2b7f      	cmp	r3, #127	; 0x7f
 80010ce:	d025      	beq.n	800111c <UartWriteCmdBuffer+0xe0>
 80010d0:	e03f      	b.n	8001152 <UartWriteCmdBuffer+0x116>
			case CLI_KEY_ESC:
				*uart_state = UART_RX_ESC;
 80010d2:	683b      	ldr	r3, [r7, #0]
 80010d4:	2201      	movs	r2, #1
 80010d6:	601a      	str	r2, [r3, #0]
				break;
 80010d8:	e04f      	b.n	800117a <UartWriteCmdBuffer+0x13e>

			case CLI_KEY_HORIZONTAL_TAB:
				*uart_state = UART_RX_TAB;
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	2204      	movs	r2, #4
 80010de:	601a      	str	r2, [r3, #0]
				break;
 80010e0:	e04b      	b.n	800117a <UartWriteCmdBuffer+0x13e>

			case CLI_KEY_CARRIAGE_RETURN:
			case CLI_KEY_LINE_FEED:
				len = 2;
 80010e2:	2302      	movs	r3, #2
 80010e4:	73fb      	strb	r3, [r7, #15]
				sprintf(cdata, "\r\n");
 80010e6:	f107 0308 	add.w	r3, r7, #8
 80010ea:	492f      	ldr	r1, [pc, #188]	; (80011a8 <UartWriteCmdBuffer+0x16c>)
 80010ec:	4618      	mov	r0, r3
 80010ee:	f005 f9c7 	bl	8006480 <siprintf>

				cmd_buff[cmd_buff_length++] = '\r';
 80010f2:	4b2e      	ldr	r3, [pc, #184]	; (80011ac <UartWriteCmdBuffer+0x170>)
 80010f4:	781b      	ldrb	r3, [r3, #0]
 80010f6:	1c5a      	adds	r2, r3, #1
 80010f8:	b2d1      	uxtb	r1, r2
 80010fa:	4a2c      	ldr	r2, [pc, #176]	; (80011ac <UartWriteCmdBuffer+0x170>)
 80010fc:	7011      	strb	r1, [r2, #0]
 80010fe:	461a      	mov	r2, r3
 8001100:	4b2b      	ldr	r3, [pc, #172]	; (80011b0 <UartWriteCmdBuffer+0x174>)
 8001102:	210d      	movs	r1, #13
 8001104:	5499      	strb	r1, [r3, r2]
				cmd_buff[cmd_buff_length++] = '\n';
 8001106:	4b29      	ldr	r3, [pc, #164]	; (80011ac <UartWriteCmdBuffer+0x170>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	1c5a      	adds	r2, r3, #1
 800110c:	b2d1      	uxtb	r1, r2
 800110e:	4a27      	ldr	r2, [pc, #156]	; (80011ac <UartWriteCmdBuffer+0x170>)
 8001110:	7011      	strb	r1, [r2, #0]
 8001112:	461a      	mov	r2, r3
 8001114:	4b26      	ldr	r3, [pc, #152]	; (80011b0 <UartWriteCmdBuffer+0x174>)
 8001116:	210a      	movs	r1, #10
 8001118:	5499      	strb	r1, [r3, r2]
				break;
 800111a:	e02e      	b.n	800117a <UartWriteCmdBuffer+0x13e>

			case '\b':
			case CLI_KEY_DELETE:
				if(cmd_buff_length == 0){
 800111c:	4b23      	ldr	r3, [pc, #140]	; (80011ac <UartWriteCmdBuffer+0x170>)
 800111e:	781b      	ldrb	r3, [r3, #0]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d027      	beq.n	8001174 <UartWriteCmdBuffer+0x138>
					break;
				}
				len = 3;
 8001124:	2303      	movs	r3, #3
 8001126:	73fb      	strb	r3, [r7, #15]
				sprintf(cdata, "\b \b");
 8001128:	f107 0308 	add.w	r3, r7, #8
 800112c:	4921      	ldr	r1, [pc, #132]	; (80011b4 <UartWriteCmdBuffer+0x178>)
 800112e:	4618      	mov	r0, r3
 8001130:	f005 f9a6 	bl	8006480 <siprintf>

				if(cmd_buff_length > 0)
 8001134:	4b1d      	ldr	r3, [pc, #116]	; (80011ac <UartWriteCmdBuffer+0x170>)
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d01d      	beq.n	8001178 <UartWriteCmdBuffer+0x13c>
					cmd_buff[cmd_buff_length--] = '\0';
 800113c:	4b1b      	ldr	r3, [pc, #108]	; (80011ac <UartWriteCmdBuffer+0x170>)
 800113e:	781b      	ldrb	r3, [r3, #0]
 8001140:	1e5a      	subs	r2, r3, #1
 8001142:	b2d1      	uxtb	r1, r2
 8001144:	4a19      	ldr	r2, [pc, #100]	; (80011ac <UartWriteCmdBuffer+0x170>)
 8001146:	7011      	strb	r1, [r2, #0]
 8001148:	461a      	mov	r2, r3
 800114a:	4b19      	ldr	r3, [pc, #100]	; (80011b0 <UartWriteCmdBuffer+0x174>)
 800114c:	2100      	movs	r1, #0
 800114e:	5499      	strb	r1, [r3, r2]
				break;
 8001150:	e012      	b.n	8001178 <UartWriteCmdBuffer+0x13c>

			default:
				cdata[0] = g_rx_buffer;
 8001152:	4b14      	ldr	r3, [pc, #80]	; (80011a4 <UartWriteCmdBuffer+0x168>)
 8001154:	781b      	ldrb	r3, [r3, #0]
 8001156:	723b      	strb	r3, [r7, #8]
				cmd_buff[cmd_buff_length++] = g_rx_buffer;
 8001158:	4b14      	ldr	r3, [pc, #80]	; (80011ac <UartWriteCmdBuffer+0x170>)
 800115a:	781b      	ldrb	r3, [r3, #0]
 800115c:	1c5a      	adds	r2, r3, #1
 800115e:	b2d1      	uxtb	r1, r2
 8001160:	4a12      	ldr	r2, [pc, #72]	; (80011ac <UartWriteCmdBuffer+0x170>)
 8001162:	7011      	strb	r1, [r2, #0]
 8001164:	461a      	mov	r2, r3
 8001166:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <UartWriteCmdBuffer+0x168>)
 8001168:	7819      	ldrb	r1, [r3, #0]
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <UartWriteCmdBuffer+0x174>)
 800116c:	5499      	strb	r1, [r3, r2]
				break;
 800116e:	e004      	b.n	800117a <UartWriteCmdBuffer+0x13e>
		}
	}
 8001170:	bf00      	nop
 8001172:	e002      	b.n	800117a <UartWriteCmdBuffer+0x13e>
					break;
 8001174:	bf00      	nop
 8001176:	e000      	b.n	800117a <UartWriteCmdBuffer+0x13e>
				break;
 8001178:	bf00      	nop

	UartWriteSpecialKey(huart, uart_state);
 800117a:	6839      	ldr	r1, [r7, #0]
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f000 f81b 	bl	80011b8 <UartWriteSpecialKey>

	HAL_UART_Transmit(huart, (uint8_t *)cdata, len, 10);
 8001182:	7bfb      	ldrb	r3, [r7, #15]
 8001184:	b29a      	uxth	r2, r3
 8001186:	f107 0108 	add.w	r1, r7, #8
 800118a:	230a      	movs	r3, #10
 800118c:	6878      	ldr	r0, [r7, #4]
 800118e:	f003 fbc0 	bl	8004912 <HAL_UART_Transmit>
	HAL_UART_Receive_IT(huart, &g_rx_buffer, 1);
 8001192:	2201      	movs	r2, #1
 8001194:	4903      	ldr	r1, [pc, #12]	; (80011a4 <UartWriteCmdBuffer+0x168>)
 8001196:	6878      	ldr	r0, [r7, #4]
 8001198:	f003 fcef 	bl	8004b7a <HAL_UART_Receive_IT>
}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	200015e9 	.word	0x200015e9
 80011a8:	08007a44 	.word	0x08007a44
 80011ac:	200015e8 	.word	0x200015e8
 80011b0:	200015b0 	.word	0x200015b0
 80011b4:	08007a48 	.word	0x08007a48

080011b8 <UartWriteSpecialKey>:


void UartWriteSpecialKey(UART_HandleTypeDef* huart, int* uart_state)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
 80011c0:	6039      	str	r1, [r7, #0]

	switch(*uart_state){
 80011c2:	683b      	ldr	r3, [r7, #0]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	2b03      	cmp	r3, #3
 80011ca:	d82b      	bhi.n	8001224 <UartWriteSpecialKey+0x6c>
 80011cc:	a201      	add	r2, pc, #4	; (adr r2, 80011d4 <UartWriteSpecialKey+0x1c>)
 80011ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d2:	bf00      	nop
 80011d4:	080011e5 	.word	0x080011e5
 80011d8:	080011f7 	.word	0x080011f7
 80011dc:	08001209 	.word	0x08001209
 80011e0:	08001217 	.word	0x08001217
		case UART_RX_ESC:
			*uart_state = UART_RX_BRACKET;
 80011e4:	683b      	ldr	r3, [r7, #0]
 80011e6:	2202      	movs	r2, #2
 80011e8:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(huart, &g_rx_buffer, 1);
 80011ea:	2201      	movs	r2, #1
 80011ec:	490f      	ldr	r1, [pc, #60]	; (800122c <UartWriteSpecialKey+0x74>)
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	f003 fcc3 	bl	8004b7a <HAL_UART_Receive_IT>
			break;
 80011f4:	e016      	b.n	8001224 <UartWriteSpecialKey+0x6c>

		case UART_RX_BRACKET:
			*uart_state = UART_RX_DIR;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	2203      	movs	r2, #3
 80011fa:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(huart, &g_rx_buffer, 1);
 80011fc:	2201      	movs	r2, #1
 80011fe:	490b      	ldr	r1, [pc, #44]	; (800122c <UartWriteSpecialKey+0x74>)
 8001200:	6878      	ldr	r0, [r7, #4]
 8001202:	f003 fcba 	bl	8004b7a <HAL_UART_Receive_IT>
			break;
 8001206:	e00d      	b.n	8001224 <UartWriteSpecialKey+0x6c>

		case UART_RX_DIR:
			*uart_state = UART_RX_IDLE;
 8001208:	683b      	ldr	r3, [r7, #0]
 800120a:	2200      	movs	r2, #0
 800120c:	601a      	str	r2, [r3, #0]
			UartWriteDirKey(huart);
 800120e:	6878      	ldr	r0, [r7, #4]
 8001210:	f000 f80e 	bl	8001230 <UartWriteDirKey>
			break;
 8001214:	e006      	b.n	8001224 <UartWriteSpecialKey+0x6c>

		case UART_RX_TAB:
			*uart_state = UART_RX_IDLE;
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	2200      	movs	r2, #0
 800121a:	601a      	str	r2, [r3, #0]
			UartWriteTabKey(huart);
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f000 f851 	bl	80012c4 <UartWriteTabKey>
			break;
 8001222:	bf00      	nop

		default:
			;

	}
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}
 800122c:	200015e9 	.word	0x200015e9

08001230 <UartWriteDirKey>:


void UartWriteDirKey(UART_HandleTypeDef* huart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	if(g_rx_buffer == CLI_KEY_UP){
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <UartWriteDirKey+0x88>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b41      	cmp	r3, #65	; 0x41
 800123e:	d112      	bne.n	8001266 <UartWriteDirKey+0x36>
		if(que.cursor == que.front){
 8001240:	4b1e      	ldr	r3, [pc, #120]	; (80012bc <UartWriteDirKey+0x8c>)
 8001242:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001246:	4b1d      	ldr	r3, [pc, #116]	; (80012bc <UartWriteDirKey+0x8c>)
 8001248:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 800124c:	429a      	cmp	r2, r3
 800124e:	d02d      	beq.n	80012ac <UartWriteDirKey+0x7c>
			return;
		}

		UartEraseCmdBuffer(huart);
 8001250:	6878      	ldr	r0, [r7, #4]
 8001252:	f000 f887 	bl	8001364 <UartEraseCmdBuffer>
		move_cursor(&que, UP);
 8001256:	2100      	movs	r1, #0
 8001258:	4818      	ldr	r0, [pc, #96]	; (80012bc <UartWriteDirKey+0x8c>)
 800125a:	f7ff fa5f 	bl	800071c <move_cursor>
		UartWriteHistoryOnCmdBuffer(huart);
 800125e:	6878      	ldr	r0, [r7, #4]
 8001260:	f000 f8c2 	bl	80013e8 <UartWriteHistoryOnCmdBuffer>
 8001264:	e025      	b.n	80012b2 <UartWriteDirKey+0x82>

	}
	else if(g_rx_buffer == CLI_KEY_DOWN){
 8001266:	4b14      	ldr	r3, [pc, #80]	; (80012b8 <UartWriteDirKey+0x88>)
 8001268:	781b      	ldrb	r3, [r3, #0]
 800126a:	2b42      	cmp	r3, #66	; 0x42
 800126c:	d121      	bne.n	80012b2 <UartWriteDirKey+0x82>
		if(((que.cursor + 1)%MAX_HISTORY_BUFFER_LENGTH) == que.rear){
 800126e:	4b13      	ldr	r3, [pc, #76]	; (80012bc <UartWriteDirKey+0x8c>)
 8001270:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001274:	1c59      	adds	r1, r3, #1
 8001276:	4b12      	ldr	r3, [pc, #72]	; (80012c0 <UartWriteDirKey+0x90>)
 8001278:	fb83 2301 	smull	r2, r3, r3, r1
 800127c:	109a      	asrs	r2, r3, #2
 800127e:	17cb      	asrs	r3, r1, #31
 8001280:	1ad2      	subs	r2, r2, r3
 8001282:	4613      	mov	r3, r2
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	4413      	add	r3, r2
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	1aca      	subs	r2, r1, r3
 800128c:	4b0b      	ldr	r3, [pc, #44]	; (80012bc <UartWriteDirKey+0x8c>)
 800128e:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8001292:	429a      	cmp	r2, r3
 8001294:	d00c      	beq.n	80012b0 <UartWriteDirKey+0x80>
			return;
		}

		UartEraseCmdBuffer(huart);
 8001296:	6878      	ldr	r0, [r7, #4]
 8001298:	f000 f864 	bl	8001364 <UartEraseCmdBuffer>
		move_cursor(&que, DOWN);
 800129c:	2101      	movs	r1, #1
 800129e:	4807      	ldr	r0, [pc, #28]	; (80012bc <UartWriteDirKey+0x8c>)
 80012a0:	f7ff fa3c 	bl	800071c <move_cursor>
		UartWriteHistoryOnCmdBuffer(huart);
 80012a4:	6878      	ldr	r0, [r7, #4]
 80012a6:	f000 f89f 	bl	80013e8 <UartWriteHistoryOnCmdBuffer>
 80012aa:	e002      	b.n	80012b2 <UartWriteDirKey+0x82>
			return;
 80012ac:	bf00      	nop
 80012ae:	e000      	b.n	80012b2 <UartWriteDirKey+0x82>
			return;
 80012b0:	bf00      	nop
	}
}
 80012b2:	3708      	adds	r7, #8
 80012b4:	46bd      	mov	sp, r7
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	200015e9 	.word	0x200015e9
 80012bc:	200015ec 	.word	0x200015ec
 80012c0:	66666667 	.word	0x66666667

080012c4 <UartWriteTabKey>:


void UartWriteTabKey(UART_HandleTypeDef* huart)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b090      	sub	sp, #64	; 0x40
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
	char tab_buff[MAX_CMD_BUFFER_LENGTH];
	memset(tab_buff, 0x00, sizeof(tab_buff));
 80012cc:	f107 0308 	add.w	r3, r7, #8
 80012d0:	2232      	movs	r2, #50	; 0x32
 80012d2:	2100      	movs	r1, #0
 80012d4:	4618      	mov	r0, r3
 80012d6:	f004 ff37 	bl	8006148 <memset>

	int total_commands = FindCommands((char *)cmd_buff, tab_buff);
 80012da:	f107 0308 	add.w	r3, r7, #8
 80012de:	4619      	mov	r1, r3
 80012e0:	481e      	ldr	r0, [pc, #120]	; (800135c <UartWriteTabKey+0x98>)
 80012e2:	f7ff fd65 	bl	8000db0 <FindCommands>
 80012e6:	63f8      	str	r0, [r7, #60]	; 0x3c

	if(total_commands == 0){
 80012e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d032      	beq.n	8001354 <UartWriteTabKey+0x90>
		;
	}
	else if(total_commands== 1){
 80012ee:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80012f0:	2b01      	cmp	r3, #1
 80012f2:	d11e      	bne.n	8001332 <UartWriteTabKey+0x6e>
		UartEraseCmdBuffer(huart);
 80012f4:	6878      	ldr	r0, [r7, #4]
 80012f6:	f000 f835 	bl	8001364 <UartEraseCmdBuffer>

		cmd_buff_length = strlen(tab_buff);
 80012fa:	f107 0308 	add.w	r3, r7, #8
 80012fe:	4618      	mov	r0, r3
 8001300:	f7fe ff76 	bl	80001f0 <strlen>
 8001304:	4603      	mov	r3, r0
 8001306:	b2da      	uxtb	r2, r3
 8001308:	4b15      	ldr	r3, [pc, #84]	; (8001360 <UartWriteTabKey+0x9c>)
 800130a:	701a      	strb	r2, [r3, #0]
		//HAL_UART_Transmit_IT(huart, (uint8_t *)tab_buff, cmd_buff_length);
		HAL_UART_Transmit(huart, (uint8_t *)tab_buff, cmd_buff_length, 100);
 800130c:	4b14      	ldr	r3, [pc, #80]	; (8001360 <UartWriteTabKey+0x9c>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	b29a      	uxth	r2, r3
 8001312:	f107 0108 	add.w	r1, r7, #8
 8001316:	2364      	movs	r3, #100	; 0x64
 8001318:	6878      	ldr	r0, [r7, #4]
 800131a:	f003 fafa 	bl	8004912 <HAL_UART_Transmit>
		memcpy(cmd_buff, (uint8_t *)tab_buff, cmd_buff_length);
 800131e:	4b10      	ldr	r3, [pc, #64]	; (8001360 <UartWriteTabKey+0x9c>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	461a      	mov	r2, r3
 8001324:	f107 0308 	add.w	r3, r7, #8
 8001328:	4619      	mov	r1, r3
 800132a:	480c      	ldr	r0, [pc, #48]	; (800135c <UartWriteTabKey+0x98>)
 800132c:	f004 fefe 	bl	800612c <memcpy>
		memset(cmd_buff, 0x00, sizeof(cmd_buff));
		cmd_buff_length = 2;
		cmd_buff[0] = '\r';
		cmd_buff[1] = '\n';
	}
}
 8001330:	e010      	b.n	8001354 <UartWriteTabKey+0x90>
		UartEraseCmdBuffer(huart);
 8001332:	6878      	ldr	r0, [r7, #4]
 8001334:	f000 f816 	bl	8001364 <UartEraseCmdBuffer>
		memset(cmd_buff, 0x00, sizeof(cmd_buff));
 8001338:	2233      	movs	r2, #51	; 0x33
 800133a:	2100      	movs	r1, #0
 800133c:	4807      	ldr	r0, [pc, #28]	; (800135c <UartWriteTabKey+0x98>)
 800133e:	f004 ff03 	bl	8006148 <memset>
		cmd_buff_length = 2;
 8001342:	4b07      	ldr	r3, [pc, #28]	; (8001360 <UartWriteTabKey+0x9c>)
 8001344:	2202      	movs	r2, #2
 8001346:	701a      	strb	r2, [r3, #0]
		cmd_buff[0] = '\r';
 8001348:	4b04      	ldr	r3, [pc, #16]	; (800135c <UartWriteTabKey+0x98>)
 800134a:	220d      	movs	r2, #13
 800134c:	701a      	strb	r2, [r3, #0]
		cmd_buff[1] = '\n';
 800134e:	4b03      	ldr	r3, [pc, #12]	; (800135c <UartWriteTabKey+0x98>)
 8001350:	220a      	movs	r2, #10
 8001352:	705a      	strb	r2, [r3, #1]
}
 8001354:	bf00      	nop
 8001356:	3740      	adds	r7, #64	; 0x40
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200015b0 	.word	0x200015b0
 8001360:	200015e8 	.word	0x200015e8

08001364 <UartEraseCmdBuffer>:


void UartEraseCmdBuffer(UART_HandleTypeDef* huart)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b084      	sub	sp, #16
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
	char cdata[4];
	int len;

	memset(cdata, 0x00, 4);
 800136c:	f107 0308 	add.w	r3, r7, #8
 8001370:	2204      	movs	r2, #4
 8001372:	2100      	movs	r1, #0
 8001374:	4618      	mov	r0, r3
 8001376:	f004 fee7 	bl	8006148 <memset>

	while(cmd_buff_length){
 800137a:	e024      	b.n	80013c6 <UartEraseCmdBuffer+0x62>
		len = 3;
 800137c:	2303      	movs	r3, #3
 800137e:	60fb      	str	r3, [r7, #12]
		sprintf(cdata, "\b \b");
 8001380:	f107 0308 	add.w	r3, r7, #8
 8001384:	4914      	ldr	r1, [pc, #80]	; (80013d8 <UartEraseCmdBuffer+0x74>)
 8001386:	4618      	mov	r0, r3
 8001388:	f005 f87a 	bl	8006480 <siprintf>

		if(cmd_buff_length)
 800138c:	4b13      	ldr	r3, [pc, #76]	; (80013dc <UartEraseCmdBuffer+0x78>)
 800138e:	781b      	ldrb	r3, [r3, #0]
 8001390:	2b00      	cmp	r3, #0
 8001392:	d00b      	beq.n	80013ac <UartEraseCmdBuffer+0x48>
			cmd_buff[--cmd_buff_length] = '\0';
 8001394:	4b11      	ldr	r3, [pc, #68]	; (80013dc <UartEraseCmdBuffer+0x78>)
 8001396:	781b      	ldrb	r3, [r3, #0]
 8001398:	3b01      	subs	r3, #1
 800139a:	b2da      	uxtb	r2, r3
 800139c:	4b0f      	ldr	r3, [pc, #60]	; (80013dc <UartEraseCmdBuffer+0x78>)
 800139e:	701a      	strb	r2, [r3, #0]
 80013a0:	4b0e      	ldr	r3, [pc, #56]	; (80013dc <UartEraseCmdBuffer+0x78>)
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	4b0e      	ldr	r3, [pc, #56]	; (80013e0 <UartEraseCmdBuffer+0x7c>)
 80013a8:	2100      	movs	r1, #0
 80013aa:	5499      	strb	r1, [r3, r2]

		HAL_UART_Transmit(huart, (uint8_t *)cdata, len, 10);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	b29a      	uxth	r2, r3
 80013b0:	f107 0108 	add.w	r1, r7, #8
 80013b4:	230a      	movs	r3, #10
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f003 faab 	bl	8004912 <HAL_UART_Transmit>
		HAL_UART_Receive_IT(huart, &g_rx_buffer, 1);
 80013bc:	2201      	movs	r2, #1
 80013be:	4909      	ldr	r1, [pc, #36]	; (80013e4 <UartEraseCmdBuffer+0x80>)
 80013c0:	6878      	ldr	r0, [r7, #4]
 80013c2:	f003 fbda 	bl	8004b7a <HAL_UART_Receive_IT>
	while(cmd_buff_length){
 80013c6:	4b05      	ldr	r3, [pc, #20]	; (80013dc <UartEraseCmdBuffer+0x78>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d1d6      	bne.n	800137c <UartEraseCmdBuffer+0x18>
	}
}
 80013ce:	bf00      	nop
 80013d0:	bf00      	nop
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	08007a48 	.word	0x08007a48
 80013dc:	200015e8 	.word	0x200015e8
 80013e0:	200015b0 	.word	0x200015b0
 80013e4:	200015e9 	.word	0x200015e9

080013e8 <UartWriteHistoryOnCmdBuffer>:


void UartWriteHistoryOnCmdBuffer(UART_HandleTypeDef* huart)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
	memset(cmd_buff, 0x00, sizeof(cmd_buff));
 80013f0:	2233      	movs	r2, #51	; 0x33
 80013f2:	2100      	movs	r1, #0
 80013f4:	4819      	ldr	r0, [pc, #100]	; (800145c <UartWriteHistoryOnCmdBuffer+0x74>)
 80013f6:	f004 fea7 	bl	8006148 <memset>
	cmd_buff_length = strlen((const char *)que.history[que.cursor]);
 80013fa:	4b19      	ldr	r3, [pc, #100]	; (8001460 <UartWriteHistoryOnCmdBuffer+0x78>)
 80013fc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001400:	2232      	movs	r2, #50	; 0x32
 8001402:	fb02 f303 	mul.w	r3, r2, r3
 8001406:	4a16      	ldr	r2, [pc, #88]	; (8001460 <UartWriteHistoryOnCmdBuffer+0x78>)
 8001408:	4413      	add	r3, r2
 800140a:	4618      	mov	r0, r3
 800140c:	f7fe fef0 	bl	80001f0 <strlen>
 8001410:	4603      	mov	r3, r0
 8001412:	b2da      	uxtb	r2, r3
 8001414:	4b13      	ldr	r3, [pc, #76]	; (8001464 <UartWriteHistoryOnCmdBuffer+0x7c>)
 8001416:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(huart, (uint8_t *)que.history[que.cursor], cmd_buff_length, 10);
 8001418:	4b11      	ldr	r3, [pc, #68]	; (8001460 <UartWriteHistoryOnCmdBuffer+0x78>)
 800141a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800141e:	2232      	movs	r2, #50	; 0x32
 8001420:	fb02 f303 	mul.w	r3, r2, r3
 8001424:	4a0e      	ldr	r2, [pc, #56]	; (8001460 <UartWriteHistoryOnCmdBuffer+0x78>)
 8001426:	1899      	adds	r1, r3, r2
 8001428:	4b0e      	ldr	r3, [pc, #56]	; (8001464 <UartWriteHistoryOnCmdBuffer+0x7c>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	b29a      	uxth	r2, r3
 800142e:	230a      	movs	r3, #10
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f003 fa6e 	bl	8004912 <HAL_UART_Transmit>
	memcpy(cmd_buff, (uint8_t *)que.history[que.cursor], cmd_buff_length);
 8001436:	4b0a      	ldr	r3, [pc, #40]	; (8001460 <UartWriteHistoryOnCmdBuffer+0x78>)
 8001438:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800143c:	2232      	movs	r2, #50	; 0x32
 800143e:	fb02 f303 	mul.w	r3, r2, r3
 8001442:	4a07      	ldr	r2, [pc, #28]	; (8001460 <UartWriteHistoryOnCmdBuffer+0x78>)
 8001444:	4413      	add	r3, r2
 8001446:	4a07      	ldr	r2, [pc, #28]	; (8001464 <UartWriteHistoryOnCmdBuffer+0x7c>)
 8001448:	7812      	ldrb	r2, [r2, #0]
 800144a:	4619      	mov	r1, r3
 800144c:	4803      	ldr	r0, [pc, #12]	; (800145c <UartWriteHistoryOnCmdBuffer+0x74>)
 800144e:	f004 fe6d 	bl	800612c <memcpy>
}
 8001452:	bf00      	nop
 8001454:	3708      	adds	r7, #8
 8001456:	46bd      	mov	sp, r7
 8001458:	bd80      	pop	{r7, pc}
 800145a:	bf00      	nop
 800145c:	200015b0 	.word	0x200015b0
 8001460:	200015ec 	.word	0x200015ec
 8001464:	200015e8 	.word	0x200015e8

08001468 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b082      	sub	sp, #8
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a05      	ldr	r2, [pc, #20]	; (800148c <HAL_UART_RxCpltCallback+0x24>)
 8001476:	4293      	cmp	r3, r2
 8001478:	d103      	bne.n	8001482 <HAL_UART_RxCpltCallback+0x1a>
		UartWriteCmdBuffer(huart, &uart_state);
 800147a:	4905      	ldr	r1, [pc, #20]	; (8001490 <HAL_UART_RxCpltCallback+0x28>)
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff fddd 	bl	800103c <UartWriteCmdBuffer>
	}
}
 8001482:	bf00      	nop
 8001484:	3708      	adds	r7, #8
 8001486:	46bd      	mov	sp, r7
 8001488:	bd80      	pop	{r7, pc}
 800148a:	bf00      	nop
 800148c:	40004800 	.word	0x40004800
 8001490:	200015e4 	.word	0x200015e4

08001494 <Int2Str>:
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 8001494:	b480      	push	{r7}
 8001496:	b087      	sub	sp, #28
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
 800149c:	6039      	str	r1, [r7, #0]
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 800149e:	4b26      	ldr	r3, [pc, #152]	; (8001538 <Int2Str+0xa4>)
 80014a0:	613b      	str	r3, [r7, #16]
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	2300      	movs	r3, #0
 80014a8:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < 10; i++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	e038      	b.n	8001522 <Int2Str+0x8e>
  {
    p_str[pos++] = (intnum / divider) + 48;
 80014b0:	683a      	ldr	r2, [r7, #0]
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80014b8:	b2da      	uxtb	r2, r3
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	1c59      	adds	r1, r3, #1
 80014be:	60f9      	str	r1, [r7, #12]
 80014c0:	6879      	ldr	r1, [r7, #4]
 80014c2:	440b      	add	r3, r1
 80014c4:	3230      	adds	r2, #48	; 0x30
 80014c6:	b2d2      	uxtb	r2, r2
 80014c8:	701a      	strb	r2, [r3, #0]

    intnum = intnum % divider;
 80014ca:	683b      	ldr	r3, [r7, #0]
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	fbb3 f2f2 	udiv	r2, r3, r2
 80014d2:	6939      	ldr	r1, [r7, #16]
 80014d4:	fb01 f202 	mul.w	r2, r1, r2
 80014d8:	1a9b      	subs	r3, r3, r2
 80014da:	603b      	str	r3, [r7, #0]
    divider /= 10;
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	4a17      	ldr	r2, [pc, #92]	; (800153c <Int2Str+0xa8>)
 80014e0:	fba2 2303 	umull	r2, r3, r2, r3
 80014e4:	08db      	lsrs	r3, r3, #3
 80014e6:	613b      	str	r3, [r7, #16]
    if ((p_str[pos-1] == '0') & (status == 0))
 80014e8:	68fb      	ldr	r3, [r7, #12]
 80014ea:	3b01      	subs	r3, #1
 80014ec:	687a      	ldr	r2, [r7, #4]
 80014ee:	4413      	add	r3, r2
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	2b30      	cmp	r3, #48	; 0x30
 80014f4:	bf0c      	ite	eq
 80014f6:	2301      	moveq	r3, #1
 80014f8:	2300      	movne	r3, #0
 80014fa:	b2da      	uxtb	r2, r3
 80014fc:	68bb      	ldr	r3, [r7, #8]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	bf0c      	ite	eq
 8001502:	2301      	moveq	r3, #1
 8001504:	2300      	movne	r3, #0
 8001506:	b2db      	uxtb	r3, r3
 8001508:	4013      	ands	r3, r2
 800150a:	b2db      	uxtb	r3, r3
 800150c:	2b00      	cmp	r3, #0
 800150e:	d002      	beq.n	8001516 <Int2Str+0x82>
    {
      pos = 0;
 8001510:	2300      	movs	r3, #0
 8001512:	60fb      	str	r3, [r7, #12]
 8001514:	e002      	b.n	800151c <Int2Str+0x88>
    }
    else
    {
      status++;
 8001516:	68bb      	ldr	r3, [r7, #8]
 8001518:	3301      	adds	r3, #1
 800151a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 10; i++)
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	3301      	adds	r3, #1
 8001520:	617b      	str	r3, [r7, #20]
 8001522:	697b      	ldr	r3, [r7, #20]
 8001524:	2b09      	cmp	r3, #9
 8001526:	d9c3      	bls.n	80014b0 <Int2Str+0x1c>
    }
  }
}
 8001528:	bf00      	nop
 800152a:	bf00      	nop
 800152c:	371c      	adds	r7, #28
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	3b9aca00 	.word	0x3b9aca00
 800153c:	cccccccd 	.word	0xcccccccd

08001540 <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 8001540:	b480      	push	{r7}
 8001542:	b087      	sub	sp, #28
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
 8001548:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	2300      	movs	r3, #0
 8001550:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 8001552:	2300      	movs	r3, #0
 8001554:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	781b      	ldrb	r3, [r3, #0]
 800155a:	2b30      	cmp	r3, #48	; 0x30
 800155c:	f040 80d7 	bne.w	800170e <Str2Int+0x1ce>
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	3301      	adds	r3, #1
 8001564:	781b      	ldrb	r3, [r3, #0]
 8001566:	2b78      	cmp	r3, #120	; 0x78
 8001568:	d005      	beq.n	8001576 <Str2Int+0x36>
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	3301      	adds	r3, #1
 800156e:	781b      	ldrb	r3, [r3, #0]
 8001570:	2b58      	cmp	r3, #88	; 0x58
 8001572:	f040 80cc 	bne.w	800170e <Str2Int+0x1ce>
  {
    i = 2;
 8001576:	2302      	movs	r3, #2
 8001578:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 800157a:	e057      	b.n	800162c <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 800157c:	687a      	ldr	r2, [r7, #4]
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	4413      	add	r3, r2
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b40      	cmp	r3, #64	; 0x40
 8001586:	d905      	bls.n	8001594 <Str2Int+0x54>
 8001588:	687a      	ldr	r2, [r7, #4]
 800158a:	697b      	ldr	r3, [r7, #20]
 800158c:	4413      	add	r3, r2
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b46      	cmp	r3, #70	; 0x46
 8001592:	d917      	bls.n	80015c4 <Str2Int+0x84>
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	697b      	ldr	r3, [r7, #20]
 8001598:	4413      	add	r3, r2
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b60      	cmp	r3, #96	; 0x60
 800159e:	d905      	bls.n	80015ac <Str2Int+0x6c>
 80015a0:	687a      	ldr	r2, [r7, #4]
 80015a2:	697b      	ldr	r3, [r7, #20]
 80015a4:	4413      	add	r3, r2
 80015a6:	781b      	ldrb	r3, [r3, #0]
 80015a8:	2b66      	cmp	r3, #102	; 0x66
 80015aa:	d90b      	bls.n	80015c4 <Str2Int+0x84>
 80015ac:	687a      	ldr	r2, [r7, #4]
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	4413      	add	r3, r2
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b2f      	cmp	r3, #47	; 0x2f
 80015b6:	d936      	bls.n	8001626 <Str2Int+0xe6>
 80015b8:	687a      	ldr	r2, [r7, #4]
 80015ba:	697b      	ldr	r3, [r7, #20]
 80015bc:	4413      	add	r3, r2
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	2b39      	cmp	r3, #57	; 0x39
 80015c2:	d830      	bhi.n	8001626 <Str2Int+0xe6>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	011b      	lsls	r3, r3, #4
 80015c8:	6879      	ldr	r1, [r7, #4]
 80015ca:	697a      	ldr	r2, [r7, #20]
 80015cc:	440a      	add	r2, r1
 80015ce:	7812      	ldrb	r2, [r2, #0]
 80015d0:	2a2f      	cmp	r2, #47	; 0x2f
 80015d2:	d90b      	bls.n	80015ec <Str2Int+0xac>
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	697a      	ldr	r2, [r7, #20]
 80015d8:	440a      	add	r2, r1
 80015da:	7812      	ldrb	r2, [r2, #0]
 80015dc:	2a39      	cmp	r2, #57	; 0x39
 80015de:	d805      	bhi.n	80015ec <Str2Int+0xac>
 80015e0:	6879      	ldr	r1, [r7, #4]
 80015e2:	697a      	ldr	r2, [r7, #20]
 80015e4:	440a      	add	r2, r1
 80015e6:	7812      	ldrb	r2, [r2, #0]
 80015e8:	3a30      	subs	r2, #48	; 0x30
 80015ea:	e016      	b.n	800161a <Str2Int+0xda>
 80015ec:	6879      	ldr	r1, [r7, #4]
 80015ee:	697a      	ldr	r2, [r7, #20]
 80015f0:	440a      	add	r2, r1
 80015f2:	7812      	ldrb	r2, [r2, #0]
 80015f4:	2a40      	cmp	r2, #64	; 0x40
 80015f6:	d90b      	bls.n	8001610 <Str2Int+0xd0>
 80015f8:	6879      	ldr	r1, [r7, #4]
 80015fa:	697a      	ldr	r2, [r7, #20]
 80015fc:	440a      	add	r2, r1
 80015fe:	7812      	ldrb	r2, [r2, #0]
 8001600:	2a46      	cmp	r2, #70	; 0x46
 8001602:	d805      	bhi.n	8001610 <Str2Int+0xd0>
 8001604:	6879      	ldr	r1, [r7, #4]
 8001606:	697a      	ldr	r2, [r7, #20]
 8001608:	440a      	add	r2, r1
 800160a:	7812      	ldrb	r2, [r2, #0]
 800160c:	3a37      	subs	r2, #55	; 0x37
 800160e:	e004      	b.n	800161a <Str2Int+0xda>
 8001610:	6879      	ldr	r1, [r7, #4]
 8001612:	697a      	ldr	r2, [r7, #20]
 8001614:	440a      	add	r2, r1
 8001616:	7812      	ldrb	r2, [r2, #0]
 8001618:	3a57      	subs	r2, #87	; 0x57
 800161a:	4413      	add	r3, r2
 800161c:	60fb      	str	r3, [r7, #12]
      {
        /* Return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 800161e:	697b      	ldr	r3, [r7, #20]
 8001620:	3301      	adds	r3, #1
 8001622:	617b      	str	r3, [r7, #20]
 8001624:	e002      	b.n	800162c <Str2Int+0xec>
        res = 0;
 8001626:	2300      	movs	r3, #0
 8001628:	613b      	str	r3, [r7, #16]
        break;
 800162a:	e008      	b.n	800163e <Str2Int+0xfe>
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	2b0a      	cmp	r3, #10
 8001630:	d805      	bhi.n	800163e <Str2Int+0xfe>
 8001632:	687a      	ldr	r2, [r7, #4]
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	4413      	add	r3, r2
 8001638:	781b      	ldrb	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d19e      	bne.n	800157c <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 800163e:	687a      	ldr	r2, [r7, #4]
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	4413      	add	r3, r2
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d167      	bne.n	800171a <Str2Int+0x1da>
    {
      *p_intnum = val;
 800164a:	683b      	ldr	r3, [r7, #0]
 800164c:	68fa      	ldr	r2, [r7, #12]
 800164e:	601a      	str	r2, [r3, #0]
      res = 1;
 8001650:	2301      	movs	r3, #1
 8001652:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 8001654:	e061      	b.n	800171a <Str2Int+0x1da>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 8001656:	687a      	ldr	r2, [r7, #4]
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	4413      	add	r3, r2
 800165c:	781b      	ldrb	r3, [r3, #0]
 800165e:	2b00      	cmp	r3, #0
 8001660:	d105      	bne.n	800166e <Str2Int+0x12e>
      {
        *p_intnum = val;
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	68fa      	ldr	r2, [r7, #12]
 8001666:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 8001668:	2301      	movs	r3, #1
 800166a:	613b      	str	r3, [r7, #16]
 800166c:	e04c      	b.n	8001708 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 800166e:	687a      	ldr	r2, [r7, #4]
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	4413      	add	r3, r2
 8001674:	781b      	ldrb	r3, [r3, #0]
 8001676:	2b6b      	cmp	r3, #107	; 0x6b
 8001678:	d005      	beq.n	8001686 <Str2Int+0x146>
 800167a:	687a      	ldr	r2, [r7, #4]
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	4413      	add	r3, r2
 8001680:	781b      	ldrb	r3, [r3, #0]
 8001682:	2b4b      	cmp	r3, #75	; 0x4b
 8001684:	d10b      	bne.n	800169e <Str2Int+0x15e>
 8001686:	697b      	ldr	r3, [r7, #20]
 8001688:	2b00      	cmp	r3, #0
 800168a:	d008      	beq.n	800169e <Str2Int+0x15e>
      {
        val = val << 10;
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	029b      	lsls	r3, r3, #10
 8001690:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 8001692:	683b      	ldr	r3, [r7, #0]
 8001694:	68fa      	ldr	r2, [r7, #12]
 8001696:	601a      	str	r2, [r3, #0]
        res = 1;
 8001698:	2301      	movs	r3, #1
 800169a:	613b      	str	r3, [r7, #16]
 800169c:	e034      	b.n	8001708 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 800169e:	687a      	ldr	r2, [r7, #4]
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	4413      	add	r3, r2
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	2b6d      	cmp	r3, #109	; 0x6d
 80016a8:	d005      	beq.n	80016b6 <Str2Int+0x176>
 80016aa:	687a      	ldr	r2, [r7, #4]
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	4413      	add	r3, r2
 80016b0:	781b      	ldrb	r3, [r3, #0]
 80016b2:	2b4d      	cmp	r3, #77	; 0x4d
 80016b4:	d10b      	bne.n	80016ce <Str2Int+0x18e>
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d008      	beq.n	80016ce <Str2Int+0x18e>
      {
        val = val << 20;
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	051b      	lsls	r3, r3, #20
 80016c0:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	68fa      	ldr	r2, [r7, #12]
 80016c6:	601a      	str	r2, [r3, #0]
        res = 1;
 80016c8:	2301      	movs	r3, #1
 80016ca:	613b      	str	r3, [r7, #16]
 80016cc:	e01c      	b.n	8001708 <Str2Int+0x1c8>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	4413      	add	r3, r2
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	2b2f      	cmp	r3, #47	; 0x2f
 80016d8:	d913      	bls.n	8001702 <Str2Int+0x1c2>
 80016da:	687a      	ldr	r2, [r7, #4]
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	4413      	add	r3, r2
 80016e0:	781b      	ldrb	r3, [r3, #0]
 80016e2:	2b39      	cmp	r3, #57	; 0x39
 80016e4:	d80d      	bhi.n	8001702 <Str2Int+0x1c2>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 80016e6:	68fa      	ldr	r2, [r7, #12]
 80016e8:	4613      	mov	r3, r2
 80016ea:	009b      	lsls	r3, r3, #2
 80016ec:	4413      	add	r3, r2
 80016ee:	005b      	lsls	r3, r3, #1
 80016f0:	4619      	mov	r1, r3
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	4413      	add	r3, r2
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	440b      	add	r3, r1
 80016fc:	3b30      	subs	r3, #48	; 0x30
 80016fe:	60fb      	str	r3, [r7, #12]
 8001700:	e002      	b.n	8001708 <Str2Int+0x1c8>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
        break;
 8001706:	e008      	b.n	800171a <Str2Int+0x1da>
      }
      i++;
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	3301      	adds	r3, #1
 800170c:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	2b0a      	cmp	r3, #10
 8001712:	d802      	bhi.n	800171a <Str2Int+0x1da>
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	2b01      	cmp	r3, #1
 8001718:	d19d      	bne.n	8001656 <Str2Int+0x116>
    }
  }

  return res;
 800171a:	693b      	ldr	r3, [r7, #16]
}
 800171c:	4618      	mov	r0, r3
 800171e:	371c      	adds	r7, #28
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr

08001728 <Serial_PutString>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */
void Serial_PutString(uint8_t *p_string)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b084      	sub	sp, #16
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
  uint16_t length = 0;
 8001730:	2300      	movs	r3, #0
 8001732:	81fb      	strh	r3, [r7, #14]

  while (p_string[length] != '\0')
 8001734:	e002      	b.n	800173c <Serial_PutString+0x14>
  {
    length++;
 8001736:	89fb      	ldrh	r3, [r7, #14]
 8001738:	3301      	adds	r3, #1
 800173a:	81fb      	strh	r3, [r7, #14]
  while (p_string[length] != '\0')
 800173c:	89fb      	ldrh	r3, [r7, #14]
 800173e:	687a      	ldr	r2, [r7, #4]
 8001740:	4413      	add	r3, r2
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b00      	cmp	r3, #0
 8001746:	d1f6      	bne.n	8001736 <Serial_PutString+0xe>
  }
  HAL_UART_Transmit(&huart3, p_string, length, TX_TIMEOUT);
 8001748:	89fa      	ldrh	r2, [r7, #14]
 800174a:	2364      	movs	r3, #100	; 0x64
 800174c:	6879      	ldr	r1, [r7, #4]
 800174e:	4803      	ldr	r0, [pc, #12]	; (800175c <Serial_PutString+0x34>)
 8001750:	f003 f8df 	bl	8004912 <HAL_UART_Transmit>
}
 8001754:	bf00      	nop
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}
 800175c:	20001a18 	.word	0x20001a18

08001760 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 8001760:	b580      	push	{r7, lr}
 8001762:	b082      	sub	sp, #8
 8001764:	af00      	add	r7, sp, #0
 8001766:	4603      	mov	r3, r0
 8001768:	71fb      	strb	r3, [r7, #7]
  /* May be timeouted... */
  if ( huart3.gState == HAL_UART_STATE_TIMEOUT )
 800176a:	4b0a      	ldr	r3, [pc, #40]	; (8001794 <Serial_PutByte+0x34>)
 800176c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001770:	b2db      	uxtb	r3, r3
 8001772:	2ba0      	cmp	r3, #160	; 0xa0
 8001774:	d103      	bne.n	800177e <Serial_PutByte+0x1e>
  {
	  huart3.gState = HAL_UART_STATE_READY;
 8001776:	4b07      	ldr	r3, [pc, #28]	; (8001794 <Serial_PutByte+0x34>)
 8001778:	2220      	movs	r2, #32
 800177a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  return HAL_UART_Transmit(&huart3, &param, 1, TX_TIMEOUT);
 800177e:	1df9      	adds	r1, r7, #7
 8001780:	2364      	movs	r3, #100	; 0x64
 8001782:	2201      	movs	r2, #1
 8001784:	4803      	ldr	r0, [pc, #12]	; (8001794 <Serial_PutByte+0x34>)
 8001786:	f003 f8c4 	bl	8004912 <HAL_UART_Transmit>
 800178a:	4603      	mov	r3, r0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3708      	adds	r7, #8
 8001790:	46bd      	mov	sp, r7
 8001792:	bd80      	pop	{r7, pc}
 8001794:	20001a18 	.word	0x20001a18

08001798 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock(); 
 800179c:	f001 fe50 	bl	8003440 <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */  
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | 
 80017a0:	4b02      	ldr	r3, [pc, #8]	; (80017ac <FLASH_If_Init+0x14>)
 80017a2:	22f3      	movs	r2, #243	; 0xf3
 80017a4:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
}
 80017a6:	bf00      	nop
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	40023c00 	.word	0x40023c00

080017b0 <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
uint32_t FLASH_If_Erase(uint32_t StartSector)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08a      	sub	sp, #40	; 0x28
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  uint32_t UserStartSector;
  uint32_t SectorError;
  FLASH_EraseInitTypeDef pEraseInit;

  /* Unlock the Flash to enable the flash control register access *************/ 
  FLASH_If_Init();
 80017b8:	f7ff ffee 	bl	8001798 <FLASH_If_Init>
  
  /* Get the sector where start the user flash area */
  UserStartSector = GetSector(APPLICATION_ADDRESS);
 80017bc:	480e      	ldr	r0, [pc, #56]	; (80017f8 <FLASH_If_Erase+0x48>)
 80017be:	f000 f85d 	bl	800187c <GetSector>
 80017c2:	6278      	str	r0, [r7, #36]	; 0x24
  
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80017c4:	2300      	movs	r3, #0
 80017c6:	60fb      	str	r3, [r7, #12]
  pEraseInit.Sector = UserStartSector;
 80017c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ca:	617b      	str	r3, [r7, #20]
  pEraseInit.NbSectors = 6;
 80017cc:	2306      	movs	r3, #6
 80017ce:	61bb      	str	r3, [r7, #24]
  pEraseInit.VoltageRange = VOLTAGE_RANGE_3;
 80017d0:	2302      	movs	r3, #2
 80017d2:	61fb      	str	r3, [r7, #28]
    
  if (HAL_FLASHEx_Erase(&pEraseInit, &SectorError) != HAL_OK)
 80017d4:	f107 0220 	add.w	r2, r7, #32
 80017d8:	f107 030c 	add.w	r3, r7, #12
 80017dc:	4611      	mov	r1, r2
 80017de:	4618      	mov	r0, r3
 80017e0:	f001 ff90 	bl	8003704 <HAL_FLASHEx_Erase>
 80017e4:	4603      	mov	r3, r0
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d001      	beq.n	80017ee <FLASH_If_Erase+0x3e>
  {
     /* Error occurred while page erase */
     return (1);
 80017ea:	2301      	movs	r3, #1
 80017ec:	e000      	b.n	80017f0 <FLASH_If_Erase+0x40>
  }
  
  return (0);
 80017ee:	2300      	movs	r3, #0
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3728      	adds	r7, #40	; 0x28
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	08020000 	.word	0x08020000

080017fc <FLASH_If_Write>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t FlashAddress, uint32_t* Data ,uint32_t DataLength)
{
 80017fc:	b5b0      	push	{r4, r5, r7, lr}
 80017fe:	b086      	sub	sp, #24
 8001800:	af00      	add	r7, sp, #0
 8001802:	60f8      	str	r0, [r7, #12]
 8001804:	60b9      	str	r1, [r7, #8]
 8001806:	607a      	str	r2, [r7, #4]
  uint32_t i = 0;
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 800180c:	2300      	movs	r3, #0
 800180e:	617b      	str	r3, [r7, #20]
 8001810:	e024      	b.n	800185c <FLASH_If_Write+0x60>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, FlashAddress, *(uint32_t*)(Data+i)) == HAL_OK)      
 8001812:	697b      	ldr	r3, [r7, #20]
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	68ba      	ldr	r2, [r7, #8]
 8001818:	4413      	add	r3, r2
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	2200      	movs	r2, #0
 800181e:	461c      	mov	r4, r3
 8001820:	4615      	mov	r5, r2
 8001822:	4622      	mov	r2, r4
 8001824:	462b      	mov	r3, r5
 8001826:	68f9      	ldr	r1, [r7, #12]
 8001828:	2002      	movs	r0, #2
 800182a:	f001 fdb5 	bl	8003398 <HAL_FLASH_Program>
 800182e:	4603      	mov	r3, r0
 8001830:	2b00      	cmp	r3, #0
 8001832:	d10e      	bne.n	8001852 <FLASH_If_Write+0x56>
    {
     /* Check the written value */
      if (*(uint32_t*)FlashAddress != *(uint32_t*)(Data+i))
 8001834:	68fb      	ldr	r3, [r7, #12]
 8001836:	681a      	ldr	r2, [r3, #0]
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	68b9      	ldr	r1, [r7, #8]
 800183e:	440b      	add	r3, r1
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	429a      	cmp	r2, r3
 8001844:	d001      	beq.n	800184a <FLASH_If_Write+0x4e>
      {
        /* Flash content doesn't match SRAM content */
        return(FLASHIF_WRITINGCTRL_ERROR);
 8001846:	2302      	movs	r3, #2
 8001848:	e011      	b.n	800186e <FLASH_If_Write+0x72>
      }
      /* Increment FLASH destination address */
      FlashAddress += 4;
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	3304      	adds	r3, #4
 800184e:	60fb      	str	r3, [r7, #12]
 8001850:	e001      	b.n	8001856 <FLASH_If_Write+0x5a>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (FLASHIF_WRITING_ERROR);
 8001852:	2303      	movs	r3, #3
 8001854:	e00b      	b.n	800186e <FLASH_If_Write+0x72>
  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	3301      	adds	r3, #1
 800185a:	617b      	str	r3, [r7, #20]
 800185c:	697a      	ldr	r2, [r7, #20]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	429a      	cmp	r2, r3
 8001862:	d203      	bcs.n	800186c <FLASH_If_Write+0x70>
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	4a04      	ldr	r2, [pc, #16]	; (8001878 <FLASH_If_Write+0x7c>)
 8001868:	4293      	cmp	r3, r2
 800186a:	d9d2      	bls.n	8001812 <FLASH_If_Write+0x16>
    }
  }

  return (FLASHIF_OK);
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3718      	adds	r7, #24
 8001872:	46bd      	mov	sp, r7
 8001874:	bdb0      	pop	{r4, r5, r7, pc}
 8001876:	bf00      	nop
 8001878:	080ffffb 	.word	0x080ffffb

0800187c <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  Address: Flash address
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 800187c:	b480      	push	{r7}
 800187e:	b085      	sub	sp, #20
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001884:	2300      	movs	r3, #0
 8001886:	60fb      	str	r3, [r7, #12]
  
  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a2a      	ldr	r2, [pc, #168]	; (8001934 <GetSector+0xb8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d206      	bcs.n	800189e <GetSector+0x22>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001896:	d302      	bcc.n	800189e <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;  
 8001898:	2300      	movs	r3, #0
 800189a:	60fb      	str	r3, [r7, #12]
 800189c:	e043      	b.n	8001926 <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4a25      	ldr	r2, [pc, #148]	; (8001938 <GetSector+0xbc>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d806      	bhi.n	80018b4 <GetSector+0x38>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a22      	ldr	r2, [pc, #136]	; (8001934 <GetSector+0xb8>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d302      	bcc.n	80018b4 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;  
 80018ae:	2301      	movs	r3, #1
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	e038      	b.n	8001926 <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a21      	ldr	r2, [pc, #132]	; (800193c <GetSector+0xc0>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d206      	bcs.n	80018ca <GetSector+0x4e>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	4a1e      	ldr	r2, [pc, #120]	; (8001938 <GetSector+0xbc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d902      	bls.n	80018ca <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;  
 80018c4:	2302      	movs	r3, #2
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	e02d      	b.n	8001926 <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a1c      	ldr	r2, [pc, #112]	; (8001940 <GetSector+0xc4>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d806      	bhi.n	80018e0 <GetSector+0x64>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a19      	ldr	r2, [pc, #100]	; (800193c <GetSector+0xc0>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d302      	bcc.n	80018e0 <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;  
 80018da:	2303      	movs	r3, #3
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	e022      	b.n	8001926 <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a18      	ldr	r2, [pc, #96]	; (8001944 <GetSector+0xc8>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d806      	bhi.n	80018f6 <GetSector+0x7a>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a15      	ldr	r2, [pc, #84]	; (8001940 <GetSector+0xc4>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d902      	bls.n	80018f6 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;  
 80018f0:	2304      	movs	r3, #4
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	e017      	b.n	8001926 <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a13      	ldr	r2, [pc, #76]	; (8001948 <GetSector+0xcc>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d806      	bhi.n	800190c <GetSector+0x90>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a10      	ldr	r2, [pc, #64]	; (8001944 <GetSector+0xc8>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d902      	bls.n	800190c <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;  
 8001906:	2305      	movs	r3, #5
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	e00c      	b.n	8001926 <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a0f      	ldr	r2, [pc, #60]	; (800194c <GetSector+0xd0>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d806      	bhi.n	8001922 <GetSector+0xa6>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a0c      	ldr	r2, [pc, #48]	; (8001948 <GetSector+0xcc>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d902      	bls.n	8001922 <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;  
 800191c:	2306      	movs	r3, #6
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	e001      	b.n	8001926 <GetSector+0xaa>
  }
  else /*(Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11))*/
  {
    sector = FLASH_SECTOR_7;  
 8001922:	2307      	movs	r3, #7
 8001924:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 8001926:	68fb      	ldr	r3, [r7, #12]
}
 8001928:	4618      	mov	r0, r3
 800192a:	3714      	adds	r7, #20
 800192c:	46bd      	mov	sp, r7
 800192e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001932:	4770      	bx	lr
 8001934:	08008000 	.word	0x08008000
 8001938:	0800ffff 	.word	0x0800ffff
 800193c:	08018000 	.word	0x08018000
 8001940:	0801ffff 	.word	0x0801ffff
 8001944:	0803ffff 	.word	0x0803ffff
 8001948:	0807ffff 	.word	0x0807ffff
 800194c:	080bffff 	.word	0x080bffff

08001950 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001954:	f000 ff8a 	bl	800286c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001958:	f000 f814 	bl	8001984 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800195c:	f000 f922 	bl	8001ba4 <MX_GPIO_Init>
  MX_ETH_Init();
 8001960:	f000 f87a 	bl	8001a58 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001964:	f000 f8c6 	bl	8001af4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001968:	f000 f8ee 	bl	8001b48 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  CliInit(&huart3);
 800196c:	4804      	ldr	r0, [pc, #16]	; (8001980 <main+0x30>)
 800196e:	f7fe ffb3 	bl	80008d8 <CliInit>
  FLASH_If_Init();
 8001972:	f7ff ff11 	bl	8001798 <FLASH_If_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  CliDo(&huart3);
 8001976:	4802      	ldr	r0, [pc, #8]	; (8001980 <main+0x30>)
 8001978:	f7fe ffde 	bl	8000938 <CliDo>
 800197c:	e7fb      	b.n	8001976 <main+0x26>
 800197e:	bf00      	nop
 8001980:	20001a18 	.word	0x20001a18

08001984 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b094      	sub	sp, #80	; 0x50
 8001988:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800198a:	f107 0320 	add.w	r3, r7, #32
 800198e:	2230      	movs	r2, #48	; 0x30
 8001990:	2100      	movs	r1, #0
 8001992:	4618      	mov	r0, r3
 8001994:	f004 fbd8 	bl	8006148 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	2200      	movs	r2, #0
 800199e:	601a      	str	r2, [r3, #0]
 80019a0:	605a      	str	r2, [r3, #4]
 80019a2:	609a      	str	r2, [r3, #8]
 80019a4:	60da      	str	r2, [r3, #12]
 80019a6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019a8:	2300      	movs	r3, #0
 80019aa:	60bb      	str	r3, [r7, #8]
 80019ac:	4b28      	ldr	r3, [pc, #160]	; (8001a50 <SystemClock_Config+0xcc>)
 80019ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019b0:	4a27      	ldr	r2, [pc, #156]	; (8001a50 <SystemClock_Config+0xcc>)
 80019b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019b6:	6413      	str	r3, [r2, #64]	; 0x40
 80019b8:	4b25      	ldr	r3, [pc, #148]	; (8001a50 <SystemClock_Config+0xcc>)
 80019ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019c0:	60bb      	str	r3, [r7, #8]
 80019c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019c4:	2300      	movs	r3, #0
 80019c6:	607b      	str	r3, [r7, #4]
 80019c8:	4b22      	ldr	r3, [pc, #136]	; (8001a54 <SystemClock_Config+0xd0>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a21      	ldr	r2, [pc, #132]	; (8001a54 <SystemClock_Config+0xd0>)
 80019ce:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019d2:	6013      	str	r3, [r2, #0]
 80019d4:	4b1f      	ldr	r3, [pc, #124]	; (8001a54 <SystemClock_Config+0xd0>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80019dc:	607b      	str	r3, [r7, #4]
 80019de:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80019e0:	2301      	movs	r3, #1
 80019e2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80019e4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80019e8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80019ea:	2302      	movs	r3, #2
 80019ec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80019ee:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80019f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80019f4:	2304      	movs	r3, #4
 80019f6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80019f8:	23a8      	movs	r3, #168	; 0xa8
 80019fa:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80019fc:	2302      	movs	r3, #2
 80019fe:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a00:	2307      	movs	r3, #7
 8001a02:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a04:	f107 0320 	add.w	r3, r7, #32
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f002 fa9d 	bl	8003f48 <HAL_RCC_OscConfig>
 8001a0e:	4603      	mov	r3, r0
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d001      	beq.n	8001a18 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a14:	f000 f98c 	bl	8001d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a18:	230f      	movs	r3, #15
 8001a1a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a20:	2300      	movs	r3, #0
 8001a22:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a24:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a28:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a2e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a30:	f107 030c 	add.w	r3, r7, #12
 8001a34:	2105      	movs	r1, #5
 8001a36:	4618      	mov	r0, r3
 8001a38:	f002 fcfe 	bl	8004438 <HAL_RCC_ClockConfig>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d001      	beq.n	8001a46 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a42:	f000 f975 	bl	8001d30 <Error_Handler>
  }
}
 8001a46:	bf00      	nop
 8001a48:	3750      	adds	r7, #80	; 0x50
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40023800 	.word	0x40023800
 8001a54:	40007000 	.word	0x40007000

08001a58 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <MX_ETH_Init+0x84>)
 8001a5e:	4a20      	ldr	r2, [pc, #128]	; (8001ae0 <MX_ETH_Init+0x88>)
 8001a60:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001a62:	4b20      	ldr	r3, [pc, #128]	; (8001ae4 <MX_ETH_Init+0x8c>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001a68:	4b1e      	ldr	r3, [pc, #120]	; (8001ae4 <MX_ETH_Init+0x8c>)
 8001a6a:	2280      	movs	r2, #128	; 0x80
 8001a6c:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001a6e:	4b1d      	ldr	r3, [pc, #116]	; (8001ae4 <MX_ETH_Init+0x8c>)
 8001a70:	22e1      	movs	r2, #225	; 0xe1
 8001a72:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001a74:	4b1b      	ldr	r3, [pc, #108]	; (8001ae4 <MX_ETH_Init+0x8c>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001a7a:	4b1a      	ldr	r3, [pc, #104]	; (8001ae4 <MX_ETH_Init+0x8c>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001a80:	4b18      	ldr	r3, [pc, #96]	; (8001ae4 <MX_ETH_Init+0x8c>)
 8001a82:	2200      	movs	r2, #0
 8001a84:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001a86:	4b15      	ldr	r3, [pc, #84]	; (8001adc <MX_ETH_Init+0x84>)
 8001a88:	4a16      	ldr	r2, [pc, #88]	; (8001ae4 <MX_ETH_Init+0x8c>)
 8001a8a:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001a8c:	4b13      	ldr	r3, [pc, #76]	; (8001adc <MX_ETH_Init+0x84>)
 8001a8e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001a92:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <MX_ETH_Init+0x84>)
 8001a96:	4a14      	ldr	r2, [pc, #80]	; (8001ae8 <MX_ETH_Init+0x90>)
 8001a98:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001a9a:	4b10      	ldr	r3, [pc, #64]	; (8001adc <MX_ETH_Init+0x84>)
 8001a9c:	4a13      	ldr	r2, [pc, #76]	; (8001aec <MX_ETH_Init+0x94>)
 8001a9e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001aa0:	4b0e      	ldr	r3, [pc, #56]	; (8001adc <MX_ETH_Init+0x84>)
 8001aa2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001aa6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001aa8:	480c      	ldr	r0, [pc, #48]	; (8001adc <MX_ETH_Init+0x84>)
 8001aaa:	f001 f94d 	bl	8002d48 <HAL_ETH_Init>
 8001aae:	4603      	mov	r3, r0
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d001      	beq.n	8001ab8 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001ab4:	f000 f93c 	bl	8001d30 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001ab8:	2238      	movs	r2, #56	; 0x38
 8001aba:	2100      	movs	r1, #0
 8001abc:	480c      	ldr	r0, [pc, #48]	; (8001af0 <MX_ETH_Init+0x98>)
 8001abe:	f004 fb43 	bl	8006148 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001ac2:	4b0b      	ldr	r3, [pc, #44]	; (8001af0 <MX_ETH_Init+0x98>)
 8001ac4:	2221      	movs	r2, #33	; 0x21
 8001ac6:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001ac8:	4b09      	ldr	r3, [pc, #36]	; (8001af0 <MX_ETH_Init+0x98>)
 8001aca:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001ace:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001ad0:	4b07      	ldr	r3, [pc, #28]	; (8001af0 <MX_ETH_Init+0x98>)
 8001ad2:	2200      	movs	r2, #0
 8001ad4:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001ad6:	bf00      	nop
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	20001968 	.word	0x20001968
 8001ae0:	40028000 	.word	0x40028000
 8001ae4:	20001f68 	.word	0x20001f68
 8001ae8:	200018c8 	.word	0x200018c8
 8001aec:	20001828 	.word	0x20001828
 8001af0:	200017f0 	.word	0x200017f0

08001af4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001af8:	4b11      	ldr	r3, [pc, #68]	; (8001b40 <MX_USART3_UART_Init+0x4c>)
 8001afa:	4a12      	ldr	r2, [pc, #72]	; (8001b44 <MX_USART3_UART_Init+0x50>)
 8001afc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001afe:	4b10      	ldr	r3, [pc, #64]	; (8001b40 <MX_USART3_UART_Init+0x4c>)
 8001b00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b04:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b06:	4b0e      	ldr	r3, [pc, #56]	; (8001b40 <MX_USART3_UART_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b0c:	4b0c      	ldr	r3, [pc, #48]	; (8001b40 <MX_USART3_UART_Init+0x4c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b12:	4b0b      	ldr	r3, [pc, #44]	; (8001b40 <MX_USART3_UART_Init+0x4c>)
 8001b14:	2200      	movs	r2, #0
 8001b16:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b18:	4b09      	ldr	r3, [pc, #36]	; (8001b40 <MX_USART3_UART_Init+0x4c>)
 8001b1a:	220c      	movs	r2, #12
 8001b1c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b1e:	4b08      	ldr	r3, [pc, #32]	; (8001b40 <MX_USART3_UART_Init+0x4c>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b24:	4b06      	ldr	r3, [pc, #24]	; (8001b40 <MX_USART3_UART_Init+0x4c>)
 8001b26:	2200      	movs	r2, #0
 8001b28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b2a:	4805      	ldr	r0, [pc, #20]	; (8001b40 <MX_USART3_UART_Init+0x4c>)
 8001b2c:	f002 fea4 	bl	8004878 <HAL_UART_Init>
 8001b30:	4603      	mov	r3, r0
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d001      	beq.n	8001b3a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b36:	f000 f8fb 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	20001a18 	.word	0x20001a18
 8001b44:	40004800 	.word	0x40004800

08001b48 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001b4c:	4b14      	ldr	r3, [pc, #80]	; (8001ba0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b4e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001b52:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001b54:	4b12      	ldr	r3, [pc, #72]	; (8001ba0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b56:	2204      	movs	r2, #4
 8001b58:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001b5a:	4b11      	ldr	r3, [pc, #68]	; (8001ba0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b5c:	2202      	movs	r2, #2
 8001b5e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001b60:	4b0f      	ldr	r3, [pc, #60]	; (8001ba0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b66:	4b0e      	ldr	r3, [pc, #56]	; (8001ba0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b68:	2202      	movs	r2, #2
 8001b6a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001b6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ba0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b6e:	2201      	movs	r2, #1
 8001b70:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001b72:	4b0b      	ldr	r3, [pc, #44]	; (8001ba0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001b78:	4b09      	ldr	r3, [pc, #36]	; (8001ba0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001b7e:	4b08      	ldr	r3, [pc, #32]	; (8001ba0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b80:	2201      	movs	r2, #1
 8001b82:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001b84:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001b8a:	4805      	ldr	r0, [pc, #20]	; (8001ba0 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b8c:	f002 f8bf 	bl	8003d0e <HAL_PCD_Init>
 8001b90:	4603      	mov	r3, r0
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d001      	beq.n	8001b9a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001b96:	f000 f8cb 	bl	8001d30 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001b9a:	bf00      	nop
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20001a5c 	.word	0x20001a5c

08001ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08c      	sub	sp, #48	; 0x30
 8001ba8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001baa:	f107 031c 	add.w	r3, r7, #28
 8001bae:	2200      	movs	r2, #0
 8001bb0:	601a      	str	r2, [r3, #0]
 8001bb2:	605a      	str	r2, [r3, #4]
 8001bb4:	609a      	str	r2, [r3, #8]
 8001bb6:	60da      	str	r2, [r3, #12]
 8001bb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
 8001bbe:	4b4c      	ldr	r3, [pc, #304]	; (8001cf0 <MX_GPIO_Init+0x14c>)
 8001bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bc2:	4a4b      	ldr	r2, [pc, #300]	; (8001cf0 <MX_GPIO_Init+0x14c>)
 8001bc4:	f043 0304 	orr.w	r3, r3, #4
 8001bc8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bca:	4b49      	ldr	r3, [pc, #292]	; (8001cf0 <MX_GPIO_Init+0x14c>)
 8001bcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bce:	f003 0304 	and.w	r3, r3, #4
 8001bd2:	61bb      	str	r3, [r7, #24]
 8001bd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	617b      	str	r3, [r7, #20]
 8001bda:	4b45      	ldr	r3, [pc, #276]	; (8001cf0 <MX_GPIO_Init+0x14c>)
 8001bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bde:	4a44      	ldr	r2, [pc, #272]	; (8001cf0 <MX_GPIO_Init+0x14c>)
 8001be0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001be4:	6313      	str	r3, [r2, #48]	; 0x30
 8001be6:	4b42      	ldr	r3, [pc, #264]	; (8001cf0 <MX_GPIO_Init+0x14c>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bee:	617b      	str	r3, [r7, #20]
 8001bf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	4b3e      	ldr	r3, [pc, #248]	; (8001cf0 <MX_GPIO_Init+0x14c>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	4a3d      	ldr	r2, [pc, #244]	; (8001cf0 <MX_GPIO_Init+0x14c>)
 8001bfc:	f043 0301 	orr.w	r3, r3, #1
 8001c00:	6313      	str	r3, [r2, #48]	; 0x30
 8001c02:	4b3b      	ldr	r3, [pc, #236]	; (8001cf0 <MX_GPIO_Init+0x14c>)
 8001c04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c06:	f003 0301 	and.w	r3, r3, #1
 8001c0a:	613b      	str	r3, [r7, #16]
 8001c0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b37      	ldr	r3, [pc, #220]	; (8001cf0 <MX_GPIO_Init+0x14c>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	4a36      	ldr	r2, [pc, #216]	; (8001cf0 <MX_GPIO_Init+0x14c>)
 8001c18:	f043 0302 	orr.w	r3, r3, #2
 8001c1c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c1e:	4b34      	ldr	r3, [pc, #208]	; (8001cf0 <MX_GPIO_Init+0x14c>)
 8001c20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c22:	f003 0302 	and.w	r3, r3, #2
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	60bb      	str	r3, [r7, #8]
 8001c2e:	4b30      	ldr	r3, [pc, #192]	; (8001cf0 <MX_GPIO_Init+0x14c>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	4a2f      	ldr	r2, [pc, #188]	; (8001cf0 <MX_GPIO_Init+0x14c>)
 8001c34:	f043 0308 	orr.w	r3, r3, #8
 8001c38:	6313      	str	r3, [r2, #48]	; 0x30
 8001c3a:	4b2d      	ldr	r3, [pc, #180]	; (8001cf0 <MX_GPIO_Init+0x14c>)
 8001c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c3e:	f003 0308 	and.w	r3, r3, #8
 8001c42:	60bb      	str	r3, [r7, #8]
 8001c44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c46:	2300      	movs	r3, #0
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	4b29      	ldr	r3, [pc, #164]	; (8001cf0 <MX_GPIO_Init+0x14c>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	4a28      	ldr	r2, [pc, #160]	; (8001cf0 <MX_GPIO_Init+0x14c>)
 8001c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c54:	6313      	str	r3, [r2, #48]	; 0x30
 8001c56:	4b26      	ldr	r3, [pc, #152]	; (8001cf0 <MX_GPIO_Init+0x14c>)
 8001c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c5e:	607b      	str	r3, [r7, #4]
 8001c60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c62:	2200      	movs	r2, #0
 8001c64:	f244 0181 	movw	r1, #16513	; 0x4081
 8001c68:	4822      	ldr	r0, [pc, #136]	; (8001cf4 <MX_GPIO_Init+0x150>)
 8001c6a:	f002 f837 	bl	8003cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001c6e:	2200      	movs	r2, #0
 8001c70:	2140      	movs	r1, #64	; 0x40
 8001c72:	4821      	ldr	r0, [pc, #132]	; (8001cf8 <MX_GPIO_Init+0x154>)
 8001c74:	f002 f832 	bl	8003cdc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001c78:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c7c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c7e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c84:	2300      	movs	r3, #0
 8001c86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001c88:	f107 031c 	add.w	r3, r7, #28
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	481b      	ldr	r0, [pc, #108]	; (8001cfc <MX_GPIO_Init+0x158>)
 8001c90:	f001 fe78 	bl	8003984 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001c94:	f244 0381 	movw	r3, #16513	; 0x4081
 8001c98:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9a:	2301      	movs	r3, #1
 8001c9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001ca6:	f107 031c 	add.w	r3, r7, #28
 8001caa:	4619      	mov	r1, r3
 8001cac:	4811      	ldr	r0, [pc, #68]	; (8001cf4 <MX_GPIO_Init+0x150>)
 8001cae:	f001 fe69 	bl	8003984 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001cb2:	2340      	movs	r3, #64	; 0x40
 8001cb4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001cc2:	f107 031c 	add.w	r3, r7, #28
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	480b      	ldr	r0, [pc, #44]	; (8001cf8 <MX_GPIO_Init+0x154>)
 8001cca:	f001 fe5b 	bl	8003984 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001cce:	2380      	movs	r3, #128	; 0x80
 8001cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001cda:	f107 031c 	add.w	r3, r7, #28
 8001cde:	4619      	mov	r1, r3
 8001ce0:	4805      	ldr	r0, [pc, #20]	; (8001cf8 <MX_GPIO_Init+0x154>)
 8001ce2:	f001 fe4f 	bl	8003984 <HAL_GPIO_Init>

}
 8001ce6:	bf00      	nop
 8001ce8:	3730      	adds	r7, #48	; 0x30
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd80      	pop	{r7, pc}
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40020400 	.word	0x40020400
 8001cf8:	40021800 	.word	0x40021800
 8001cfc:	40020800 	.word	0x40020800

08001d00 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8001d00:	b580      	push	{r7, lr}
 8001d02:	b082      	sub	sp, #8
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 10) != HAL_OK)
 8001d08:	1d39      	adds	r1, r7, #4
 8001d0a:	230a      	movs	r3, #10
 8001d0c:	2201      	movs	r2, #1
 8001d0e:	4807      	ldr	r0, [pc, #28]	; (8001d2c <__io_putchar+0x2c>)
 8001d10:	f002 fdff 	bl	8004912 <HAL_UART_Transmit>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d002      	beq.n	8001d20 <__io_putchar+0x20>
		return -1;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	e000      	b.n	8001d22 <__io_putchar+0x22>
	return ch;
 8001d20:	687b      	ldr	r3, [r7, #4]
}
 8001d22:	4618      	mov	r0, r3
 8001d24:	3708      	adds	r7, #8
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	20001a18 	.word	0x20001a18

08001d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d34:	b672      	cpsid	i
}
 8001d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <Error_Handler+0x8>
	...

08001d3c <SerialDownload>:
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void SerialDownload(void)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b084      	sub	sp, #16
 8001d40:	af00      	add	r7, sp, #0
  uint8_t number[11] = {0};
 8001d42:	2300      	movs	r3, #0
 8001d44:	607b      	str	r3, [r7, #4]
 8001d46:	f107 0308 	add.w	r3, r7, #8
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	601a      	str	r2, [r3, #0]
 8001d4e:	f8c3 2003 	str.w	r2, [r3, #3]
  uint32_t size = 0;
 8001d52:	2300      	movs	r3, #0
 8001d54:	603b      	str	r3, [r7, #0]
  COM_StatusTypeDef result;

  Serial_PutString((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\n\r");
 8001d56:	4821      	ldr	r0, [pc, #132]	; (8001ddc <SerialDownload+0xa0>)
 8001d58:	f7ff fce6 	bl	8001728 <Serial_PutString>
  result = Ymodem_Receive( &size );
 8001d5c:	463b      	mov	r3, r7
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f000 fc30 	bl	80025c4 <Ymodem_Receive>
 8001d64:	4603      	mov	r3, r0
 8001d66:	73fb      	strb	r3, [r7, #15]
  if (result == COM_OK)
 8001d68:	7bfb      	ldrb	r3, [r7, #15]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d119      	bne.n	8001da2 <SerialDownload+0x66>
  {
    Serial_PutString((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 8001d6e:	481c      	ldr	r0, [pc, #112]	; (8001de0 <SerialDownload+0xa4>)
 8001d70:	f7ff fcda 	bl	8001728 <Serial_PutString>
    Serial_PutString(aFileName);
 8001d74:	481b      	ldr	r0, [pc, #108]	; (8001de4 <SerialDownload+0xa8>)
 8001d76:	f7ff fcd7 	bl	8001728 <Serial_PutString>
    Int2Str(number, size);
 8001d7a:	683a      	ldr	r2, [r7, #0]
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	4611      	mov	r1, r2
 8001d80:	4618      	mov	r0, r3
 8001d82:	f7ff fb87 	bl	8001494 <Int2Str>
    Serial_PutString((uint8_t *)"\n\r Size: ");
 8001d86:	4818      	ldr	r0, [pc, #96]	; (8001de8 <SerialDownload+0xac>)
 8001d88:	f7ff fcce 	bl	8001728 <Serial_PutString>
    Serial_PutString(number);
 8001d8c:	1d3b      	adds	r3, r7, #4
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fcca 	bl	8001728 <Serial_PutString>
    Serial_PutString((uint8_t *)" Bytes\r\n");
 8001d94:	4815      	ldr	r0, [pc, #84]	; (8001dec <SerialDownload+0xb0>)
 8001d96:	f7ff fcc7 	bl	8001728 <Serial_PutString>
    Serial_PutString((uint8_t *)"-------------------\n");
 8001d9a:	4815      	ldr	r0, [pc, #84]	; (8001df0 <SerialDownload+0xb4>)
 8001d9c:	f7ff fcc4 	bl	8001728 <Serial_PutString>
  }
  else
  {
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
  }
}
 8001da0:	e017      	b.n	8001dd2 <SerialDownload+0x96>
  else if (result == COM_LIMIT)
 8001da2:	7bfb      	ldrb	r3, [r7, #15]
 8001da4:	2b05      	cmp	r3, #5
 8001da6:	d103      	bne.n	8001db0 <SerialDownload+0x74>
    Serial_PutString((uint8_t *)"\n\n\rThe image size is higher than the allowed space memory!\n\r");
 8001da8:	4812      	ldr	r0, [pc, #72]	; (8001df4 <SerialDownload+0xb8>)
 8001daa:	f7ff fcbd 	bl	8001728 <Serial_PutString>
}
 8001dae:	e010      	b.n	8001dd2 <SerialDownload+0x96>
  else if (result == COM_DATA)
 8001db0:	7bfb      	ldrb	r3, [r7, #15]
 8001db2:	2b04      	cmp	r3, #4
 8001db4:	d103      	bne.n	8001dbe <SerialDownload+0x82>
    Serial_PutString((uint8_t *)"\n\n\rVerification failed!\n\r");
 8001db6:	4810      	ldr	r0, [pc, #64]	; (8001df8 <SerialDownload+0xbc>)
 8001db8:	f7ff fcb6 	bl	8001728 <Serial_PutString>
}
 8001dbc:	e009      	b.n	8001dd2 <SerialDownload+0x96>
  else if (result == COM_ABORT)
 8001dbe:	7bfb      	ldrb	r3, [r7, #15]
 8001dc0:	2b02      	cmp	r3, #2
 8001dc2:	d103      	bne.n	8001dcc <SerialDownload+0x90>
    Serial_PutString((uint8_t *)"\r\n\nAborted by user.\n\r");
 8001dc4:	480d      	ldr	r0, [pc, #52]	; (8001dfc <SerialDownload+0xc0>)
 8001dc6:	f7ff fcaf 	bl	8001728 <Serial_PutString>
}
 8001dca:	e002      	b.n	8001dd2 <SerialDownload+0x96>
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
 8001dcc:	480c      	ldr	r0, [pc, #48]	; (8001e00 <SerialDownload+0xc4>)
 8001dce:	f7ff fcab 	bl	8001728 <Serial_PutString>
}
 8001dd2:	bf00      	nop
 8001dd4:	3710      	adds	r7, #16
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	08007a4c 	.word	0x08007a4c
 8001de0:	08007a88 	.word	0x08007a88
 8001de4:	20001f78 	.word	0x20001f78
 8001de8:	08007adc 	.word	0x08007adc
 8001dec:	08007ae8 	.word	0x08007ae8
 8001df0:	08007af4 	.word	0x08007af4
 8001df4:	08007b0c 	.word	0x08007b0c
 8001df8:	08007b4c 	.word	0x08007b4c
 8001dfc:	08007b68 	.word	0x08007b68
 8001e00:	08007b80 	.word	0x08007b80

08001e04 <RunApplication>:
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void RunApplication(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	b082      	sub	sp, #8
 8001e08:	af00      	add	r7, sp, #0
 // Serial_PutString((uint8_t *)"Start program execution......\r\n\n");
  //NVIC_SystemReset();
  //NVIC_DisableIRQ();
  //DNVIC_SetVector()
  SCB->VTOR = APPLICATION_ADDRESS;
 8001e0a:	4b0d      	ldr	r3, [pc, #52]	; (8001e40 <RunApplication+0x3c>)
 8001e0c:	4a0d      	ldr	r2, [pc, #52]	; (8001e44 <RunApplication+0x40>)
 8001e0e:	609a      	str	r2, [r3, #8]
  /* execute the new program */
  JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8001e10:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <RunApplication+0x44>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	4a0d      	ldr	r2, [pc, #52]	; (8001e4c <RunApplication+0x48>)
 8001e16:	6013      	str	r3, [r2, #0]
  /* Jump to user application */
  JumpToApplication = (pFunction) JumpAddress;
 8001e18:	4b0c      	ldr	r3, [pc, #48]	; (8001e4c <RunApplication+0x48>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	4b0c      	ldr	r3, [pc, #48]	; (8001e50 <RunApplication+0x4c>)
 8001e20:	601a      	str	r2, [r3, #0]
  /* Initialize user application's Stack Pointer */
  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8001e22:	4b08      	ldr	r3, [pc, #32]	; (8001e44 <RunApplication+0x40>)
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	f383 8808 	msr	MSP, r3
}
 8001e2e:	bf00      	nop
  //SCB->VTOR = APPLICATION_ADDRESS;
  JumpToApplication();
 8001e30:	4b07      	ldr	r3, [pc, #28]	; (8001e50 <RunApplication+0x4c>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	4798      	blx	r3
}
 8001e36:	bf00      	nop
 8001e38:	3708      	adds	r7, #8
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	e000ed00 	.word	0xe000ed00
 8001e44:	08020000 	.word	0x08020000
 8001e48:	08020004 	.word	0x08020004
 8001e4c:	20001f74 	.word	0x20001f74
 8001e50:	20001f70 	.word	0x20001f70

08001e54 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e54:	b480      	push	{r7}
 8001e56:	b083      	sub	sp, #12
 8001e58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e5a:	2300      	movs	r3, #0
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	4b10      	ldr	r3, [pc, #64]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	4a0f      	ldr	r2, [pc, #60]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e68:	6453      	str	r3, [r2, #68]	; 0x44
 8001e6a:	4b0d      	ldr	r3, [pc, #52]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e72:	607b      	str	r3, [r7, #4]
 8001e74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e76:	2300      	movs	r3, #0
 8001e78:	603b      	str	r3, [r7, #0]
 8001e7a:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e7e:	4a08      	ldr	r2, [pc, #32]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e84:	6413      	str	r3, [r2, #64]	; 0x40
 8001e86:	4b06      	ldr	r3, [pc, #24]	; (8001ea0 <HAL_MspInit+0x4c>)
 8001e88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e8e:	603b      	str	r3, [r7, #0]
 8001e90:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40023800 	.word	0x40023800

08001ea4 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b08e      	sub	sp, #56	; 0x38
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	601a      	str	r2, [r3, #0]
 8001eb4:	605a      	str	r2, [r3, #4]
 8001eb6:	609a      	str	r2, [r3, #8]
 8001eb8:	60da      	str	r2, [r3, #12]
 8001eba:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a55      	ldr	r2, [pc, #340]	; (8002018 <HAL_ETH_MspInit+0x174>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	f040 80a4 	bne.w	8002010 <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
 8001ecc:	4b53      	ldr	r3, [pc, #332]	; (800201c <HAL_ETH_MspInit+0x178>)
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	4a52      	ldr	r2, [pc, #328]	; (800201c <HAL_ETH_MspInit+0x178>)
 8001ed2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001ed6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ed8:	4b50      	ldr	r3, [pc, #320]	; (800201c <HAL_ETH_MspInit+0x178>)
 8001eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001edc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ee0:	623b      	str	r3, [r7, #32]
 8001ee2:	6a3b      	ldr	r3, [r7, #32]
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61fb      	str	r3, [r7, #28]
 8001ee8:	4b4c      	ldr	r3, [pc, #304]	; (800201c <HAL_ETH_MspInit+0x178>)
 8001eea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eec:	4a4b      	ldr	r2, [pc, #300]	; (800201c <HAL_ETH_MspInit+0x178>)
 8001eee:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001ef2:	6313      	str	r3, [r2, #48]	; 0x30
 8001ef4:	4b49      	ldr	r3, [pc, #292]	; (800201c <HAL_ETH_MspInit+0x178>)
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001efc:	61fb      	str	r3, [r7, #28]
 8001efe:	69fb      	ldr	r3, [r7, #28]
 8001f00:	2300      	movs	r3, #0
 8001f02:	61bb      	str	r3, [r7, #24]
 8001f04:	4b45      	ldr	r3, [pc, #276]	; (800201c <HAL_ETH_MspInit+0x178>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	4a44      	ldr	r2, [pc, #272]	; (800201c <HAL_ETH_MspInit+0x178>)
 8001f0a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f10:	4b42      	ldr	r3, [pc, #264]	; (800201c <HAL_ETH_MspInit+0x178>)
 8001f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f18:	61bb      	str	r3, [r7, #24]
 8001f1a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f1c:	2300      	movs	r3, #0
 8001f1e:	617b      	str	r3, [r7, #20]
 8001f20:	4b3e      	ldr	r3, [pc, #248]	; (800201c <HAL_ETH_MspInit+0x178>)
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	4a3d      	ldr	r2, [pc, #244]	; (800201c <HAL_ETH_MspInit+0x178>)
 8001f26:	f043 0304 	orr.w	r3, r3, #4
 8001f2a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f2c:	4b3b      	ldr	r3, [pc, #236]	; (800201c <HAL_ETH_MspInit+0x178>)
 8001f2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f30:	f003 0304 	and.w	r3, r3, #4
 8001f34:	617b      	str	r3, [r7, #20]
 8001f36:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f38:	2300      	movs	r3, #0
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	4b37      	ldr	r3, [pc, #220]	; (800201c <HAL_ETH_MspInit+0x178>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	4a36      	ldr	r2, [pc, #216]	; (800201c <HAL_ETH_MspInit+0x178>)
 8001f42:	f043 0301 	orr.w	r3, r3, #1
 8001f46:	6313      	str	r3, [r2, #48]	; 0x30
 8001f48:	4b34      	ldr	r3, [pc, #208]	; (800201c <HAL_ETH_MspInit+0x178>)
 8001f4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f4c:	f003 0301 	and.w	r3, r3, #1
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f54:	2300      	movs	r3, #0
 8001f56:	60fb      	str	r3, [r7, #12]
 8001f58:	4b30      	ldr	r3, [pc, #192]	; (800201c <HAL_ETH_MspInit+0x178>)
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5c:	4a2f      	ldr	r2, [pc, #188]	; (800201c <HAL_ETH_MspInit+0x178>)
 8001f5e:	f043 0302 	orr.w	r3, r3, #2
 8001f62:	6313      	str	r3, [r2, #48]	; 0x30
 8001f64:	4b2d      	ldr	r3, [pc, #180]	; (800201c <HAL_ETH_MspInit+0x178>)
 8001f66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f68:	f003 0302 	and.w	r3, r3, #2
 8001f6c:	60fb      	str	r3, [r7, #12]
 8001f6e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f70:	2300      	movs	r3, #0
 8001f72:	60bb      	str	r3, [r7, #8]
 8001f74:	4b29      	ldr	r3, [pc, #164]	; (800201c <HAL_ETH_MspInit+0x178>)
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	4a28      	ldr	r2, [pc, #160]	; (800201c <HAL_ETH_MspInit+0x178>)
 8001f7a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f7e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f80:	4b26      	ldr	r3, [pc, #152]	; (800201c <HAL_ETH_MspInit+0x178>)
 8001f82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001f8c:	2332      	movs	r3, #50	; 0x32
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f90:	2302      	movs	r3, #2
 8001f92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f94:	2300      	movs	r3, #0
 8001f96:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f98:	2303      	movs	r3, #3
 8001f9a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001f9c:	230b      	movs	r3, #11
 8001f9e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	481e      	ldr	r0, [pc, #120]	; (8002020 <HAL_ETH_MspInit+0x17c>)
 8001fa8:	f001 fcec 	bl	8003984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001fac:	2386      	movs	r3, #134	; 0x86
 8001fae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fb0:	2302      	movs	r3, #2
 8001fb2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fb8:	2303      	movs	r3, #3
 8001fba:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fbc:	230b      	movs	r3, #11
 8001fbe:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	4817      	ldr	r0, [pc, #92]	; (8002024 <HAL_ETH_MspInit+0x180>)
 8001fc8:	f001 fcdc 	bl	8003984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001fcc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fd2:	2302      	movs	r3, #2
 8001fd4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fda:	2303      	movs	r3, #3
 8001fdc:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fde:	230b      	movs	r3, #11
 8001fe0:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001fe2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fe6:	4619      	mov	r1, r3
 8001fe8:	480f      	ldr	r0, [pc, #60]	; (8002028 <HAL_ETH_MspInit+0x184>)
 8001fea:	f001 fccb 	bl	8003984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001fee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001ff2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ff4:	2302      	movs	r3, #2
 8001ff6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ffc:	2303      	movs	r3, #3
 8001ffe:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8002000:	230b      	movs	r3, #11
 8002002:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002004:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002008:	4619      	mov	r1, r3
 800200a:	4808      	ldr	r0, [pc, #32]	; (800202c <HAL_ETH_MspInit+0x188>)
 800200c:	f001 fcba 	bl	8003984 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8002010:	bf00      	nop
 8002012:	3738      	adds	r7, #56	; 0x38
 8002014:	46bd      	mov	sp, r7
 8002016:	bd80      	pop	{r7, pc}
 8002018:	40028000 	.word	0x40028000
 800201c:	40023800 	.word	0x40023800
 8002020:	40020800 	.word	0x40020800
 8002024:	40020000 	.word	0x40020000
 8002028:	40020400 	.word	0x40020400
 800202c:	40021800 	.word	0x40021800

08002030 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08a      	sub	sp, #40	; 0x28
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	2200      	movs	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
 8002040:	605a      	str	r2, [r3, #4]
 8002042:	609a      	str	r2, [r3, #8]
 8002044:	60da      	str	r2, [r3, #12]
 8002046:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	4a1d      	ldr	r2, [pc, #116]	; (80020c4 <HAL_UART_MspInit+0x94>)
 800204e:	4293      	cmp	r3, r2
 8002050:	d134      	bne.n	80020bc <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002052:	2300      	movs	r3, #0
 8002054:	613b      	str	r3, [r7, #16]
 8002056:	4b1c      	ldr	r3, [pc, #112]	; (80020c8 <HAL_UART_MspInit+0x98>)
 8002058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205a:	4a1b      	ldr	r2, [pc, #108]	; (80020c8 <HAL_UART_MspInit+0x98>)
 800205c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002060:	6413      	str	r3, [r2, #64]	; 0x40
 8002062:	4b19      	ldr	r3, [pc, #100]	; (80020c8 <HAL_UART_MspInit+0x98>)
 8002064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002066:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800206a:	613b      	str	r3, [r7, #16]
 800206c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	60fb      	str	r3, [r7, #12]
 8002072:	4b15      	ldr	r3, [pc, #84]	; (80020c8 <HAL_UART_MspInit+0x98>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a14      	ldr	r2, [pc, #80]	; (80020c8 <HAL_UART_MspInit+0x98>)
 8002078:	f043 0308 	orr.w	r3, r3, #8
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b12      	ldr	r3, [pc, #72]	; (80020c8 <HAL_UART_MspInit+0x98>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f003 0308 	and.w	r3, r3, #8
 8002086:	60fb      	str	r3, [r7, #12]
 8002088:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800208a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800208e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002094:	2300      	movs	r3, #0
 8002096:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002098:	2303      	movs	r3, #3
 800209a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800209c:	2307      	movs	r3, #7
 800209e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020a0:	f107 0314 	add.w	r3, r7, #20
 80020a4:	4619      	mov	r1, r3
 80020a6:	4809      	ldr	r0, [pc, #36]	; (80020cc <HAL_UART_MspInit+0x9c>)
 80020a8:	f001 fc6c 	bl	8003984 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020ac:	2200      	movs	r2, #0
 80020ae:	2100      	movs	r1, #0
 80020b0:	2027      	movs	r0, #39	; 0x27
 80020b2:	f000 fd80 	bl	8002bb6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020b6:	2027      	movs	r0, #39	; 0x27
 80020b8:	f000 fd99 	bl	8002bee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020bc:	bf00      	nop
 80020be:	3728      	adds	r7, #40	; 0x28
 80020c0:	46bd      	mov	sp, r7
 80020c2:	bd80      	pop	{r7, pc}
 80020c4:	40004800 	.word	0x40004800
 80020c8:	40023800 	.word	0x40023800
 80020cc:	40020c00 	.word	0x40020c00

080020d0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b08a      	sub	sp, #40	; 0x28
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d8:	f107 0314 	add.w	r3, r7, #20
 80020dc:	2200      	movs	r2, #0
 80020de:	601a      	str	r2, [r3, #0]
 80020e0:	605a      	str	r2, [r3, #4]
 80020e2:	609a      	str	r2, [r3, #8]
 80020e4:	60da      	str	r2, [r3, #12]
 80020e6:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80020f0:	d13f      	bne.n	8002172 <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
 80020f6:	4b21      	ldr	r3, [pc, #132]	; (800217c <HAL_PCD_MspInit+0xac>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	4a20      	ldr	r2, [pc, #128]	; (800217c <HAL_PCD_MspInit+0xac>)
 80020fc:	f043 0301 	orr.w	r3, r3, #1
 8002100:	6313      	str	r3, [r2, #48]	; 0x30
 8002102:	4b1e      	ldr	r3, [pc, #120]	; (800217c <HAL_PCD_MspInit+0xac>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002106:	f003 0301 	and.w	r3, r3, #1
 800210a:	613b      	str	r3, [r7, #16]
 800210c:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800210e:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002112:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002114:	2302      	movs	r3, #2
 8002116:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211c:	2303      	movs	r3, #3
 800211e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002120:	230a      	movs	r3, #10
 8002122:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002124:	f107 0314 	add.w	r3, r7, #20
 8002128:	4619      	mov	r1, r3
 800212a:	4815      	ldr	r0, [pc, #84]	; (8002180 <HAL_PCD_MspInit+0xb0>)
 800212c:	f001 fc2a 	bl	8003984 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002130:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002134:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002136:	2300      	movs	r3, #0
 8002138:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800213a:	2300      	movs	r3, #0
 800213c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800213e:	f107 0314 	add.w	r3, r7, #20
 8002142:	4619      	mov	r1, r3
 8002144:	480e      	ldr	r0, [pc, #56]	; (8002180 <HAL_PCD_MspInit+0xb0>)
 8002146:	f001 fc1d 	bl	8003984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800214a:	4b0c      	ldr	r3, [pc, #48]	; (800217c <HAL_PCD_MspInit+0xac>)
 800214c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800214e:	4a0b      	ldr	r2, [pc, #44]	; (800217c <HAL_PCD_MspInit+0xac>)
 8002150:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002154:	6353      	str	r3, [r2, #52]	; 0x34
 8002156:	2300      	movs	r3, #0
 8002158:	60fb      	str	r3, [r7, #12]
 800215a:	4b08      	ldr	r3, [pc, #32]	; (800217c <HAL_PCD_MspInit+0xac>)
 800215c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215e:	4a07      	ldr	r2, [pc, #28]	; (800217c <HAL_PCD_MspInit+0xac>)
 8002160:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002164:	6453      	str	r3, [r2, #68]	; 0x44
 8002166:	4b05      	ldr	r3, [pc, #20]	; (800217c <HAL_PCD_MspInit+0xac>)
 8002168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800216a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800216e:	60fb      	str	r3, [r7, #12]
 8002170:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8002172:	bf00      	nop
 8002174:	3728      	adds	r7, #40	; 0x28
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	40023800 	.word	0x40023800
 8002180:	40020000 	.word	0x40020000

08002184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002184:	b480      	push	{r7}
 8002186:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002188:	e7fe      	b.n	8002188 <NMI_Handler+0x4>

0800218a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800218a:	b480      	push	{r7}
 800218c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800218e:	e7fe      	b.n	800218e <HardFault_Handler+0x4>

08002190 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002190:	b480      	push	{r7}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002194:	e7fe      	b.n	8002194 <MemManage_Handler+0x4>

08002196 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002196:	b480      	push	{r7}
 8002198:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800219a:	e7fe      	b.n	800219a <BusFault_Handler+0x4>

0800219c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021a0:	e7fe      	b.n	80021a0 <UsageFault_Handler+0x4>

080021a2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021a2:	b480      	push	{r7}
 80021a4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	46bd      	mov	sp, r7
 80021aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ae:	4770      	bx	lr

080021b0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021b4:	bf00      	nop
 80021b6:	46bd      	mov	sp, r7
 80021b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021bc:	4770      	bx	lr

080021be <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021d0:	f000 fbd2 	bl	8002978 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021d4:	bf00      	nop
 80021d6:	bd80      	pop	{r7, pc}

080021d8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80021dc:	4802      	ldr	r0, [pc, #8]	; (80021e8 <USART3_IRQHandler+0x10>)
 80021de:	f002 fcfd 	bl	8004bdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80021e2:	bf00      	nop
 80021e4:	bd80      	pop	{r7, pc}
 80021e6:	bf00      	nop
 80021e8:	20001a18 	.word	0x20001a18

080021ec <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b086      	sub	sp, #24
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	60f8      	str	r0, [r7, #12]
 80021f4:	60b9      	str	r1, [r7, #8]
 80021f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021f8:	2300      	movs	r3, #0
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	e00a      	b.n	8002214 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80021fe:	f3af 8000 	nop.w
 8002202:	4601      	mov	r1, r0
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	1c5a      	adds	r2, r3, #1
 8002208:	60ba      	str	r2, [r7, #8]
 800220a:	b2ca      	uxtb	r2, r1
 800220c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	3301      	adds	r3, #1
 8002212:	617b      	str	r3, [r7, #20]
 8002214:	697a      	ldr	r2, [r7, #20]
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	429a      	cmp	r2, r3
 800221a:	dbf0      	blt.n	80021fe <_read+0x12>
	}

return len;
 800221c:	687b      	ldr	r3, [r7, #4]
}
 800221e:	4618      	mov	r0, r3
 8002220:	3718      	adds	r7, #24
 8002222:	46bd      	mov	sp, r7
 8002224:	bd80      	pop	{r7, pc}

08002226 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002226:	b580      	push	{r7, lr}
 8002228:	b086      	sub	sp, #24
 800222a:	af00      	add	r7, sp, #0
 800222c:	60f8      	str	r0, [r7, #12]
 800222e:	60b9      	str	r1, [r7, #8]
 8002230:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002232:	2300      	movs	r3, #0
 8002234:	617b      	str	r3, [r7, #20]
 8002236:	e009      	b.n	800224c <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	1c5a      	adds	r2, r3, #1
 800223c:	60ba      	str	r2, [r7, #8]
 800223e:	781b      	ldrb	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7ff fd5d 	bl	8001d00 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	3301      	adds	r3, #1
 800224a:	617b      	str	r3, [r7, #20]
 800224c:	697a      	ldr	r2, [r7, #20]
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	429a      	cmp	r2, r3
 8002252:	dbf1      	blt.n	8002238 <_write+0x12>
	}
	return len;
 8002254:	687b      	ldr	r3, [r7, #4]
}
 8002256:	4618      	mov	r0, r3
 8002258:	3718      	adds	r7, #24
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}

0800225e <_close>:

int _close(int file)
{
 800225e:	b480      	push	{r7}
 8002260:	b083      	sub	sp, #12
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
	return -1;
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr

08002276 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002276:	b480      	push	{r7}
 8002278:	b083      	sub	sp, #12
 800227a:	af00      	add	r7, sp, #0
 800227c:	6078      	str	r0, [r7, #4]
 800227e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002286:	605a      	str	r2, [r3, #4]
	return 0;
 8002288:	2300      	movs	r3, #0
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr

08002296 <_isatty>:

int _isatty(int file)
{
 8002296:	b480      	push	{r7}
 8002298:	b083      	sub	sp, #12
 800229a:	af00      	add	r7, sp, #0
 800229c:	6078      	str	r0, [r7, #4]
	return 1;
 800229e:	2301      	movs	r3, #1
}
 80022a0:	4618      	mov	r0, r3
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b085      	sub	sp, #20
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	60f8      	str	r0, [r7, #12]
 80022b4:	60b9      	str	r1, [r7, #8]
 80022b6:	607a      	str	r2, [r7, #4]
	return 0;
 80022b8:	2300      	movs	r3, #0
}
 80022ba:	4618      	mov	r0, r3
 80022bc:	3714      	adds	r7, #20
 80022be:	46bd      	mov	sp, r7
 80022c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c4:	4770      	bx	lr
	...

080022c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022d0:	4a14      	ldr	r2, [pc, #80]	; (8002324 <_sbrk+0x5c>)
 80022d2:	4b15      	ldr	r3, [pc, #84]	; (8002328 <_sbrk+0x60>)
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022dc:	4b13      	ldr	r3, [pc, #76]	; (800232c <_sbrk+0x64>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d102      	bne.n	80022ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022e4:	4b11      	ldr	r3, [pc, #68]	; (800232c <_sbrk+0x64>)
 80022e6:	4a12      	ldr	r2, [pc, #72]	; (8002330 <_sbrk+0x68>)
 80022e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ea:	4b10      	ldr	r3, [pc, #64]	; (800232c <_sbrk+0x64>)
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	4413      	add	r3, r2
 80022f2:	693a      	ldr	r2, [r7, #16]
 80022f4:	429a      	cmp	r2, r3
 80022f6:	d207      	bcs.n	8002308 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022f8:	f003 fede 	bl	80060b8 <__errno>
 80022fc:	4603      	mov	r3, r0
 80022fe:	220c      	movs	r2, #12
 8002300:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002302:	f04f 33ff 	mov.w	r3, #4294967295
 8002306:	e009      	b.n	800231c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002308:	4b08      	ldr	r3, [pc, #32]	; (800232c <_sbrk+0x64>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800230e:	4b07      	ldr	r3, [pc, #28]	; (800232c <_sbrk+0x64>)
 8002310:	681a      	ldr	r2, [r3, #0]
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	4413      	add	r3, r2
 8002316:	4a05      	ldr	r2, [pc, #20]	; (800232c <_sbrk+0x64>)
 8002318:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800231a:	68fb      	ldr	r3, [r7, #12]
}
 800231c:	4618      	mov	r0, r3
 800231e:	3718      	adds	r7, #24
 8002320:	46bd      	mov	sp, r7
 8002322:	bd80      	pop	{r7, pc}
 8002324:	20030000 	.word	0x20030000
 8002328:	00000400 	.word	0x00000400
 800232c:	20001fb8 	.word	0x20001fb8
 8002330:	20002400 	.word	0x20002400

08002334 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002334:	b480      	push	{r7}
 8002336:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002338:	4b06      	ldr	r3, [pc, #24]	; (8002354 <SystemInit+0x20>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	4a05      	ldr	r2, [pc, #20]	; (8002354 <SystemInit+0x20>)
 8002340:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002344:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002348:	bf00      	nop
 800234a:	46bd      	mov	sp, r7
 800234c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <ReceivePacket>:
  * @param  timeout
  * @retval HAL_OK: normally return
  *         HAL_BUSY: abort by user
  */
static HAL_StatusTypeDef ReceivePacket(uint8_t *p_data, uint32_t *p_length, uint32_t timeout)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b088      	sub	sp, #32
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
  uint32_t crc;
  uint32_t packet_size = 0;
 8002364:	2300      	movs	r3, #0
 8002366:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint8_t char1;

  *p_length = 0;
 8002368:	68bb      	ldr	r3, [r7, #8]
 800236a:	2200      	movs	r2, #0
 800236c:	601a      	str	r2, [r3, #0]
  huart3.RxState = HAL_UART_STATE_READY;
 800236e:	4b61      	ldr	r3, [pc, #388]	; (80024f4 <ReceivePacket+0x19c>)
 8002370:	2220      	movs	r2, #32
 8002372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  status = HAL_UART_Receive(&huart3, &char1, 1, timeout);
 8002376:	f107 0113 	add.w	r1, r7, #19
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	485d      	ldr	r0, [pc, #372]	; (80024f4 <ReceivePacket+0x19c>)
 8002380:	f002 fb59 	bl	8004a36 <HAL_UART_Receive>
 8002384:	4603      	mov	r3, r0
 8002386:	76fb      	strb	r3, [r7, #27]

  if (status == HAL_OK)
 8002388:	7efb      	ldrb	r3, [r7, #27]
 800238a:	2b00      	cmp	r3, #0
 800238c:	f040 80aa 	bne.w	80024e4 <ReceivePacket+0x18c>
  {
    switch (char1)
 8002390:	7cfb      	ldrb	r3, [r7, #19]
 8002392:	2b61      	cmp	r3, #97	; 0x61
 8002394:	d059      	beq.n	800244a <ReceivePacket+0xf2>
 8002396:	2b61      	cmp	r3, #97	; 0x61
 8002398:	dc5a      	bgt.n	8002450 <ReceivePacket+0xf8>
 800239a:	2b18      	cmp	r3, #24
 800239c:	dc38      	bgt.n	8002410 <ReceivePacket+0xb8>
 800239e:	2b00      	cmp	r3, #0
 80023a0:	dd56      	ble.n	8002450 <ReceivePacket+0xf8>
 80023a2:	3b01      	subs	r3, #1
 80023a4:	2b17      	cmp	r3, #23
 80023a6:	d853      	bhi.n	8002450 <ReceivePacket+0xf8>
 80023a8:	a201      	add	r2, pc, #4	; (adr r2, 80023b0 <ReceivePacket+0x58>)
 80023aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ae:	bf00      	nop
 80023b0:	08002417 	.word	0x08002417
 80023b4:	0800241d 	.word	0x0800241d
 80023b8:	08002451 	.word	0x08002451
 80023bc:	08002457 	.word	0x08002457
 80023c0:	08002451 	.word	0x08002451
 80023c4:	08002451 	.word	0x08002451
 80023c8:	08002451 	.word	0x08002451
 80023cc:	08002451 	.word	0x08002451
 80023d0:	08002451 	.word	0x08002451
 80023d4:	08002451 	.word	0x08002451
 80023d8:	08002451 	.word	0x08002451
 80023dc:	08002451 	.word	0x08002451
 80023e0:	08002451 	.word	0x08002451
 80023e4:	08002451 	.word	0x08002451
 80023e8:	08002451 	.word	0x08002451
 80023ec:	08002451 	.word	0x08002451
 80023f0:	08002451 	.word	0x08002451
 80023f4:	08002451 	.word	0x08002451
 80023f8:	08002451 	.word	0x08002451
 80023fc:	08002451 	.word	0x08002451
 8002400:	08002451 	.word	0x08002451
 8002404:	08002451 	.word	0x08002451
 8002408:	08002451 	.word	0x08002451
 800240c:	08002425 	.word	0x08002425
 8002410:	2b41      	cmp	r3, #65	; 0x41
 8002412:	d01a      	beq.n	800244a <ReceivePacket+0xf2>
 8002414:	e01c      	b.n	8002450 <ReceivePacket+0xf8>
    {
      case SOH:
        packet_size = PACKET_SIZE;
 8002416:	2380      	movs	r3, #128	; 0x80
 8002418:	61fb      	str	r3, [r7, #28]
        break;
 800241a:	e01d      	b.n	8002458 <ReceivePacket+0x100>
      case STX:
        packet_size = PACKET_1K_SIZE;
 800241c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002420:	61fb      	str	r3, [r7, #28]
        break;
 8002422:	e019      	b.n	8002458 <ReceivePacket+0x100>
      case EOT:
        break;
      case CA:
        if ((HAL_UART_Receive(&huart3, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 8002424:	f107 0113 	add.w	r1, r7, #19
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	2201      	movs	r2, #1
 800242c:	4831      	ldr	r0, [pc, #196]	; (80024f4 <ReceivePacket+0x19c>)
 800242e:	f002 fb02 	bl	8004a36 <HAL_UART_Receive>
 8002432:	4603      	mov	r3, r0
 8002434:	2b00      	cmp	r3, #0
 8002436:	d105      	bne.n	8002444 <ReceivePacket+0xec>
 8002438:	7cfb      	ldrb	r3, [r7, #19]
 800243a:	2b18      	cmp	r3, #24
 800243c:	d102      	bne.n	8002444 <ReceivePacket+0xec>
        {
          packet_size = 2;
 800243e:	2302      	movs	r3, #2
 8002440:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          status = HAL_ERROR;
        }
        break;
 8002442:	e009      	b.n	8002458 <ReceivePacket+0x100>
          status = HAL_ERROR;
 8002444:	2301      	movs	r3, #1
 8002446:	76fb      	strb	r3, [r7, #27]
        break;
 8002448:	e006      	b.n	8002458 <ReceivePacket+0x100>
      case ABORT1:
      case ABORT2:
        status = HAL_BUSY;
 800244a:	2302      	movs	r3, #2
 800244c:	76fb      	strb	r3, [r7, #27]
        break;
 800244e:	e003      	b.n	8002458 <ReceivePacket+0x100>
      default:
        status = HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	76fb      	strb	r3, [r7, #27]
        break;
 8002454:	e000      	b.n	8002458 <ReceivePacket+0x100>
        break;
 8002456:	bf00      	nop
    }
    *p_data = char1;
 8002458:	7cfa      	ldrb	r2, [r7, #19]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	701a      	strb	r2, [r3, #0]

    if (packet_size >= PACKET_SIZE )
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	2b7f      	cmp	r3, #127	; 0x7f
 8002462:	d93f      	bls.n	80024e4 <ReceivePacket+0x18c>
    {
      status = HAL_UART_Receive(&huart3, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	1c99      	adds	r1, r3, #2
 8002468:	69fb      	ldr	r3, [r7, #28]
 800246a:	b29b      	uxth	r3, r3
 800246c:	3304      	adds	r3, #4
 800246e:	b29a      	uxth	r2, r3
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	4820      	ldr	r0, [pc, #128]	; (80024f4 <ReceivePacket+0x19c>)
 8002474:	f002 fadf 	bl	8004a36 <HAL_UART_Receive>
 8002478:	4603      	mov	r3, r0
 800247a:	76fb      	strb	r3, [r7, #27]

      /* Simple packet sanity check */
      if (status == HAL_OK )
 800247c:	7efb      	ldrb	r3, [r7, #27]
 800247e:	2b00      	cmp	r3, #0
 8002480:	d12e      	bne.n	80024e0 <ReceivePacket+0x188>
      {
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	3302      	adds	r3, #2
 8002486:	781a      	ldrb	r2, [r3, #0]
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	3303      	adds	r3, #3
 800248c:	781b      	ldrb	r3, [r3, #0]
 800248e:	43db      	mvns	r3, r3
 8002490:	b2db      	uxtb	r3, r3
 8002492:	429a      	cmp	r2, r3
 8002494:	d004      	beq.n	80024a0 <ReceivePacket+0x148>
        {
          packet_size = 0;
 8002496:	2300      	movs	r3, #0
 8002498:	61fb      	str	r3, [r7, #28]
          status = HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	76fb      	strb	r3, [r7, #27]
 800249e:	e021      	b.n	80024e4 <ReceivePacket+0x18c>
        }
        else
        {
          /* Check packet CRC */
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	3304      	adds	r3, #4
 80024a4:	68fa      	ldr	r2, [r7, #12]
 80024a6:	4413      	add	r3, r2
 80024a8:	781b      	ldrb	r3, [r3, #0]
 80024aa:	021b      	lsls	r3, r3, #8
 80024ac:	617b      	str	r3, [r7, #20]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 80024ae:	69fb      	ldr	r3, [r7, #28]
 80024b0:	3305      	adds	r3, #5
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	4413      	add	r3, r2
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	461a      	mov	r2, r3
 80024ba:	697b      	ldr	r3, [r7, #20]
 80024bc:	4413      	add	r3, r2
 80024be:	617b      	str	r3, [r7, #20]
          if (Cal_CRC16(&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	3304      	adds	r3, #4
 80024c4:	69f9      	ldr	r1, [r7, #28]
 80024c6:	4618      	mov	r0, r3
 80024c8:	f000 f84a 	bl	8002560 <Cal_CRC16>
 80024cc:	4603      	mov	r3, r0
 80024ce:	461a      	mov	r2, r3
 80024d0:	697b      	ldr	r3, [r7, #20]
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d006      	beq.n	80024e4 <ReceivePacket+0x18c>
          {
            packet_size = 0;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
            status = HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	76fb      	strb	r3, [r7, #27]
 80024de:	e001      	b.n	80024e4 <ReceivePacket+0x18c>
          }
        }
      }
      else
      {
        packet_size = 0;
 80024e0:	2300      	movs	r3, #0
 80024e2:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  *p_length = packet_size;
 80024e4:	68bb      	ldr	r3, [r7, #8]
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	601a      	str	r2, [r3, #0]
  return status;
 80024ea:	7efb      	ldrb	r3, [r7, #27]
}
 80024ec:	4618      	mov	r0, r3
 80024ee:	3720      	adds	r7, #32
 80024f0:	46bd      	mov	sp, r7
 80024f2:	bd80      	pop	{r7, pc}
 80024f4:	20001a18 	.word	0x20001a18

080024f8 <UpdateCRC16>:
  * @param  crc_in input value 
  * @param  input byte
  * @retval None
  */
uint16_t UpdateCRC16(uint16_t crc_in, uint8_t byte)
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	4603      	mov	r3, r0
 8002500:	460a      	mov	r2, r1
 8002502:	80fb      	strh	r3, [r7, #6]
 8002504:	4613      	mov	r3, r2
 8002506:	717b      	strb	r3, [r7, #5]
  uint32_t crc = crc_in;
 8002508:	88fb      	ldrh	r3, [r7, #6]
 800250a:	60fb      	str	r3, [r7, #12]
  uint32_t in = byte | 0x100;
 800250c:	797b      	ldrb	r3, [r7, #5]
 800250e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002512:	60bb      	str	r3, [r7, #8]

  do
  {
    crc <<= 1;
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	005b      	lsls	r3, r3, #1
 8002518:	60fb      	str	r3, [r7, #12]
    in <<= 1;
 800251a:	68bb      	ldr	r3, [r7, #8]
 800251c:	005b      	lsls	r3, r3, #1
 800251e:	60bb      	str	r3, [r7, #8]
    if(in & 0x100)
 8002520:	68bb      	ldr	r3, [r7, #8]
 8002522:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002526:	2b00      	cmp	r3, #0
 8002528:	d002      	beq.n	8002530 <UpdateCRC16+0x38>
      ++crc;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	3301      	adds	r3, #1
 800252e:	60fb      	str	r3, [r7, #12]
    if(crc & 0x10000)
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002536:	2b00      	cmp	r3, #0
 8002538:	d005      	beq.n	8002546 <UpdateCRC16+0x4e>
      crc ^= 0x1021;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 8002540:	f083 0301 	eor.w	r3, r3, #1
 8002544:	60fb      	str	r3, [r7, #12]
  }
  
  while(!(in & 0x10000));
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800254c:	2b00      	cmp	r3, #0
 800254e:	d0e1      	beq.n	8002514 <UpdateCRC16+0x1c>

  return crc & 0xffffu;
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	b29b      	uxth	r3, r3
}
 8002554:	4618      	mov	r0, r3
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr

08002560 <Cal_CRC16>:
  * @param  data
  * @param  length
  * @retval None
  */
uint16_t Cal_CRC16(const uint8_t* p_data, uint32_t size)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b084      	sub	sp, #16
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
 8002568:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 800256a:	2300      	movs	r3, #0
 800256c:	60fb      	str	r3, [r7, #12]
  const uint8_t* dataEnd = p_data+size;
 800256e:	687a      	ldr	r2, [r7, #4]
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	4413      	add	r3, r2
 8002574:	60bb      	str	r3, [r7, #8]

  while(p_data < dataEnd)
 8002576:	e00a      	b.n	800258e <Cal_CRC16+0x2e>
    crc = UpdateCRC16(crc, *p_data++);
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	b298      	uxth	r0, r3
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	4619      	mov	r1, r3
 8002586:	f7ff ffb7 	bl	80024f8 <UpdateCRC16>
 800258a:	4603      	mov	r3, r0
 800258c:	60fb      	str	r3, [r7, #12]
  while(p_data < dataEnd)
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	68bb      	ldr	r3, [r7, #8]
 8002592:	429a      	cmp	r2, r3
 8002594:	d3f0      	bcc.n	8002578 <Cal_CRC16+0x18>
 
  crc = UpdateCRC16(crc, 0);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	b29b      	uxth	r3, r3
 800259a:	2100      	movs	r1, #0
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff ffab 	bl	80024f8 <UpdateCRC16>
 80025a2:	4603      	mov	r3, r0
 80025a4:	60fb      	str	r3, [r7, #12]
  crc = UpdateCRC16(crc, 0);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	b29b      	uxth	r3, r3
 80025aa:	2100      	movs	r1, #0
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ffa3 	bl	80024f8 <UpdateCRC16>
 80025b2:	4603      	mov	r3, r0
 80025b4:	60fb      	str	r3, [r7, #12]

  return crc&0xffffu;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	b29b      	uxth	r3, r3
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3710      	adds	r7, #16
 80025be:	46bd      	mov	sp, r7
 80025c0:	bd80      	pop	{r7, pc}
	...

080025c4 <Ymodem_Receive>:
  * @brief  Receive a file using the ymodem protocol with CRC16.
  * @param  p_size The size of the file.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive ( uint32_t *p_size )
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b092      	sub	sp, #72	; 0x48
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	6078      	str	r0, [r7, #4]
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 80025cc:	2300      	movs	r3, #0
 80025ce:	643b      	str	r3, [r7, #64]	; 0x40
 80025d0:	2300      	movs	r3, #0
 80025d2:	63bb      	str	r3, [r7, #56]	; 0x38
 80025d4:	2300      	movs	r3, #0
 80025d6:	637b      	str	r3, [r7, #52]	; 0x34
 // uint32_t flashdestination;
  uint32_t ramsource, filesize;
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH], tmp, packets_received;
  COM_StatusTypeDef result = COM_OK;
 80025d8:	2300      	movs	r3, #0
 80025da:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

  /* Initialize flashdestination variable */
  flashdestination = APPLICATION_ADDRESS;
 80025de:	4b87      	ldr	r3, [pc, #540]	; (80027fc <Ymodem_Receive+0x238>)
 80025e0:	4a87      	ldr	r2, [pc, #540]	; (8002800 <Ymodem_Receive+0x23c>)
 80025e2:	601a      	str	r2, [r3, #0]

  while ((session_done == 0) && (result == COM_OK))
 80025e4:	e0fb      	b.n	80027de <Ymodem_Receive+0x21a>
  {
    packets_received = 0;
 80025e6:	2300      	movs	r3, #0
 80025e8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    file_done = 0;
 80025ec:	2300      	movs	r3, #0
 80025ee:	63fb      	str	r3, [r7, #60]	; 0x3c
    while ((file_done == 0) && (result == COM_OK))
 80025f0:	e0ed      	b.n	80027ce <Ymodem_Receive+0x20a>
    {
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 80025f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80025f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80025fa:	4619      	mov	r1, r3
 80025fc:	4881      	ldr	r0, [pc, #516]	; (8002804 <Ymodem_Receive+0x240>)
 80025fe:	f7ff feab 	bl	8002358 <ReceivePacket>
 8002602:	4603      	mov	r3, r0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d003      	beq.n	8002610 <Ymodem_Receive+0x4c>
 8002608:	2b02      	cmp	r3, #2
 800260a:	f000 80c2 	beq.w	8002792 <Ymodem_Receive+0x1ce>
 800260e:	e0ca      	b.n	80027a6 <Ymodem_Receive+0x1e2>
      {
        case HAL_OK:
          errors = 0;
 8002610:	2300      	movs	r3, #0
 8002612:	63bb      	str	r3, [r7, #56]	; 0x38
          switch (packet_length)
 8002614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002616:	2b00      	cmp	r3, #0
 8002618:	d008      	beq.n	800262c <Ymodem_Receive+0x68>
 800261a:	2b02      	cmp	r3, #2
 800261c:	d10c      	bne.n	8002638 <Ymodem_Receive+0x74>
          {
            case 2:
              /* Abort by sender */
              Serial_PutByte(ACK);
 800261e:	2006      	movs	r0, #6
 8002620:	f7ff f89e 	bl	8001760 <Serial_PutByte>
              result = COM_ABORT;
 8002624:	2302      	movs	r3, #2
 8002626:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
              break;
 800262a:	e0b1      	b.n	8002790 <Ymodem_Receive+0x1cc>
            case 0:
              /* End of transmission */
              Serial_PutByte(ACK);
 800262c:	2006      	movs	r0, #6
 800262e:	f7ff f897 	bl	8001760 <Serial_PutByte>
              file_done = 1;
 8002632:	2301      	movs	r3, #1
 8002634:	63fb      	str	r3, [r7, #60]	; 0x3c
              break;
 8002636:	e0ab      	b.n	8002790 <Ymodem_Receive+0x1cc>
            default:
              /* Normal packet */
              if (aPacketData[PACKET_NUMBER_INDEX] != packets_received)
 8002638:	4b72      	ldr	r3, [pc, #456]	; (8002804 <Ymodem_Receive+0x240>)
 800263a:	789b      	ldrb	r3, [r3, #2]
 800263c:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8002640:	429a      	cmp	r2, r3
 8002642:	d003      	beq.n	800264c <Ymodem_Receive+0x88>
              {
                Serial_PutByte(NAK);
 8002644:	2015      	movs	r0, #21
 8002646:	f7ff f88b 	bl	8001760 <Serial_PutByte>
                  }
                }
                packets_received ++;
                session_begin = 1;
              }
              break;
 800264a:	e0a0      	b.n	800278e <Ymodem_Receive+0x1ca>
                if (packets_received == 0)
 800264c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002650:	2b00      	cmp	r3, #0
 8002652:	d175      	bne.n	8002740 <Ymodem_Receive+0x17c>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 8002654:	4b6b      	ldr	r3, [pc, #428]	; (8002804 <Ymodem_Receive+0x240>)
 8002656:	791b      	ldrb	r3, [r3, #4]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d069      	beq.n	8002730 <Ymodem_Receive+0x16c>
                    i = 0;
 800265c:	2300      	movs	r3, #0
 800265e:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 8002660:	4b69      	ldr	r3, [pc, #420]	; (8002808 <Ymodem_Receive+0x244>)
 8002662:	633b      	str	r3, [r7, #48]	; 0x30
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 8002664:	e008      	b.n	8002678 <Ymodem_Receive+0xb4>
                      aFileName[i++] = *file_ptr++;
 8002666:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002668:	1c53      	adds	r3, r2, #1
 800266a:	633b      	str	r3, [r7, #48]	; 0x30
 800266c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800266e:	1c59      	adds	r1, r3, #1
 8002670:	6479      	str	r1, [r7, #68]	; 0x44
 8002672:	7811      	ldrb	r1, [r2, #0]
 8002674:	4a65      	ldr	r2, [pc, #404]	; (800280c <Ymodem_Receive+0x248>)
 8002676:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 8002678:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800267a:	781b      	ldrb	r3, [r3, #0]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d002      	beq.n	8002686 <Ymodem_Receive+0xc2>
 8002680:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002682:	2b3f      	cmp	r3, #63	; 0x3f
 8002684:	d9ef      	bls.n	8002666 <Ymodem_Receive+0xa2>
                    aFileName[i++] = '\0';
 8002686:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002688:	1c5a      	adds	r2, r3, #1
 800268a:	647a      	str	r2, [r7, #68]	; 0x44
 800268c:	4a5f      	ldr	r2, [pc, #380]	; (800280c <Ymodem_Receive+0x248>)
 800268e:	2100      	movs	r1, #0
 8002690:	54d1      	strb	r1, [r2, r3]
                    i = 0;
 8002692:	2300      	movs	r3, #0
 8002694:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr ++;
 8002696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002698:	3301      	adds	r3, #1
 800269a:	633b      	str	r3, [r7, #48]	; 0x30
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 800269c:	e00a      	b.n	80026b4 <Ymodem_Receive+0xf0>
                      file_size[i++] = *file_ptr++;
 800269e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026a0:	1c53      	adds	r3, r2, #1
 80026a2:	633b      	str	r3, [r7, #48]	; 0x30
 80026a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026a6:	1c59      	adds	r1, r3, #1
 80026a8:	6479      	str	r1, [r7, #68]	; 0x44
 80026aa:	7812      	ldrb	r2, [r2, #0]
 80026ac:	3348      	adds	r3, #72	; 0x48
 80026ae:	443b      	add	r3, r7
 80026b0:	f803 2c38 	strb.w	r2, [r3, #-56]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 80026b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b20      	cmp	r3, #32
 80026ba:	d002      	beq.n	80026c2 <Ymodem_Receive+0xfe>
 80026bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026be:	2b0f      	cmp	r3, #15
 80026c0:	d9ed      	bls.n	800269e <Ymodem_Receive+0xda>
                    file_size[i++] = '\0';
 80026c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026c4:	1c5a      	adds	r2, r3, #1
 80026c6:	647a      	str	r2, [r7, #68]	; 0x44
 80026c8:	3348      	adds	r3, #72	; 0x48
 80026ca:	443b      	add	r3, r7
 80026cc:	2200      	movs	r2, #0
 80026ce:	f803 2c38 	strb.w	r2, [r3, #-56]
                    Str2Int(file_size, &filesize);
 80026d2:	f107 0220 	add.w	r2, r7, #32
 80026d6:	f107 0310 	add.w	r3, r7, #16
 80026da:	4611      	mov	r1, r2
 80026dc:	4618      	mov	r0, r3
 80026de:	f7fe ff2f 	bl	8001540 <Str2Int>
                    if (*p_size > (USER_FLASH_SIZE + 1))
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	4a4a      	ldr	r2, [pc, #296]	; (8002810 <Ymodem_Receive+0x24c>)
 80026e8:	4293      	cmp	r3, r2
 80026ea:	d914      	bls.n	8002716 <Ymodem_Receive+0x152>
                      tmp = CA;
 80026ec:	2318      	movs	r3, #24
 80026ee:	73fb      	strb	r3, [r7, #15]
                      HAL_UART_Transmit(&huart3, &tmp, 1, NAK_TIMEOUT);
 80026f0:	f107 010f 	add.w	r1, r7, #15
 80026f4:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80026f8:	2201      	movs	r2, #1
 80026fa:	4846      	ldr	r0, [pc, #280]	; (8002814 <Ymodem_Receive+0x250>)
 80026fc:	f002 f909 	bl	8004912 <HAL_UART_Transmit>
                      HAL_UART_Transmit(&huart3, &tmp, 1, NAK_TIMEOUT);
 8002700:	f107 010f 	add.w	r1, r7, #15
 8002704:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002708:	2201      	movs	r2, #1
 800270a:	4842      	ldr	r0, [pc, #264]	; (8002814 <Ymodem_Receive+0x250>)
 800270c:	f002 f901 	bl	8004912 <HAL_UART_Transmit>
                      result = COM_LIMIT;
 8002710:	2305      	movs	r3, #5
 8002712:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    FLASH_If_Erase(APPLICATION_ADDRESS);
 8002716:	483a      	ldr	r0, [pc, #232]	; (8002800 <Ymodem_Receive+0x23c>)
 8002718:	f7ff f84a 	bl	80017b0 <FLASH_If_Erase>
                    *p_size = filesize;
 800271c:	6a3a      	ldr	r2, [r7, #32]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	601a      	str	r2, [r3, #0]
                    Serial_PutByte(ACK);
 8002722:	2006      	movs	r0, #6
 8002724:	f7ff f81c 	bl	8001760 <Serial_PutByte>
                    Serial_PutByte(CRC16);
 8002728:	2043      	movs	r0, #67	; 0x43
 800272a:	f7ff f819 	bl	8001760 <Serial_PutByte>
 800272e:	e027      	b.n	8002780 <Ymodem_Receive+0x1bc>
                    Serial_PutByte(ACK);
 8002730:	2006      	movs	r0, #6
 8002732:	f7ff f815 	bl	8001760 <Serial_PutByte>
                    file_done = 1;
 8002736:	2301      	movs	r3, #1
 8002738:	63fb      	str	r3, [r7, #60]	; 0x3c
                    session_done = 1;
 800273a:	2301      	movs	r3, #1
 800273c:	643b      	str	r3, [r7, #64]	; 0x40
                    break;
 800273e:	e027      	b.n	8002790 <Ymodem_Receive+0x1cc>
                  ramsource = (uint32_t) & aPacketData[PACKET_DATA_INDEX];
 8002740:	4b31      	ldr	r3, [pc, #196]	; (8002808 <Ymodem_Receive+0x244>)
 8002742:	62bb      	str	r3, [r7, #40]	; 0x28
                  if (FLASH_If_Write(flashdestination, (uint32_t*) ramsource, packet_length/4) == FLASHIF_OK)
 8002744:	4b2d      	ldr	r3, [pc, #180]	; (80027fc <Ymodem_Receive+0x238>)
 8002746:	6818      	ldr	r0, [r3, #0]
 8002748:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	089b      	lsrs	r3, r3, #2
 800274e:	461a      	mov	r2, r3
 8002750:	f7ff f854 	bl	80017fc <FLASH_If_Write>
 8002754:	4603      	mov	r3, r0
 8002756:	2b00      	cmp	r3, #0
 8002758:	d109      	bne.n	800276e <Ymodem_Receive+0x1aa>
                    flashdestination += packet_length;
 800275a:	4b28      	ldr	r3, [pc, #160]	; (80027fc <Ymodem_Receive+0x238>)
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002760:	4413      	add	r3, r2
 8002762:	4a26      	ldr	r2, [pc, #152]	; (80027fc <Ymodem_Receive+0x238>)
 8002764:	6013      	str	r3, [r2, #0]
                    Serial_PutByte(ACK);
 8002766:	2006      	movs	r0, #6
 8002768:	f7fe fffa 	bl	8001760 <Serial_PutByte>
 800276c:	e008      	b.n	8002780 <Ymodem_Receive+0x1bc>
                    Serial_PutByte(CA);
 800276e:	2018      	movs	r0, #24
 8002770:	f7fe fff6 	bl	8001760 <Serial_PutByte>
                    Serial_PutByte(CA);
 8002774:	2018      	movs	r0, #24
 8002776:	f7fe fff3 	bl	8001760 <Serial_PutByte>
                    result = COM_DATA;
 800277a:	2304      	movs	r3, #4
 800277c:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                packets_received ++;
 8002780:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8002784:	3301      	adds	r3, #1
 8002786:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                session_begin = 1;
 800278a:	2301      	movs	r3, #1
 800278c:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 800278e:	bf00      	nop
          }
          break;
 8002790:	e01d      	b.n	80027ce <Ymodem_Receive+0x20a>
        case HAL_BUSY: /* Abort actually */
          Serial_PutByte(CA);
 8002792:	2018      	movs	r0, #24
 8002794:	f7fe ffe4 	bl	8001760 <Serial_PutByte>
          Serial_PutByte(CA);
 8002798:	2018      	movs	r0, #24
 800279a:	f7fe ffe1 	bl	8001760 <Serial_PutByte>
          result = COM_ABORT;
 800279e:	2302      	movs	r3, #2
 80027a0:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          break;
 80027a4:	e013      	b.n	80027ce <Ymodem_Receive+0x20a>
        default:
          if (session_begin > 0)
 80027a6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d002      	beq.n	80027b2 <Ymodem_Receive+0x1ee>
          {
            errors ++;
 80027ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027ae:	3301      	adds	r3, #1
 80027b0:	63bb      	str	r3, [r7, #56]	; 0x38
          }
          if (errors > MAX_ERRORS)
 80027b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027b4:	2b05      	cmp	r3, #5
 80027b6:	d906      	bls.n	80027c6 <Ymodem_Receive+0x202>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 80027b8:	2018      	movs	r0, #24
 80027ba:	f7fe ffd1 	bl	8001760 <Serial_PutByte>
            Serial_PutByte(CA);
 80027be:	2018      	movs	r0, #24
 80027c0:	f7fe ffce 	bl	8001760 <Serial_PutByte>
 80027c4:	e002      	b.n	80027cc <Ymodem_Receive+0x208>
          }
          else
          {
            Serial_PutByte(CRC16); /* Ask for a packet */
 80027c6:	2043      	movs	r0, #67	; 0x43
 80027c8:	f7fe ffca 	bl	8001760 <Serial_PutByte>
          }
          break;
 80027cc:	bf00      	nop
    while ((file_done == 0) && (result == COM_OK))
 80027ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d104      	bne.n	80027de <Ymodem_Receive+0x21a>
 80027d4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f43f af0a 	beq.w	80025f2 <Ymodem_Receive+0x2e>
  while ((session_done == 0) && (result == COM_OK))
 80027de:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d104      	bne.n	80027ee <Ymodem_Receive+0x22a>
 80027e4:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	f43f aefc 	beq.w	80025e6 <Ymodem_Receive+0x22>
      }
    }
  }
  return result;
 80027ee:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
}
 80027f2:	4618      	mov	r0, r3
 80027f4:	3748      	adds	r7, #72	; 0x48
 80027f6:	46bd      	mov	sp, r7
 80027f8:	bd80      	pop	{r7, pc}
 80027fa:	bf00      	nop
 80027fc:	20001fbc 	.word	0x20001fbc
 8002800:	08020000 	.word	0x08020000
 8002804:	20001fc0 	.word	0x20001fc0
 8002808:	20001fc4 	.word	0x20001fc4
 800280c:	20001f78 	.word	0x20001f78
 8002810:	000e0001 	.word	0x000e0001
 8002814:	20001a18 	.word	0x20001a18

08002818 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002818:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002850 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800281c:	480d      	ldr	r0, [pc, #52]	; (8002854 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800281e:	490e      	ldr	r1, [pc, #56]	; (8002858 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002820:	4a0e      	ldr	r2, [pc, #56]	; (800285c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002822:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002824:	e002      	b.n	800282c <LoopCopyDataInit>

08002826 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002826:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002828:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800282a:	3304      	adds	r3, #4

0800282c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800282c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800282e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002830:	d3f9      	bcc.n	8002826 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002832:	4a0b      	ldr	r2, [pc, #44]	; (8002860 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002834:	4c0b      	ldr	r4, [pc, #44]	; (8002864 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002836:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002838:	e001      	b.n	800283e <LoopFillZerobss>

0800283a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800283a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800283c:	3204      	adds	r2, #4

0800283e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800283e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002840:	d3fb      	bcc.n	800283a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002842:	f7ff fd77 	bl	8002334 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002846:	f003 fc3d 	bl	80060c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800284a:	f7ff f881 	bl	8001950 <main>
  bx  lr    
 800284e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8002850:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002854:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002858:	20000a38 	.word	0x20000a38
  ldr r2, =_sidata
 800285c:	08008248 	.word	0x08008248
  ldr r2, =_sbss
 8002860:	20000a38 	.word	0x20000a38
  ldr r4, =_ebss
 8002864:	200023fc 	.word	0x200023fc

08002868 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002868:	e7fe      	b.n	8002868 <ADC_IRQHandler>
	...

0800286c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800286c:	b580      	push	{r7, lr}
 800286e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002870:	4b0e      	ldr	r3, [pc, #56]	; (80028ac <HAL_Init+0x40>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a0d      	ldr	r2, [pc, #52]	; (80028ac <HAL_Init+0x40>)
 8002876:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800287a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800287c:	4b0b      	ldr	r3, [pc, #44]	; (80028ac <HAL_Init+0x40>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a0a      	ldr	r2, [pc, #40]	; (80028ac <HAL_Init+0x40>)
 8002882:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002886:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002888:	4b08      	ldr	r3, [pc, #32]	; (80028ac <HAL_Init+0x40>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4a07      	ldr	r2, [pc, #28]	; (80028ac <HAL_Init+0x40>)
 800288e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002892:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002894:	2003      	movs	r0, #3
 8002896:	f000 f983 	bl	8002ba0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800289a:	2000      	movs	r0, #0
 800289c:	f000 f83c 	bl	8002918 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028a0:	f7ff fad8 	bl	8001e54 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028a4:	2300      	movs	r3, #0
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	bd80      	pop	{r7, pc}
 80028aa:	bf00      	nop
 80028ac:	40023c00 	.word	0x40023c00

080028b0 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80028b4:	4b13      	ldr	r3, [pc, #76]	; (8002904 <HAL_DeInit+0x54>)
 80028b6:	f04f 32ff 	mov.w	r2, #4294967295
 80028ba:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80028bc:	4b11      	ldr	r3, [pc, #68]	; (8002904 <HAL_DeInit+0x54>)
 80028be:	2200      	movs	r2, #0
 80028c0:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80028c2:	4b10      	ldr	r3, [pc, #64]	; (8002904 <HAL_DeInit+0x54>)
 80028c4:	f04f 32ff 	mov.w	r2, #4294967295
 80028c8:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80028ca:	4b0e      	ldr	r3, [pc, #56]	; (8002904 <HAL_DeInit+0x54>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80028d0:	4b0c      	ldr	r3, [pc, #48]	; (8002904 <HAL_DeInit+0x54>)
 80028d2:	f04f 32ff 	mov.w	r2, #4294967295
 80028d6:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 80028d8:	4b0a      	ldr	r3, [pc, #40]	; (8002904 <HAL_DeInit+0x54>)
 80028da:	2200      	movs	r2, #0
 80028dc:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 80028de:	4b09      	ldr	r3, [pc, #36]	; (8002904 <HAL_DeInit+0x54>)
 80028e0:	f04f 32ff 	mov.w	r2, #4294967295
 80028e4:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 80028e6:	4b07      	ldr	r3, [pc, #28]	; (8002904 <HAL_DeInit+0x54>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 80028ec:	4b05      	ldr	r3, [pc, #20]	; (8002904 <HAL_DeInit+0x54>)
 80028ee:	f04f 32ff 	mov.w	r2, #4294967295
 80028f2:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 80028f4:	4b03      	ldr	r3, [pc, #12]	; (8002904 <HAL_DeInit+0x54>)
 80028f6:	2200      	movs	r2, #0
 80028f8:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 80028fa:	f000 f805 	bl	8002908 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 80028fe:	2300      	movs	r3, #0
}
 8002900:	4618      	mov	r0, r3
 8002902:	bd80      	pop	{r7, pc}
 8002904:	40023800 	.word	0x40023800

08002908 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 800290c:	bf00      	nop
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr
	...

08002918 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b082      	sub	sp, #8
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002920:	4b12      	ldr	r3, [pc, #72]	; (800296c <HAL_InitTick+0x54>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	4b12      	ldr	r3, [pc, #72]	; (8002970 <HAL_InitTick+0x58>)
 8002926:	781b      	ldrb	r3, [r3, #0]
 8002928:	4619      	mov	r1, r3
 800292a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800292e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002932:	fbb2 f3f3 	udiv	r3, r2, r3
 8002936:	4618      	mov	r0, r3
 8002938:	f000 f967 	bl	8002c0a <HAL_SYSTICK_Config>
 800293c:	4603      	mov	r3, r0
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002942:	2301      	movs	r3, #1
 8002944:	e00e      	b.n	8002964 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2b0f      	cmp	r3, #15
 800294a:	d80a      	bhi.n	8002962 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800294c:	2200      	movs	r2, #0
 800294e:	6879      	ldr	r1, [r7, #4]
 8002950:	f04f 30ff 	mov.w	r0, #4294967295
 8002954:	f000 f92f 	bl	8002bb6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002958:	4a06      	ldr	r2, [pc, #24]	; (8002974 <HAL_InitTick+0x5c>)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800295e:	2300      	movs	r3, #0
 8002960:	e000      	b.n	8002964 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002962:	2301      	movs	r3, #1
}
 8002964:	4618      	mov	r0, r3
 8002966:	3708      	adds	r7, #8
 8002968:	46bd      	mov	sp, r7
 800296a:	bd80      	pop	{r7, pc}
 800296c:	200009c8 	.word	0x200009c8
 8002970:	200009d0 	.word	0x200009d0
 8002974:	200009cc 	.word	0x200009cc

08002978 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002978:	b480      	push	{r7}
 800297a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800297c:	4b06      	ldr	r3, [pc, #24]	; (8002998 <HAL_IncTick+0x20>)
 800297e:	781b      	ldrb	r3, [r3, #0]
 8002980:	461a      	mov	r2, r3
 8002982:	4b06      	ldr	r3, [pc, #24]	; (800299c <HAL_IncTick+0x24>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	4413      	add	r3, r2
 8002988:	4a04      	ldr	r2, [pc, #16]	; (800299c <HAL_IncTick+0x24>)
 800298a:	6013      	str	r3, [r2, #0]
}
 800298c:	bf00      	nop
 800298e:	46bd      	mov	sp, r7
 8002990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002994:	4770      	bx	lr
 8002996:	bf00      	nop
 8002998:	200009d0 	.word	0x200009d0
 800299c:	200023c8 	.word	0x200023c8

080029a0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029a0:	b480      	push	{r7}
 80029a2:	af00      	add	r7, sp, #0
  return uwTick;
 80029a4:	4b03      	ldr	r3, [pc, #12]	; (80029b4 <HAL_GetTick+0x14>)
 80029a6:	681b      	ldr	r3, [r3, #0]
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	46bd      	mov	sp, r7
 80029ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b0:	4770      	bx	lr
 80029b2:	bf00      	nop
 80029b4:	200023c8 	.word	0x200023c8

080029b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	b084      	sub	sp, #16
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029c0:	f7ff ffee 	bl	80029a0 <HAL_GetTick>
 80029c4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029d0:	d005      	beq.n	80029de <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029d2:	4b0a      	ldr	r3, [pc, #40]	; (80029fc <HAL_Delay+0x44>)
 80029d4:	781b      	ldrb	r3, [r3, #0]
 80029d6:	461a      	mov	r2, r3
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	4413      	add	r3, r2
 80029dc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029de:	bf00      	nop
 80029e0:	f7ff ffde 	bl	80029a0 <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	68fa      	ldr	r2, [r7, #12]
 80029ec:	429a      	cmp	r2, r3
 80029ee:	d8f7      	bhi.n	80029e0 <HAL_Delay+0x28>
  {
  }
}
 80029f0:	bf00      	nop
 80029f2:	bf00      	nop
 80029f4:	3710      	adds	r7, #16
 80029f6:	46bd      	mov	sp, r7
 80029f8:	bd80      	pop	{r7, pc}
 80029fa:	bf00      	nop
 80029fc:	200009d0 	.word	0x200009d0

08002a00 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b085      	sub	sp, #20
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f003 0307 	and.w	r3, r3, #7
 8002a0e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a10:	4b0c      	ldr	r3, [pc, #48]	; (8002a44 <__NVIC_SetPriorityGrouping+0x44>)
 8002a12:	68db      	ldr	r3, [r3, #12]
 8002a14:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a16:	68ba      	ldr	r2, [r7, #8]
 8002a18:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a1c:	4013      	ands	r3, r2
 8002a1e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a24:	68bb      	ldr	r3, [r7, #8]
 8002a26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a32:	4a04      	ldr	r2, [pc, #16]	; (8002a44 <__NVIC_SetPriorityGrouping+0x44>)
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	60d3      	str	r3, [r2, #12]
}
 8002a38:	bf00      	nop
 8002a3a:	3714      	adds	r7, #20
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr
 8002a44:	e000ed00 	.word	0xe000ed00

08002a48 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a4c:	4b04      	ldr	r3, [pc, #16]	; (8002a60 <__NVIC_GetPriorityGrouping+0x18>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	0a1b      	lsrs	r3, r3, #8
 8002a52:	f003 0307 	and.w	r3, r3, #7
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	e000ed00 	.word	0xe000ed00

08002a64 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	db0b      	blt.n	8002a8e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a76:	79fb      	ldrb	r3, [r7, #7]
 8002a78:	f003 021f 	and.w	r2, r3, #31
 8002a7c:	4907      	ldr	r1, [pc, #28]	; (8002a9c <__NVIC_EnableIRQ+0x38>)
 8002a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a82:	095b      	lsrs	r3, r3, #5
 8002a84:	2001      	movs	r0, #1
 8002a86:	fa00 f202 	lsl.w	r2, r0, r2
 8002a8a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002a8e:	bf00      	nop
 8002a90:	370c      	adds	r7, #12
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr
 8002a9a:	bf00      	nop
 8002a9c:	e000e100 	.word	0xe000e100

08002aa0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	6039      	str	r1, [r7, #0]
 8002aaa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	db0a      	blt.n	8002aca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	b2da      	uxtb	r2, r3
 8002ab8:	490c      	ldr	r1, [pc, #48]	; (8002aec <__NVIC_SetPriority+0x4c>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	0112      	lsls	r2, r2, #4
 8002ac0:	b2d2      	uxtb	r2, r2
 8002ac2:	440b      	add	r3, r1
 8002ac4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ac8:	e00a      	b.n	8002ae0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	b2da      	uxtb	r2, r3
 8002ace:	4908      	ldr	r1, [pc, #32]	; (8002af0 <__NVIC_SetPriority+0x50>)
 8002ad0:	79fb      	ldrb	r3, [r7, #7]
 8002ad2:	f003 030f 	and.w	r3, r3, #15
 8002ad6:	3b04      	subs	r3, #4
 8002ad8:	0112      	lsls	r2, r2, #4
 8002ada:	b2d2      	uxtb	r2, r2
 8002adc:	440b      	add	r3, r1
 8002ade:	761a      	strb	r2, [r3, #24]
}
 8002ae0:	bf00      	nop
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr
 8002aec:	e000e100 	.word	0xe000e100
 8002af0:	e000ed00 	.word	0xe000ed00

08002af4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b089      	sub	sp, #36	; 0x24
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b08:	69fb      	ldr	r3, [r7, #28]
 8002b0a:	f1c3 0307 	rsb	r3, r3, #7
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	bf28      	it	cs
 8002b12:	2304      	movcs	r3, #4
 8002b14:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b16:	69fb      	ldr	r3, [r7, #28]
 8002b18:	3304      	adds	r3, #4
 8002b1a:	2b06      	cmp	r3, #6
 8002b1c:	d902      	bls.n	8002b24 <NVIC_EncodePriority+0x30>
 8002b1e:	69fb      	ldr	r3, [r7, #28]
 8002b20:	3b03      	subs	r3, #3
 8002b22:	e000      	b.n	8002b26 <NVIC_EncodePriority+0x32>
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b28:	f04f 32ff 	mov.w	r2, #4294967295
 8002b2c:	69bb      	ldr	r3, [r7, #24]
 8002b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002b32:	43da      	mvns	r2, r3
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	401a      	ands	r2, r3
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b3c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b40:	697b      	ldr	r3, [r7, #20]
 8002b42:	fa01 f303 	lsl.w	r3, r1, r3
 8002b46:	43d9      	mvns	r1, r3
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b4c:	4313      	orrs	r3, r2
         );
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3724      	adds	r7, #36	; 0x24
 8002b52:	46bd      	mov	sp, r7
 8002b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b58:	4770      	bx	lr
	...

08002b5c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b5c:	b580      	push	{r7, lr}
 8002b5e:	b082      	sub	sp, #8
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	3b01      	subs	r3, #1
 8002b68:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b6c:	d301      	bcc.n	8002b72 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b6e:	2301      	movs	r3, #1
 8002b70:	e00f      	b.n	8002b92 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b72:	4a0a      	ldr	r2, [pc, #40]	; (8002b9c <SysTick_Config+0x40>)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	3b01      	subs	r3, #1
 8002b78:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b7a:	210f      	movs	r1, #15
 8002b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8002b80:	f7ff ff8e 	bl	8002aa0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b84:	4b05      	ldr	r3, [pc, #20]	; (8002b9c <SysTick_Config+0x40>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b8a:	4b04      	ldr	r3, [pc, #16]	; (8002b9c <SysTick_Config+0x40>)
 8002b8c:	2207      	movs	r2, #7
 8002b8e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3708      	adds	r7, #8
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
 8002b9a:	bf00      	nop
 8002b9c:	e000e010 	.word	0xe000e010

08002ba0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b082      	sub	sp, #8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ba8:	6878      	ldr	r0, [r7, #4]
 8002baa:	f7ff ff29 	bl	8002a00 <__NVIC_SetPriorityGrouping>
}
 8002bae:	bf00      	nop
 8002bb0:	3708      	adds	r7, #8
 8002bb2:	46bd      	mov	sp, r7
 8002bb4:	bd80      	pop	{r7, pc}

08002bb6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b086      	sub	sp, #24
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	60b9      	str	r1, [r7, #8]
 8002bc0:	607a      	str	r2, [r7, #4]
 8002bc2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bc8:	f7ff ff3e 	bl	8002a48 <__NVIC_GetPriorityGrouping>
 8002bcc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	68b9      	ldr	r1, [r7, #8]
 8002bd2:	6978      	ldr	r0, [r7, #20]
 8002bd4:	f7ff ff8e 	bl	8002af4 <NVIC_EncodePriority>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bde:	4611      	mov	r1, r2
 8002be0:	4618      	mov	r0, r3
 8002be2:	f7ff ff5d 	bl	8002aa0 <__NVIC_SetPriority>
}
 8002be6:	bf00      	nop
 8002be8:	3718      	adds	r7, #24
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}

08002bee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bee:	b580      	push	{r7, lr}
 8002bf0:	b082      	sub	sp, #8
 8002bf2:	af00      	add	r7, sp, #0
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002bf8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7ff ff31 	bl	8002a64 <__NVIC_EnableIRQ>
}
 8002c02:	bf00      	nop
 8002c04:	3708      	adds	r7, #8
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b082      	sub	sp, #8
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff ffa2 	bl	8002b5c <SysTick_Config>
 8002c18:	4603      	mov	r3, r0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}

08002c22 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c22:	b580      	push	{r7, lr}
 8002c24:	b084      	sub	sp, #16
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c2e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c30:	f7ff feb6 	bl	80029a0 <HAL_GetTick>
 8002c34:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c3c:	b2db      	uxtb	r3, r3
 8002c3e:	2b02      	cmp	r3, #2
 8002c40:	d008      	beq.n	8002c54 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2280      	movs	r2, #128	; 0x80
 8002c46:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c50:	2301      	movs	r3, #1
 8002c52:	e052      	b.n	8002cfa <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	681a      	ldr	r2, [r3, #0]
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f022 0216 	bic.w	r2, r2, #22
 8002c62:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	695a      	ldr	r2, [r3, #20]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c72:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d103      	bne.n	8002c84 <HAL_DMA_Abort+0x62>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d007      	beq.n	8002c94 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f022 0208 	bic.w	r2, r2, #8
 8002c92:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f022 0201 	bic.w	r2, r2, #1
 8002ca2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ca4:	e013      	b.n	8002cce <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002ca6:	f7ff fe7b 	bl	80029a0 <HAL_GetTick>
 8002caa:	4602      	mov	r2, r0
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	1ad3      	subs	r3, r2, r3
 8002cb0:	2b05      	cmp	r3, #5
 8002cb2:	d90c      	bls.n	8002cce <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2203      	movs	r2, #3
 8002cbe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e015      	b.n	8002cfa <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f003 0301 	and.w	r3, r3, #1
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d1e4      	bne.n	8002ca6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ce0:	223f      	movs	r2, #63	; 0x3f
 8002ce2:	409a      	lsls	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2201      	movs	r2, #1
 8002cec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002cf8:	2300      	movs	r3, #0
}
 8002cfa:	4618      	mov	r0, r3
 8002cfc:	3710      	adds	r7, #16
 8002cfe:	46bd      	mov	sp, r7
 8002d00:	bd80      	pop	{r7, pc}

08002d02 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d02:	b480      	push	{r7}
 8002d04:	b083      	sub	sp, #12
 8002d06:	af00      	add	r7, sp, #0
 8002d08:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d10:	b2db      	uxtb	r3, r3
 8002d12:	2b02      	cmp	r3, #2
 8002d14:	d004      	beq.n	8002d20 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2280      	movs	r2, #128	; 0x80
 8002d1a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d1c:	2301      	movs	r3, #1
 8002d1e:	e00c      	b.n	8002d3a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2205      	movs	r2, #5
 8002d24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	681a      	ldr	r2, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f022 0201 	bic.w	r2, r2, #1
 8002d36:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d38:	2300      	movs	r3, #0
}
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
	...

08002d48 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d101      	bne.n	8002d5a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e06c      	b.n	8002e34 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d106      	bne.n	8002d72 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2223      	movs	r2, #35	; 0x23
 8002d68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002d6c:	6878      	ldr	r0, [r7, #4]
 8002d6e:	f7ff f899 	bl	8001ea4 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d72:	2300      	movs	r3, #0
 8002d74:	60bb      	str	r3, [r7, #8]
 8002d76:	4b31      	ldr	r3, [pc, #196]	; (8002e3c <HAL_ETH_Init+0xf4>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d7a:	4a30      	ldr	r2, [pc, #192]	; (8002e3c <HAL_ETH_Init+0xf4>)
 8002d7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d80:	6453      	str	r3, [r2, #68]	; 0x44
 8002d82:	4b2e      	ldr	r3, [pc, #184]	; (8002e3c <HAL_ETH_Init+0xf4>)
 8002d84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d8a:	60bb      	str	r3, [r7, #8]
 8002d8c:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002d8e:	4b2c      	ldr	r3, [pc, #176]	; (8002e40 <HAL_ETH_Init+0xf8>)
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	4a2b      	ldr	r2, [pc, #172]	; (8002e40 <HAL_ETH_Init+0xf8>)
 8002d94:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002d98:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002d9a:	4b29      	ldr	r3, [pc, #164]	; (8002e40 <HAL_ETH_Init+0xf8>)
 8002d9c:	685a      	ldr	r2, [r3, #4]
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	4927      	ldr	r1, [pc, #156]	; (8002e40 <HAL_ETH_Init+0xf8>)
 8002da4:	4313      	orrs	r3, r2
 8002da6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002da8:	4b25      	ldr	r3, [pc, #148]	; (8002e40 <HAL_ETH_Init+0xf8>)
 8002daa:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	687a      	ldr	r2, [r7, #4]
 8002db8:	6812      	ldr	r2, [r2, #0]
 8002dba:	f043 0301 	orr.w	r3, r3, #1
 8002dbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002dc2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002dc4:	f7ff fdec 	bl	80029a0 <HAL_GetTick>
 8002dc8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002dca:	e011      	b.n	8002df0 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002dcc:	f7ff fde8 	bl	80029a0 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002dda:	d909      	bls.n	8002df0 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2204      	movs	r2, #4
 8002de0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	22e0      	movs	r2, #224	; 0xe0
 8002de8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e021      	b.n	8002e34 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0301 	and.w	r3, r3, #1
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d1e4      	bne.n	8002dcc <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f000 f958 	bl	80030b8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002e08:	6878      	ldr	r0, [r7, #4]
 8002e0a:	f000 f9ff 	bl	800320c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002e0e:	6878      	ldr	r0, [r7, #4]
 8002e10:	f000 fa55 	bl	80032be <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	685b      	ldr	r3, [r3, #4]
 8002e18:	461a      	mov	r2, r3
 8002e1a:	2100      	movs	r1, #0
 8002e1c:	6878      	ldr	r0, [r7, #4]
 8002e1e:	f000 f9bd 	bl	800319c <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	2200      	movs	r2, #0
 8002e26:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	2210      	movs	r2, #16
 8002e2e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
}
 8002e34:	4618      	mov	r0, r3
 8002e36:	3710      	adds	r7, #16
 8002e38:	46bd      	mov	sp, r7
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40013800 	.word	0x40013800

08002e44 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b084      	sub	sp, #16
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002e56:	68fa      	ldr	r2, [r7, #12]
 8002e58:	4b51      	ldr	r3, [pc, #324]	; (8002fa0 <ETH_SetMACConfig+0x15c>)
 8002e5a:	4013      	ands	r3, r2
 8002e5c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	7c1b      	ldrb	r3, [r3, #16]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d102      	bne.n	8002e6c <ETH_SetMACConfig+0x28>
 8002e66:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002e6a:	e000      	b.n	8002e6e <ETH_SetMACConfig+0x2a>
 8002e6c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	7c5b      	ldrb	r3, [r3, #17]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d102      	bne.n	8002e7c <ETH_SetMACConfig+0x38>
 8002e76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002e7a:	e000      	b.n	8002e7e <ETH_SetMACConfig+0x3a>
 8002e7c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e7e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e84:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e86:	683b      	ldr	r3, [r7, #0]
 8002e88:	7fdb      	ldrb	r3, [r3, #31]
 8002e8a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002e8c:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002e92:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	7f92      	ldrb	r2, [r2, #30]
 8002e98:	2a00      	cmp	r2, #0
 8002e9a:	d102      	bne.n	8002ea2 <ETH_SetMACConfig+0x5e>
 8002e9c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ea0:	e000      	b.n	8002ea4 <ETH_SetMACConfig+0x60>
 8002ea2:	2200      	movs	r2, #0
                        macconf->Speed |
 8002ea4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	7f1b      	ldrb	r3, [r3, #28]
 8002eaa:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002eac:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002eb2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	791b      	ldrb	r3, [r3, #4]
 8002eb8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002eba:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ebc:	683a      	ldr	r2, [r7, #0]
 8002ebe:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002ec2:	2a00      	cmp	r2, #0
 8002ec4:	d102      	bne.n	8002ecc <ETH_SetMACConfig+0x88>
 8002ec6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002eca:	e000      	b.n	8002ece <ETH_SetMACConfig+0x8a>
 8002ecc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ece:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	7bdb      	ldrb	r3, [r3, #15]
 8002ed4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ed6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002edc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002ee4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	68fa      	ldr	r2, [r7, #12]
 8002eea:	4313      	orrs	r3, r2
 8002eec:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	68fa      	ldr	r2, [r7, #12]
 8002ef4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002efe:	2001      	movs	r0, #1
 8002f00:	f7ff fd5a 	bl	80029b8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	68fa      	ldr	r2, [r7, #12]
 8002f0a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	699b      	ldr	r3, [r3, #24]
 8002f12:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f22:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002f2a:	2a00      	cmp	r2, #0
 8002f2c:	d101      	bne.n	8002f32 <ETH_SetMACConfig+0xee>
 8002f2e:	2280      	movs	r2, #128	; 0x80
 8002f30:	e000      	b.n	8002f34 <ETH_SetMACConfig+0xf0>
 8002f32:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f34:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f3a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f3c:	683a      	ldr	r2, [r7, #0]
 8002f3e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002f42:	2a01      	cmp	r2, #1
 8002f44:	d101      	bne.n	8002f4a <ETH_SetMACConfig+0x106>
 8002f46:	2208      	movs	r2, #8
 8002f48:	e000      	b.n	8002f4c <ETH_SetMACConfig+0x108>
 8002f4a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002f4c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002f4e:	683a      	ldr	r2, [r7, #0]
 8002f50:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002f54:	2a01      	cmp	r2, #1
 8002f56:	d101      	bne.n	8002f5c <ETH_SetMACConfig+0x118>
 8002f58:	2204      	movs	r2, #4
 8002f5a:	e000      	b.n	8002f5e <ETH_SetMACConfig+0x11a>
 8002f5c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f5e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002f60:	683a      	ldr	r2, [r7, #0]
 8002f62:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002f66:	2a01      	cmp	r2, #1
 8002f68:	d101      	bne.n	8002f6e <ETH_SetMACConfig+0x12a>
 8002f6a:	2202      	movs	r2, #2
 8002f6c:	e000      	b.n	8002f70 <ETH_SetMACConfig+0x12c>
 8002f6e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f70:	4313      	orrs	r3, r2
 8002f72:	68fa      	ldr	r2, [r7, #12]
 8002f74:	4313      	orrs	r3, r2
 8002f76:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	68fa      	ldr	r2, [r7, #12]
 8002f7e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	699b      	ldr	r3, [r3, #24]
 8002f86:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f88:	2001      	movs	r0, #1
 8002f8a:	f7ff fd15 	bl	80029b8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68fa      	ldr	r2, [r7, #12]
 8002f94:	619a      	str	r2, [r3, #24]
}
 8002f96:	bf00      	nop
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}
 8002f9e:	bf00      	nop
 8002fa0:	ff20810f 	.word	0xff20810f

08002fa4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
 8002fac:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002fba:	68fa      	ldr	r2, [r7, #12]
 8002fbc:	4b3d      	ldr	r3, [pc, #244]	; (80030b4 <ETH_SetDMAConfig+0x110>)
 8002fbe:	4013      	ands	r3, r2
 8002fc0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	7b1b      	ldrb	r3, [r3, #12]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d102      	bne.n	8002fd0 <ETH_SetDMAConfig+0x2c>
 8002fca:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002fce:	e000      	b.n	8002fd2 <ETH_SetDMAConfig+0x2e>
 8002fd0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002fd2:	683b      	ldr	r3, [r7, #0]
 8002fd4:	7b5b      	ldrb	r3, [r3, #13]
 8002fd6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fd8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002fda:	683a      	ldr	r2, [r7, #0]
 8002fdc:	7f52      	ldrb	r2, [r2, #29]
 8002fde:	2a00      	cmp	r2, #0
 8002fe0:	d102      	bne.n	8002fe8 <ETH_SetDMAConfig+0x44>
 8002fe2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002fe6:	e000      	b.n	8002fea <ETH_SetDMAConfig+0x46>
 8002fe8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002fea:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	7b9b      	ldrb	r3, [r3, #14]
 8002ff0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002ff2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002ff8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	7f1b      	ldrb	r3, [r3, #28]
 8002ffe:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8003000:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	7f9b      	ldrb	r3, [r3, #30]
 8003006:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003008:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800300e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003016:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003018:	4313      	orrs	r3, r2
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	4313      	orrs	r3, r2
 800301e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003028:	461a      	mov	r2, r3
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003036:	699b      	ldr	r3, [r3, #24]
 8003038:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800303a:	2001      	movs	r0, #1
 800303c:	f7ff fcbc 	bl	80029b8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003048:	461a      	mov	r2, r3
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	791b      	ldrb	r3, [r3, #4]
 8003052:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003054:	683b      	ldr	r3, [r7, #0]
 8003056:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003058:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800305e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003064:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003066:	683b      	ldr	r3, [r7, #0]
 8003068:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800306c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800306e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003074:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003076:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800307c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800307e:	687a      	ldr	r2, [r7, #4]
 8003080:	6812      	ldr	r2, [r2, #0]
 8003082:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003086:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800308a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003098:	2001      	movs	r0, #1
 800309a:	f7ff fc8d 	bl	80029b8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030a6:	461a      	mov	r2, r3
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6013      	str	r3, [r2, #0]
}
 80030ac:	bf00      	nop
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}
 80030b4:	f8de3f23 	.word	0xf8de3f23

080030b8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b0a6      	sub	sp, #152	; 0x98
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80030c0:	2301      	movs	r3, #1
 80030c2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80030c6:	2301      	movs	r3, #1
 80030c8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80030cc:	2300      	movs	r3, #0
 80030ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80030d0:	2300      	movs	r3, #0
 80030d2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80030d6:	2301      	movs	r3, #1
 80030d8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80030dc:	2300      	movs	r3, #0
 80030de:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 80030e2:	2301      	movs	r3, #1
 80030e4:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80030e8:	2300      	movs	r3, #0
 80030ea:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80030ee:	2300      	movs	r3, #0
 80030f0:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80030f4:	2300      	movs	r3, #0
 80030f6:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80030f8:	2300      	movs	r3, #0
 80030fa:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80030fe:	2300      	movs	r3, #0
 8003100:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8003102:	2300      	movs	r3, #0
 8003104:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003108:	2300      	movs	r3, #0
 800310a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800310e:	2300      	movs	r3, #0
 8003110:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003114:	2300      	movs	r3, #0
 8003116:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800311a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800311e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8003120:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003124:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003126:	2300      	movs	r3, #0
 8003128:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800312c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003130:	4619      	mov	r1, r3
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7ff fe86 	bl	8002e44 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003138:	2301      	movs	r3, #1
 800313a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800313c:	2301      	movs	r3, #1
 800313e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8003140:	2301      	movs	r3, #1
 8003142:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003146:	2301      	movs	r3, #1
 8003148:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800314a:	2300      	movs	r3, #0
 800314c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800314e:	2300      	movs	r3, #0
 8003150:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003154:	2300      	movs	r3, #0
 8003156:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800315a:	2300      	movs	r3, #0
 800315c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800315e:	2301      	movs	r3, #1
 8003160:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003164:	2301      	movs	r3, #1
 8003166:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003168:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800316c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800316e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003172:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8003174:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003178:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800317a:	2301      	movs	r3, #1
 800317c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8003180:	2300      	movs	r3, #0
 8003182:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8003184:	2300      	movs	r3, #0
 8003186:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8003188:	f107 0308 	add.w	r3, r7, #8
 800318c:	4619      	mov	r1, r3
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff ff08 	bl	8002fa4 <ETH_SetDMAConfig>
}
 8003194:	bf00      	nop
 8003196:	3798      	adds	r7, #152	; 0x98
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 800319c:	b480      	push	{r7}
 800319e:	b087      	sub	sp, #28
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	60f8      	str	r0, [r7, #12]
 80031a4:	60b9      	str	r1, [r7, #8]
 80031a6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3305      	adds	r3, #5
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	021b      	lsls	r3, r3, #8
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	3204      	adds	r2, #4
 80031b4:	7812      	ldrb	r2, [r2, #0]
 80031b6:	4313      	orrs	r3, r2
 80031b8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80031ba:	68ba      	ldr	r2, [r7, #8]
 80031bc:	4b11      	ldr	r3, [pc, #68]	; (8003204 <ETH_MACAddressConfig+0x68>)
 80031be:	4413      	add	r3, r2
 80031c0:	461a      	mov	r2, r3
 80031c2:	697b      	ldr	r3, [r7, #20]
 80031c4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	3303      	adds	r3, #3
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	061a      	lsls	r2, r3, #24
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	3302      	adds	r3, #2
 80031d2:	781b      	ldrb	r3, [r3, #0]
 80031d4:	041b      	lsls	r3, r3, #16
 80031d6:	431a      	orrs	r2, r3
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	3301      	adds	r3, #1
 80031dc:	781b      	ldrb	r3, [r3, #0]
 80031de:	021b      	lsls	r3, r3, #8
 80031e0:	4313      	orrs	r3, r2
 80031e2:	687a      	ldr	r2, [r7, #4]
 80031e4:	7812      	ldrb	r2, [r2, #0]
 80031e6:	4313      	orrs	r3, r2
 80031e8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80031ea:	68ba      	ldr	r2, [r7, #8]
 80031ec:	4b06      	ldr	r3, [pc, #24]	; (8003208 <ETH_MACAddressConfig+0x6c>)
 80031ee:	4413      	add	r3, r2
 80031f0:	461a      	mov	r2, r3
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	6013      	str	r3, [r2, #0]
}
 80031f6:	bf00      	nop
 80031f8:	371c      	adds	r7, #28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40028040 	.word	0x40028040
 8003208:	40028044 	.word	0x40028044

0800320c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800320c:	b480      	push	{r7}
 800320e:	b085      	sub	sp, #20
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003214:	2300      	movs	r3, #0
 8003216:	60fb      	str	r3, [r7, #12]
 8003218:	e03e      	b.n	8003298 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	68d9      	ldr	r1, [r3, #12]
 800321e:	68fa      	ldr	r2, [r7, #12]
 8003220:	4613      	mov	r3, r2
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	4413      	add	r3, r2
 8003226:	00db      	lsls	r3, r3, #3
 8003228:	440b      	add	r3, r1
 800322a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800322c:	68bb      	ldr	r3, [r7, #8]
 800322e:	2200      	movs	r2, #0
 8003230:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	2200      	movs	r2, #0
 8003236:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003238:	68bb      	ldr	r3, [r7, #8]
 800323a:	2200      	movs	r2, #0
 800323c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	2200      	movs	r2, #0
 8003242:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68fa      	ldr	r2, [r7, #12]
 800324a:	3206      	adds	r2, #6
 800324c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	681b      	ldr	r3, [r3, #0]
 8003254:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2b02      	cmp	r3, #2
 8003260:	d80c      	bhi.n	800327c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	68d9      	ldr	r1, [r3, #12]
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	1c5a      	adds	r2, r3, #1
 800326a:	4613      	mov	r3, r2
 800326c:	009b      	lsls	r3, r3, #2
 800326e:	4413      	add	r3, r2
 8003270:	00db      	lsls	r3, r3, #3
 8003272:	440b      	add	r3, r1
 8003274:	461a      	mov	r2, r3
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	60da      	str	r2, [r3, #12]
 800327a:	e004      	b.n	8003286 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	68db      	ldr	r3, [r3, #12]
 8003280:	461a      	mov	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8003286:	68bb      	ldr	r3, [r7, #8]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 800328e:	68bb      	ldr	r3, [r7, #8]
 8003290:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	3301      	adds	r3, #1
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2b03      	cmp	r3, #3
 800329c:	d9bd      	bls.n	800321a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	2200      	movs	r2, #0
 80032a2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	68da      	ldr	r2, [r3, #12]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032b0:	611a      	str	r2, [r3, #16]
}
 80032b2:	bf00      	nop
 80032b4:	3714      	adds	r7, #20
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr

080032be <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80032be:	b480      	push	{r7}
 80032c0:	b085      	sub	sp, #20
 80032c2:	af00      	add	r7, sp, #0
 80032c4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032c6:	2300      	movs	r3, #0
 80032c8:	60fb      	str	r3, [r7, #12]
 80032ca:	e046      	b.n	800335a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6919      	ldr	r1, [r3, #16]
 80032d0:	68fa      	ldr	r2, [r7, #12]
 80032d2:	4613      	mov	r3, r2
 80032d4:	009b      	lsls	r3, r3, #2
 80032d6:	4413      	add	r3, r2
 80032d8:	00db      	lsls	r3, r3, #3
 80032da:	440b      	add	r3, r1
 80032dc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2200      	movs	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80032e4:	68bb      	ldr	r3, [r7, #8]
 80032e6:	2200      	movs	r2, #0
 80032e8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	2200      	movs	r2, #0
 80032ee:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80032f0:	68bb      	ldr	r3, [r7, #8]
 80032f2:	2200      	movs	r2, #0
 80032f4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80032f6:	68bb      	ldr	r3, [r7, #8]
 80032f8:	2200      	movs	r2, #0
 80032fa:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	2200      	movs	r2, #0
 8003300:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8003302:	68bb      	ldr	r3, [r7, #8]
 8003304:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003308:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	f244 52f8 	movw	r2, #17912	; 0x45f8
 8003310:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800331a:	68bb      	ldr	r3, [r7, #8]
 800331c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800331e:	68b9      	ldr	r1, [r7, #8]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	68fa      	ldr	r2, [r7, #12]
 8003324:	3212      	adds	r2, #18
 8003326:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	2b02      	cmp	r3, #2
 800332e:	d80c      	bhi.n	800334a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6919      	ldr	r1, [r3, #16]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	1c5a      	adds	r2, r3, #1
 8003338:	4613      	mov	r3, r2
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	440b      	add	r3, r1
 8003342:	461a      	mov	r2, r3
 8003344:	68bb      	ldr	r3, [r7, #8]
 8003346:	60da      	str	r2, [r3, #12]
 8003348:	e004      	b.n	8003354 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	461a      	mov	r2, r3
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	3301      	adds	r3, #1
 8003358:	60fb      	str	r3, [r7, #12]
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	2b03      	cmp	r3, #3
 800335e:	d9b5      	bls.n	80032cc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2200      	movs	r2, #0
 8003376:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2200      	movs	r2, #0
 800337c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	691a      	ldr	r2, [r3, #16]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800338a:	60da      	str	r2, [r3, #12]
}
 800338c:	bf00      	nop
 800338e:	3714      	adds	r7, #20
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b086      	sub	sp, #24
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80033aa:	4b23      	ldr	r3, [pc, #140]	; (8003438 <HAL_FLASH_Program+0xa0>)
 80033ac:	7e1b      	ldrb	r3, [r3, #24]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d101      	bne.n	80033b6 <HAL_FLASH_Program+0x1e>
 80033b2:	2302      	movs	r3, #2
 80033b4:	e03b      	b.n	800342e <HAL_FLASH_Program+0x96>
 80033b6:	4b20      	ldr	r3, [pc, #128]	; (8003438 <HAL_FLASH_Program+0xa0>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80033bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80033c0:	f000 f860 	bl	8003484 <FLASH_WaitForLastOperation>
 80033c4:	4603      	mov	r3, r0
 80033c6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80033c8:	7dfb      	ldrb	r3, [r7, #23]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d12b      	bne.n	8003426 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d105      	bne.n	80033e0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80033d4:	783b      	ldrb	r3, [r7, #0]
 80033d6:	4619      	mov	r1, r3
 80033d8:	68b8      	ldr	r0, [r7, #8]
 80033da:	f000 f90b 	bl	80035f4 <FLASH_Program_Byte>
 80033de:	e016      	b.n	800340e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d105      	bne.n	80033f2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80033e6:	883b      	ldrh	r3, [r7, #0]
 80033e8:	4619      	mov	r1, r3
 80033ea:	68b8      	ldr	r0, [r7, #8]
 80033ec:	f000 f8de 	bl	80035ac <FLASH_Program_HalfWord>
 80033f0:	e00d      	b.n	800340e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d105      	bne.n	8003404 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	4619      	mov	r1, r3
 80033fc:	68b8      	ldr	r0, [r7, #8]
 80033fe:	f000 f8b3 	bl	8003568 <FLASH_Program_Word>
 8003402:	e004      	b.n	800340e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003404:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003408:	68b8      	ldr	r0, [r7, #8]
 800340a:	f000 f87b 	bl	8003504 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800340e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003412:	f000 f837 	bl	8003484 <FLASH_WaitForLastOperation>
 8003416:	4603      	mov	r3, r0
 8003418:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 800341a:	4b08      	ldr	r3, [pc, #32]	; (800343c <HAL_FLASH_Program+0xa4>)
 800341c:	691b      	ldr	r3, [r3, #16]
 800341e:	4a07      	ldr	r2, [pc, #28]	; (800343c <HAL_FLASH_Program+0xa4>)
 8003420:	f023 0301 	bic.w	r3, r3, #1
 8003424:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003426:	4b04      	ldr	r3, [pc, #16]	; (8003438 <HAL_FLASH_Program+0xa0>)
 8003428:	2200      	movs	r2, #0
 800342a:	761a      	strb	r2, [r3, #24]
  
  return status;
 800342c:	7dfb      	ldrb	r3, [r7, #23]
}
 800342e:	4618      	mov	r0, r3
 8003430:	3718      	adds	r7, #24
 8003432:	46bd      	mov	sp, r7
 8003434:	bd80      	pop	{r7, pc}
 8003436:	bf00      	nop
 8003438:	200023cc 	.word	0x200023cc
 800343c:	40023c00 	.word	0x40023c00

08003440 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003446:	2300      	movs	r3, #0
 8003448:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800344a:	4b0b      	ldr	r3, [pc, #44]	; (8003478 <HAL_FLASH_Unlock+0x38>)
 800344c:	691b      	ldr	r3, [r3, #16]
 800344e:	2b00      	cmp	r3, #0
 8003450:	da0b      	bge.n	800346a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8003452:	4b09      	ldr	r3, [pc, #36]	; (8003478 <HAL_FLASH_Unlock+0x38>)
 8003454:	4a09      	ldr	r2, [pc, #36]	; (800347c <HAL_FLASH_Unlock+0x3c>)
 8003456:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003458:	4b07      	ldr	r3, [pc, #28]	; (8003478 <HAL_FLASH_Unlock+0x38>)
 800345a:	4a09      	ldr	r2, [pc, #36]	; (8003480 <HAL_FLASH_Unlock+0x40>)
 800345c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800345e:	4b06      	ldr	r3, [pc, #24]	; (8003478 <HAL_FLASH_Unlock+0x38>)
 8003460:	691b      	ldr	r3, [r3, #16]
 8003462:	2b00      	cmp	r3, #0
 8003464:	da01      	bge.n	800346a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800346a:	79fb      	ldrb	r3, [r7, #7]
}
 800346c:	4618      	mov	r0, r3
 800346e:	370c      	adds	r7, #12
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	40023c00 	.word	0x40023c00
 800347c:	45670123 	.word	0x45670123
 8003480:	cdef89ab 	.word	0xcdef89ab

08003484 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8003484:	b580      	push	{r7, lr}
 8003486:	b084      	sub	sp, #16
 8003488:	af00      	add	r7, sp, #0
 800348a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800348c:	2300      	movs	r3, #0
 800348e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003490:	4b1a      	ldr	r3, [pc, #104]	; (80034fc <FLASH_WaitForLastOperation+0x78>)
 8003492:	2200      	movs	r2, #0
 8003494:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8003496:	f7ff fa83 	bl	80029a0 <HAL_GetTick>
 800349a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800349c:	e010      	b.n	80034c0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034a4:	d00c      	beq.n	80034c0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d007      	beq.n	80034bc <FLASH_WaitForLastOperation+0x38>
 80034ac:	f7ff fa78 	bl	80029a0 <HAL_GetTick>
 80034b0:	4602      	mov	r2, r0
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	1ad3      	subs	r3, r2, r3
 80034b6:	687a      	ldr	r2, [r7, #4]
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d201      	bcs.n	80034c0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80034bc:	2303      	movs	r3, #3
 80034be:	e019      	b.n	80034f4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80034c0:	4b0f      	ldr	r3, [pc, #60]	; (8003500 <FLASH_WaitForLastOperation+0x7c>)
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1e8      	bne.n	800349e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80034cc:	4b0c      	ldr	r3, [pc, #48]	; (8003500 <FLASH_WaitForLastOperation+0x7c>)
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d002      	beq.n	80034de <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80034d8:	4b09      	ldr	r3, [pc, #36]	; (8003500 <FLASH_WaitForLastOperation+0x7c>)
 80034da:	2201      	movs	r2, #1
 80034dc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80034de:	4b08      	ldr	r3, [pc, #32]	; (8003500 <FLASH_WaitForLastOperation+0x7c>)
 80034e0:	68db      	ldr	r3, [r3, #12]
 80034e2:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d003      	beq.n	80034f2 <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80034ea:	f000 f8a5 	bl	8003638 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80034ee:	2301      	movs	r3, #1
 80034f0:	e000      	b.n	80034f4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80034f2:	2300      	movs	r3, #0
  
}  
 80034f4:	4618      	mov	r0, r3
 80034f6:	3710      	adds	r7, #16
 80034f8:	46bd      	mov	sp, r7
 80034fa:	bd80      	pop	{r7, pc}
 80034fc:	200023cc 	.word	0x200023cc
 8003500:	40023c00 	.word	0x40023c00

08003504 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003504:	b480      	push	{r7}
 8003506:	b085      	sub	sp, #20
 8003508:	af00      	add	r7, sp, #0
 800350a:	60f8      	str	r0, [r7, #12]
 800350c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003510:	4b14      	ldr	r3, [pc, #80]	; (8003564 <FLASH_Program_DoubleWord+0x60>)
 8003512:	691b      	ldr	r3, [r3, #16]
 8003514:	4a13      	ldr	r2, [pc, #76]	; (8003564 <FLASH_Program_DoubleWord+0x60>)
 8003516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800351a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800351c:	4b11      	ldr	r3, [pc, #68]	; (8003564 <FLASH_Program_DoubleWord+0x60>)
 800351e:	691b      	ldr	r3, [r3, #16]
 8003520:	4a10      	ldr	r2, [pc, #64]	; (8003564 <FLASH_Program_DoubleWord+0x60>)
 8003522:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003526:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003528:	4b0e      	ldr	r3, [pc, #56]	; (8003564 <FLASH_Program_DoubleWord+0x60>)
 800352a:	691b      	ldr	r3, [r3, #16]
 800352c:	4a0d      	ldr	r2, [pc, #52]	; (8003564 <FLASH_Program_DoubleWord+0x60>)
 800352e:	f043 0301 	orr.w	r3, r3, #1
 8003532:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	683a      	ldr	r2, [r7, #0]
 8003538:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 800353a:	f3bf 8f6f 	isb	sy
}
 800353e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8003540:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003544:	f04f 0200 	mov.w	r2, #0
 8003548:	f04f 0300 	mov.w	r3, #0
 800354c:	000a      	movs	r2, r1
 800354e:	2300      	movs	r3, #0
 8003550:	68f9      	ldr	r1, [r7, #12]
 8003552:	3104      	adds	r1, #4
 8003554:	4613      	mov	r3, r2
 8003556:	600b      	str	r3, [r1, #0]
}
 8003558:	bf00      	nop
 800355a:	3714      	adds	r7, #20
 800355c:	46bd      	mov	sp, r7
 800355e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003562:	4770      	bx	lr
 8003564:	40023c00 	.word	0x40023c00

08003568 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003568:	b480      	push	{r7}
 800356a:	b083      	sub	sp, #12
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
 8003570:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003572:	4b0d      	ldr	r3, [pc, #52]	; (80035a8 <FLASH_Program_Word+0x40>)
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	4a0c      	ldr	r2, [pc, #48]	; (80035a8 <FLASH_Program_Word+0x40>)
 8003578:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800357c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800357e:	4b0a      	ldr	r3, [pc, #40]	; (80035a8 <FLASH_Program_Word+0x40>)
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	4a09      	ldr	r2, [pc, #36]	; (80035a8 <FLASH_Program_Word+0x40>)
 8003584:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003588:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800358a:	4b07      	ldr	r3, [pc, #28]	; (80035a8 <FLASH_Program_Word+0x40>)
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	4a06      	ldr	r2, [pc, #24]	; (80035a8 <FLASH_Program_Word+0x40>)
 8003590:	f043 0301 	orr.w	r3, r3, #1
 8003594:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	683a      	ldr	r2, [r7, #0]
 800359a:	601a      	str	r2, [r3, #0]
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr
 80035a8:	40023c00 	.word	0x40023c00

080035ac <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
 80035b4:	460b      	mov	r3, r1
 80035b6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80035b8:	4b0d      	ldr	r3, [pc, #52]	; (80035f0 <FLASH_Program_HalfWord+0x44>)
 80035ba:	691b      	ldr	r3, [r3, #16]
 80035bc:	4a0c      	ldr	r2, [pc, #48]	; (80035f0 <FLASH_Program_HalfWord+0x44>)
 80035be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80035c4:	4b0a      	ldr	r3, [pc, #40]	; (80035f0 <FLASH_Program_HalfWord+0x44>)
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	4a09      	ldr	r2, [pc, #36]	; (80035f0 <FLASH_Program_HalfWord+0x44>)
 80035ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80035d0:	4b07      	ldr	r3, [pc, #28]	; (80035f0 <FLASH_Program_HalfWord+0x44>)
 80035d2:	691b      	ldr	r3, [r3, #16]
 80035d4:	4a06      	ldr	r2, [pc, #24]	; (80035f0 <FLASH_Program_HalfWord+0x44>)
 80035d6:	f043 0301 	orr.w	r3, r3, #1
 80035da:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	887a      	ldrh	r2, [r7, #2]
 80035e0:	801a      	strh	r2, [r3, #0]
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr
 80035ee:	bf00      	nop
 80035f0:	40023c00 	.word	0x40023c00

080035f4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80035f4:	b480      	push	{r7}
 80035f6:	b083      	sub	sp, #12
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
 80035fc:	460b      	mov	r3, r1
 80035fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003600:	4b0c      	ldr	r3, [pc, #48]	; (8003634 <FLASH_Program_Byte+0x40>)
 8003602:	691b      	ldr	r3, [r3, #16]
 8003604:	4a0b      	ldr	r2, [pc, #44]	; (8003634 <FLASH_Program_Byte+0x40>)
 8003606:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800360a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800360c:	4b09      	ldr	r3, [pc, #36]	; (8003634 <FLASH_Program_Byte+0x40>)
 800360e:	4a09      	ldr	r2, [pc, #36]	; (8003634 <FLASH_Program_Byte+0x40>)
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003614:	4b07      	ldr	r3, [pc, #28]	; (8003634 <FLASH_Program_Byte+0x40>)
 8003616:	691b      	ldr	r3, [r3, #16]
 8003618:	4a06      	ldr	r2, [pc, #24]	; (8003634 <FLASH_Program_Byte+0x40>)
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	78fa      	ldrb	r2, [r7, #3]
 8003624:	701a      	strb	r2, [r3, #0]
}
 8003626:	bf00      	nop
 8003628:	370c      	adds	r7, #12
 800362a:	46bd      	mov	sp, r7
 800362c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003630:	4770      	bx	lr
 8003632:	bf00      	nop
 8003634:	40023c00 	.word	0x40023c00

08003638 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003638:	b480      	push	{r7}
 800363a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800363c:	4b2f      	ldr	r3, [pc, #188]	; (80036fc <FLASH_SetErrorCode+0xc4>)
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	f003 0310 	and.w	r3, r3, #16
 8003644:	2b00      	cmp	r3, #0
 8003646:	d008      	beq.n	800365a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003648:	4b2d      	ldr	r3, [pc, #180]	; (8003700 <FLASH_SetErrorCode+0xc8>)
 800364a:	69db      	ldr	r3, [r3, #28]
 800364c:	f043 0310 	orr.w	r3, r3, #16
 8003650:	4a2b      	ldr	r2, [pc, #172]	; (8003700 <FLASH_SetErrorCode+0xc8>)
 8003652:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003654:	4b29      	ldr	r3, [pc, #164]	; (80036fc <FLASH_SetErrorCode+0xc4>)
 8003656:	2210      	movs	r2, #16
 8003658:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800365a:	4b28      	ldr	r3, [pc, #160]	; (80036fc <FLASH_SetErrorCode+0xc4>)
 800365c:	68db      	ldr	r3, [r3, #12]
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	d008      	beq.n	8003678 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003666:	4b26      	ldr	r3, [pc, #152]	; (8003700 <FLASH_SetErrorCode+0xc8>)
 8003668:	69db      	ldr	r3, [r3, #28]
 800366a:	f043 0308 	orr.w	r3, r3, #8
 800366e:	4a24      	ldr	r2, [pc, #144]	; (8003700 <FLASH_SetErrorCode+0xc8>)
 8003670:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8003672:	4b22      	ldr	r3, [pc, #136]	; (80036fc <FLASH_SetErrorCode+0xc4>)
 8003674:	2220      	movs	r2, #32
 8003676:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8003678:	4b20      	ldr	r3, [pc, #128]	; (80036fc <FLASH_SetErrorCode+0xc4>)
 800367a:	68db      	ldr	r3, [r3, #12]
 800367c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003680:	2b00      	cmp	r3, #0
 8003682:	d008      	beq.n	8003696 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8003684:	4b1e      	ldr	r3, [pc, #120]	; (8003700 <FLASH_SetErrorCode+0xc8>)
 8003686:	69db      	ldr	r3, [r3, #28]
 8003688:	f043 0304 	orr.w	r3, r3, #4
 800368c:	4a1c      	ldr	r2, [pc, #112]	; (8003700 <FLASH_SetErrorCode+0xc8>)
 800368e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8003690:	4b1a      	ldr	r3, [pc, #104]	; (80036fc <FLASH_SetErrorCode+0xc4>)
 8003692:	2240      	movs	r2, #64	; 0x40
 8003694:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8003696:	4b19      	ldr	r3, [pc, #100]	; (80036fc <FLASH_SetErrorCode+0xc4>)
 8003698:	68db      	ldr	r3, [r3, #12]
 800369a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d008      	beq.n	80036b4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80036a2:	4b17      	ldr	r3, [pc, #92]	; (8003700 <FLASH_SetErrorCode+0xc8>)
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f043 0302 	orr.w	r3, r3, #2
 80036aa:	4a15      	ldr	r2, [pc, #84]	; (8003700 <FLASH_SetErrorCode+0xc8>)
 80036ac:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80036ae:	4b13      	ldr	r3, [pc, #76]	; (80036fc <FLASH_SetErrorCode+0xc4>)
 80036b0:	2280      	movs	r2, #128	; 0x80
 80036b2:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80036b4:	4b11      	ldr	r3, [pc, #68]	; (80036fc <FLASH_SetErrorCode+0xc4>)
 80036b6:	68db      	ldr	r3, [r3, #12]
 80036b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d009      	beq.n	80036d4 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80036c0:	4b0f      	ldr	r3, [pc, #60]	; (8003700 <FLASH_SetErrorCode+0xc8>)
 80036c2:	69db      	ldr	r3, [r3, #28]
 80036c4:	f043 0301 	orr.w	r3, r3, #1
 80036c8:	4a0d      	ldr	r2, [pc, #52]	; (8003700 <FLASH_SetErrorCode+0xc8>)
 80036ca:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80036cc:	4b0b      	ldr	r3, [pc, #44]	; (80036fc <FLASH_SetErrorCode+0xc4>)
 80036ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036d2:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80036d4:	4b09      	ldr	r3, [pc, #36]	; (80036fc <FLASH_SetErrorCode+0xc4>)
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d008      	beq.n	80036f2 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80036e0:	4b07      	ldr	r3, [pc, #28]	; (8003700 <FLASH_SetErrorCode+0xc8>)
 80036e2:	69db      	ldr	r3, [r3, #28]
 80036e4:	f043 0320 	orr.w	r3, r3, #32
 80036e8:	4a05      	ldr	r2, [pc, #20]	; (8003700 <FLASH_SetErrorCode+0xc8>)
 80036ea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80036ec:	4b03      	ldr	r3, [pc, #12]	; (80036fc <FLASH_SetErrorCode+0xc4>)
 80036ee:	2202      	movs	r2, #2
 80036f0:	60da      	str	r2, [r3, #12]
  }
}
 80036f2:	bf00      	nop
 80036f4:	46bd      	mov	sp, r7
 80036f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036fa:	4770      	bx	lr
 80036fc:	40023c00 	.word	0x40023c00
 8003700:	200023cc 	.word	0x200023cc

08003704 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b084      	sub	sp, #16
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8003712:	2300      	movs	r3, #0
 8003714:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003716:	4b32      	ldr	r3, [pc, #200]	; (80037e0 <HAL_FLASHEx_Erase+0xdc>)
 8003718:	7e1b      	ldrb	r3, [r3, #24]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d101      	bne.n	8003722 <HAL_FLASHEx_Erase+0x1e>
 800371e:	2302      	movs	r3, #2
 8003720:	e05a      	b.n	80037d8 <HAL_FLASHEx_Erase+0xd4>
 8003722:	4b2f      	ldr	r3, [pc, #188]	; (80037e0 <HAL_FLASHEx_Erase+0xdc>)
 8003724:	2201      	movs	r2, #1
 8003726:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003728:	f24c 3050 	movw	r0, #50000	; 0xc350
 800372c:	f7ff feaa 	bl	8003484 <FLASH_WaitForLastOperation>
 8003730:	4603      	mov	r3, r0
 8003732:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003734:	7bfb      	ldrb	r3, [r7, #15]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d14a      	bne.n	80037d0 <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	f04f 32ff 	mov.w	r2, #4294967295
 8003740:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d117      	bne.n	800377a <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	691b      	ldr	r3, [r3, #16]
 800374e:	b2da      	uxtb	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4619      	mov	r1, r3
 8003756:	4610      	mov	r0, r2
 8003758:	f000 f846 	bl	80037e8 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800375c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003760:	f7ff fe90 	bl	8003484 <FLASH_WaitForLastOperation>
 8003764:	4603      	mov	r3, r0
 8003766:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003768:	4b1e      	ldr	r3, [pc, #120]	; (80037e4 <HAL_FLASHEx_Erase+0xe0>)
 800376a:	691b      	ldr	r3, [r3, #16]
 800376c:	4a1d      	ldr	r2, [pc, #116]	; (80037e4 <HAL_FLASHEx_Erase+0xe0>)
 800376e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8003772:	f023 0304 	bic.w	r3, r3, #4
 8003776:	6113      	str	r3, [r2, #16]
 8003778:	e028      	b.n	80037cc <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	60bb      	str	r3, [r7, #8]
 8003780:	e01c      	b.n	80037bc <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	691b      	ldr	r3, [r3, #16]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	4619      	mov	r1, r3
 800378a:	68b8      	ldr	r0, [r7, #8]
 800378c:	f000 f866 	bl	800385c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003790:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003794:	f7ff fe76 	bl	8003484 <FLASH_WaitForLastOperation>
 8003798:	4603      	mov	r3, r0
 800379a:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 800379c:	4b11      	ldr	r3, [pc, #68]	; (80037e4 <HAL_FLASHEx_Erase+0xe0>)
 800379e:	691b      	ldr	r3, [r3, #16]
 80037a0:	4a10      	ldr	r2, [pc, #64]	; (80037e4 <HAL_FLASHEx_Erase+0xe0>)
 80037a2:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80037a6:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	68ba      	ldr	r2, [r7, #8]
 80037b2:	601a      	str	r2, [r3, #0]
          break;
 80037b4:	e00a      	b.n	80037cc <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	3301      	adds	r3, #1
 80037ba:	60bb      	str	r3, [r7, #8]
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68da      	ldr	r2, [r3, #12]
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	4413      	add	r3, r2
 80037c6:	68ba      	ldr	r2, [r7, #8]
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d3da      	bcc.n	8003782 <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80037cc:	f000 f894 	bl	80038f8 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80037d0:	4b03      	ldr	r3, [pc, #12]	; (80037e0 <HAL_FLASHEx_Erase+0xdc>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	761a      	strb	r2, [r3, #24]

  return status;
 80037d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80037d8:	4618      	mov	r0, r3
 80037da:	3710      	adds	r7, #16
 80037dc:	46bd      	mov	sp, r7
 80037de:	bd80      	pop	{r7, pc}
 80037e0:	200023cc 	.word	0x200023cc
 80037e4:	40023c00 	.word	0x40023c00

080037e8 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	4603      	mov	r3, r0
 80037f0:	6039      	str	r1, [r7, #0]
 80037f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80037f4:	4b18      	ldr	r3, [pc, #96]	; (8003858 <FLASH_MassErase+0x70>)
 80037f6:	691b      	ldr	r3, [r3, #16]
 80037f8:	4a17      	ldr	r2, [pc, #92]	; (8003858 <FLASH_MassErase+0x70>)
 80037fa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037fe:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	2b03      	cmp	r3, #3
 8003804:	d108      	bne.n	8003818 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8003806:	4b14      	ldr	r3, [pc, #80]	; (8003858 <FLASH_MassErase+0x70>)
 8003808:	691b      	ldr	r3, [r3, #16]
 800380a:	4a13      	ldr	r2, [pc, #76]	; (8003858 <FLASH_MassErase+0x70>)
 800380c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003810:	f043 0304 	orr.w	r3, r3, #4
 8003814:	6113      	str	r3, [r2, #16]
 8003816:	e00f      	b.n	8003838 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	2b01      	cmp	r3, #1
 800381c:	d106      	bne.n	800382c <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 800381e:	4b0e      	ldr	r3, [pc, #56]	; (8003858 <FLASH_MassErase+0x70>)
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	4a0d      	ldr	r2, [pc, #52]	; (8003858 <FLASH_MassErase+0x70>)
 8003824:	f043 0304 	orr.w	r3, r3, #4
 8003828:	6113      	str	r3, [r2, #16]
 800382a:	e005      	b.n	8003838 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 800382c:	4b0a      	ldr	r3, [pc, #40]	; (8003858 <FLASH_MassErase+0x70>)
 800382e:	691b      	ldr	r3, [r3, #16]
 8003830:	4a09      	ldr	r2, [pc, #36]	; (8003858 <FLASH_MassErase+0x70>)
 8003832:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003836:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003838:	4b07      	ldr	r3, [pc, #28]	; (8003858 <FLASH_MassErase+0x70>)
 800383a:	691a      	ldr	r2, [r3, #16]
 800383c:	79fb      	ldrb	r3, [r7, #7]
 800383e:	021b      	lsls	r3, r3, #8
 8003840:	4313      	orrs	r3, r2
 8003842:	4a05      	ldr	r2, [pc, #20]	; (8003858 <FLASH_MassErase+0x70>)
 8003844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003848:	6113      	str	r3, [r2, #16]
}
 800384a:	bf00      	nop
 800384c:	370c      	adds	r7, #12
 800384e:	46bd      	mov	sp, r7
 8003850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003854:	4770      	bx	lr
 8003856:	bf00      	nop
 8003858:	40023c00 	.word	0x40023c00

0800385c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800385c:	b480      	push	{r7}
 800385e:	b085      	sub	sp, #20
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
 8003864:	460b      	mov	r3, r1
 8003866:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003868:	2300      	movs	r3, #0
 800386a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800386c:	78fb      	ldrb	r3, [r7, #3]
 800386e:	2b00      	cmp	r3, #0
 8003870:	d102      	bne.n	8003878 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8003872:	2300      	movs	r3, #0
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	e010      	b.n	800389a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8003878:	78fb      	ldrb	r3, [r7, #3]
 800387a:	2b01      	cmp	r3, #1
 800387c:	d103      	bne.n	8003886 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800387e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	e009      	b.n	800389a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8003886:	78fb      	ldrb	r3, [r7, #3]
 8003888:	2b02      	cmp	r3, #2
 800388a:	d103      	bne.n	8003894 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800388c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003890:	60fb      	str	r3, [r7, #12]
 8003892:	e002      	b.n	800389a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8003894:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003898:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	2b0b      	cmp	r3, #11
 800389e:	d902      	bls.n	80038a6 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	3304      	adds	r3, #4
 80038a4:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80038a6:	4b13      	ldr	r3, [pc, #76]	; (80038f4 <FLASH_Erase_Sector+0x98>)
 80038a8:	691b      	ldr	r3, [r3, #16]
 80038aa:	4a12      	ldr	r2, [pc, #72]	; (80038f4 <FLASH_Erase_Sector+0x98>)
 80038ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80038b2:	4b10      	ldr	r3, [pc, #64]	; (80038f4 <FLASH_Erase_Sector+0x98>)
 80038b4:	691a      	ldr	r2, [r3, #16]
 80038b6:	490f      	ldr	r1, [pc, #60]	; (80038f4 <FLASH_Erase_Sector+0x98>)
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80038be:	4b0d      	ldr	r3, [pc, #52]	; (80038f4 <FLASH_Erase_Sector+0x98>)
 80038c0:	691b      	ldr	r3, [r3, #16]
 80038c2:	4a0c      	ldr	r2, [pc, #48]	; (80038f4 <FLASH_Erase_Sector+0x98>)
 80038c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80038ca:	4b0a      	ldr	r3, [pc, #40]	; (80038f4 <FLASH_Erase_Sector+0x98>)
 80038cc:	691a      	ldr	r2, [r3, #16]
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	00db      	lsls	r3, r3, #3
 80038d2:	4313      	orrs	r3, r2
 80038d4:	4a07      	ldr	r2, [pc, #28]	; (80038f4 <FLASH_Erase_Sector+0x98>)
 80038d6:	f043 0302 	orr.w	r3, r3, #2
 80038da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80038dc:	4b05      	ldr	r3, [pc, #20]	; (80038f4 <FLASH_Erase_Sector+0x98>)
 80038de:	691b      	ldr	r3, [r3, #16]
 80038e0:	4a04      	ldr	r2, [pc, #16]	; (80038f4 <FLASH_Erase_Sector+0x98>)
 80038e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038e6:	6113      	str	r3, [r2, #16]
}
 80038e8:	bf00      	nop
 80038ea:	3714      	adds	r7, #20
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	40023c00 	.word	0x40023c00

080038f8 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80038f8:	b480      	push	{r7}
 80038fa:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80038fc:	4b20      	ldr	r3, [pc, #128]	; (8003980 <FLASH_FlushCaches+0x88>)
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003904:	2b00      	cmp	r3, #0
 8003906:	d017      	beq.n	8003938 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003908:	4b1d      	ldr	r3, [pc, #116]	; (8003980 <FLASH_FlushCaches+0x88>)
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <FLASH_FlushCaches+0x88>)
 800390e:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003912:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003914:	4b1a      	ldr	r3, [pc, #104]	; (8003980 <FLASH_FlushCaches+0x88>)
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	4a19      	ldr	r2, [pc, #100]	; (8003980 <FLASH_FlushCaches+0x88>)
 800391a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800391e:	6013      	str	r3, [r2, #0]
 8003920:	4b17      	ldr	r3, [pc, #92]	; (8003980 <FLASH_FlushCaches+0x88>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	4a16      	ldr	r2, [pc, #88]	; (8003980 <FLASH_FlushCaches+0x88>)
 8003926:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800392a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800392c:	4b14      	ldr	r3, [pc, #80]	; (8003980 <FLASH_FlushCaches+0x88>)
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	4a13      	ldr	r2, [pc, #76]	; (8003980 <FLASH_FlushCaches+0x88>)
 8003932:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003936:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003938:	4b11      	ldr	r3, [pc, #68]	; (8003980 <FLASH_FlushCaches+0x88>)
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003940:	2b00      	cmp	r3, #0
 8003942:	d017      	beq.n	8003974 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003944:	4b0e      	ldr	r3, [pc, #56]	; (8003980 <FLASH_FlushCaches+0x88>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a0d      	ldr	r2, [pc, #52]	; (8003980 <FLASH_FlushCaches+0x88>)
 800394a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800394e:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8003950:	4b0b      	ldr	r3, [pc, #44]	; (8003980 <FLASH_FlushCaches+0x88>)
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	4a0a      	ldr	r2, [pc, #40]	; (8003980 <FLASH_FlushCaches+0x88>)
 8003956:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800395a:	6013      	str	r3, [r2, #0]
 800395c:	4b08      	ldr	r3, [pc, #32]	; (8003980 <FLASH_FlushCaches+0x88>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	4a07      	ldr	r2, [pc, #28]	; (8003980 <FLASH_FlushCaches+0x88>)
 8003962:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003966:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <FLASH_FlushCaches+0x88>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	4a04      	ldr	r2, [pc, #16]	; (8003980 <FLASH_FlushCaches+0x88>)
 800396e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003972:	6013      	str	r3, [r2, #0]
  }
}
 8003974:	bf00      	nop
 8003976:	46bd      	mov	sp, r7
 8003978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397c:	4770      	bx	lr
 800397e:	bf00      	nop
 8003980:	40023c00 	.word	0x40023c00

08003984 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003984:	b480      	push	{r7}
 8003986:	b089      	sub	sp, #36	; 0x24
 8003988:	af00      	add	r7, sp, #0
 800398a:	6078      	str	r0, [r7, #4]
 800398c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800398e:	2300      	movs	r3, #0
 8003990:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003992:	2300      	movs	r3, #0
 8003994:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003996:	2300      	movs	r3, #0
 8003998:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800399a:	2300      	movs	r3, #0
 800399c:	61fb      	str	r3, [r7, #28]
 800399e:	e177      	b.n	8003c90 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039a0:	2201      	movs	r2, #1
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	fa02 f303 	lsl.w	r3, r2, r3
 80039a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	697a      	ldr	r2, [r7, #20]
 80039b0:	4013      	ands	r3, r2
 80039b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	697b      	ldr	r3, [r7, #20]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	f040 8166 	bne.w	8003c8a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f003 0303 	and.w	r3, r3, #3
 80039c6:	2b01      	cmp	r3, #1
 80039c8:	d005      	beq.n	80039d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d130      	bne.n	8003a38 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	689b      	ldr	r3, [r3, #8]
 80039da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	005b      	lsls	r3, r3, #1
 80039e0:	2203      	movs	r2, #3
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43db      	mvns	r3, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4013      	ands	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	68da      	ldr	r2, [r3, #12]
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	005b      	lsls	r3, r3, #1
 80039f6:	fa02 f303 	lsl.w	r3, r2, r3
 80039fa:	69ba      	ldr	r2, [r7, #24]
 80039fc:	4313      	orrs	r3, r2
 80039fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	69ba      	ldr	r2, [r7, #24]
 8003a04:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a0c:	2201      	movs	r2, #1
 8003a0e:	69fb      	ldr	r3, [r7, #28]
 8003a10:	fa02 f303 	lsl.w	r3, r2, r3
 8003a14:	43db      	mvns	r3, r3
 8003a16:	69ba      	ldr	r2, [r7, #24]
 8003a18:	4013      	ands	r3, r2
 8003a1a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	091b      	lsrs	r3, r3, #4
 8003a22:	f003 0201 	and.w	r2, r3, #1
 8003a26:	69fb      	ldr	r3, [r7, #28]
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	4313      	orrs	r3, r2
 8003a30:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	69ba      	ldr	r2, [r7, #24]
 8003a36:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f003 0303 	and.w	r3, r3, #3
 8003a40:	2b03      	cmp	r3, #3
 8003a42:	d017      	beq.n	8003a74 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	68db      	ldr	r3, [r3, #12]
 8003a48:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a4a:	69fb      	ldr	r3, [r7, #28]
 8003a4c:	005b      	lsls	r3, r3, #1
 8003a4e:	2203      	movs	r2, #3
 8003a50:	fa02 f303 	lsl.w	r3, r2, r3
 8003a54:	43db      	mvns	r3, r3
 8003a56:	69ba      	ldr	r2, [r7, #24]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	689a      	ldr	r2, [r3, #8]
 8003a60:	69fb      	ldr	r3, [r7, #28]
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	fa02 f303 	lsl.w	r3, r2, r3
 8003a68:	69ba      	ldr	r2, [r7, #24]
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	69ba      	ldr	r2, [r7, #24]
 8003a72:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	f003 0303 	and.w	r3, r3, #3
 8003a7c:	2b02      	cmp	r3, #2
 8003a7e:	d123      	bne.n	8003ac8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003a80:	69fb      	ldr	r3, [r7, #28]
 8003a82:	08da      	lsrs	r2, r3, #3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	3208      	adds	r2, #8
 8003a88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a8c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003a8e:	69fb      	ldr	r3, [r7, #28]
 8003a90:	f003 0307 	and.w	r3, r3, #7
 8003a94:	009b      	lsls	r3, r3, #2
 8003a96:	220f      	movs	r2, #15
 8003a98:	fa02 f303 	lsl.w	r3, r2, r3
 8003a9c:	43db      	mvns	r3, r3
 8003a9e:	69ba      	ldr	r2, [r7, #24]
 8003aa0:	4013      	ands	r3, r2
 8003aa2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	691a      	ldr	r2, [r3, #16]
 8003aa8:	69fb      	ldr	r3, [r7, #28]
 8003aaa:	f003 0307 	and.w	r3, r3, #7
 8003aae:	009b      	lsls	r3, r3, #2
 8003ab0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ab4:	69ba      	ldr	r2, [r7, #24]
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	08da      	lsrs	r2, r3, #3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	3208      	adds	r2, #8
 8003ac2:	69b9      	ldr	r1, [r7, #24]
 8003ac4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	005b      	lsls	r3, r3, #1
 8003ad2:	2203      	movs	r2, #3
 8003ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	69ba      	ldr	r2, [r7, #24]
 8003adc:	4013      	ands	r3, r2
 8003ade:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	685b      	ldr	r3, [r3, #4]
 8003ae4:	f003 0203 	and.w	r2, r3, #3
 8003ae8:	69fb      	ldr	r3, [r7, #28]
 8003aea:	005b      	lsls	r3, r3, #1
 8003aec:	fa02 f303 	lsl.w	r3, r2, r3
 8003af0:	69ba      	ldr	r2, [r7, #24]
 8003af2:	4313      	orrs	r3, r2
 8003af4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	69ba      	ldr	r2, [r7, #24]
 8003afa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003afc:	683b      	ldr	r3, [r7, #0]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	f000 80c0 	beq.w	8003c8a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	4b66      	ldr	r3, [pc, #408]	; (8003ca8 <HAL_GPIO_Init+0x324>)
 8003b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b12:	4a65      	ldr	r2, [pc, #404]	; (8003ca8 <HAL_GPIO_Init+0x324>)
 8003b14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b18:	6453      	str	r3, [r2, #68]	; 0x44
 8003b1a:	4b63      	ldr	r3, [pc, #396]	; (8003ca8 <HAL_GPIO_Init+0x324>)
 8003b1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b22:	60fb      	str	r3, [r7, #12]
 8003b24:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b26:	4a61      	ldr	r2, [pc, #388]	; (8003cac <HAL_GPIO_Init+0x328>)
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	089b      	lsrs	r3, r3, #2
 8003b2c:	3302      	adds	r3, #2
 8003b2e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b32:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f003 0303 	and.w	r3, r3, #3
 8003b3a:	009b      	lsls	r3, r3, #2
 8003b3c:	220f      	movs	r2, #15
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43db      	mvns	r3, r3
 8003b44:	69ba      	ldr	r2, [r7, #24]
 8003b46:	4013      	ands	r3, r2
 8003b48:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	4a58      	ldr	r2, [pc, #352]	; (8003cb0 <HAL_GPIO_Init+0x32c>)
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	d037      	beq.n	8003bc2 <HAL_GPIO_Init+0x23e>
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	4a57      	ldr	r2, [pc, #348]	; (8003cb4 <HAL_GPIO_Init+0x330>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d031      	beq.n	8003bbe <HAL_GPIO_Init+0x23a>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	4a56      	ldr	r2, [pc, #344]	; (8003cb8 <HAL_GPIO_Init+0x334>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d02b      	beq.n	8003bba <HAL_GPIO_Init+0x236>
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	4a55      	ldr	r2, [pc, #340]	; (8003cbc <HAL_GPIO_Init+0x338>)
 8003b66:	4293      	cmp	r3, r2
 8003b68:	d025      	beq.n	8003bb6 <HAL_GPIO_Init+0x232>
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	4a54      	ldr	r2, [pc, #336]	; (8003cc0 <HAL_GPIO_Init+0x33c>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d01f      	beq.n	8003bb2 <HAL_GPIO_Init+0x22e>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a53      	ldr	r2, [pc, #332]	; (8003cc4 <HAL_GPIO_Init+0x340>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d019      	beq.n	8003bae <HAL_GPIO_Init+0x22a>
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	4a52      	ldr	r2, [pc, #328]	; (8003cc8 <HAL_GPIO_Init+0x344>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d013      	beq.n	8003baa <HAL_GPIO_Init+0x226>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4a51      	ldr	r2, [pc, #324]	; (8003ccc <HAL_GPIO_Init+0x348>)
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d00d      	beq.n	8003ba6 <HAL_GPIO_Init+0x222>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	4a50      	ldr	r2, [pc, #320]	; (8003cd0 <HAL_GPIO_Init+0x34c>)
 8003b8e:	4293      	cmp	r3, r2
 8003b90:	d007      	beq.n	8003ba2 <HAL_GPIO_Init+0x21e>
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	4a4f      	ldr	r2, [pc, #316]	; (8003cd4 <HAL_GPIO_Init+0x350>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d101      	bne.n	8003b9e <HAL_GPIO_Init+0x21a>
 8003b9a:	2309      	movs	r3, #9
 8003b9c:	e012      	b.n	8003bc4 <HAL_GPIO_Init+0x240>
 8003b9e:	230a      	movs	r3, #10
 8003ba0:	e010      	b.n	8003bc4 <HAL_GPIO_Init+0x240>
 8003ba2:	2308      	movs	r3, #8
 8003ba4:	e00e      	b.n	8003bc4 <HAL_GPIO_Init+0x240>
 8003ba6:	2307      	movs	r3, #7
 8003ba8:	e00c      	b.n	8003bc4 <HAL_GPIO_Init+0x240>
 8003baa:	2306      	movs	r3, #6
 8003bac:	e00a      	b.n	8003bc4 <HAL_GPIO_Init+0x240>
 8003bae:	2305      	movs	r3, #5
 8003bb0:	e008      	b.n	8003bc4 <HAL_GPIO_Init+0x240>
 8003bb2:	2304      	movs	r3, #4
 8003bb4:	e006      	b.n	8003bc4 <HAL_GPIO_Init+0x240>
 8003bb6:	2303      	movs	r3, #3
 8003bb8:	e004      	b.n	8003bc4 <HAL_GPIO_Init+0x240>
 8003bba:	2302      	movs	r3, #2
 8003bbc:	e002      	b.n	8003bc4 <HAL_GPIO_Init+0x240>
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	e000      	b.n	8003bc4 <HAL_GPIO_Init+0x240>
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	69fa      	ldr	r2, [r7, #28]
 8003bc6:	f002 0203 	and.w	r2, r2, #3
 8003bca:	0092      	lsls	r2, r2, #2
 8003bcc:	4093      	lsls	r3, r2
 8003bce:	69ba      	ldr	r2, [r7, #24]
 8003bd0:	4313      	orrs	r3, r2
 8003bd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003bd4:	4935      	ldr	r1, [pc, #212]	; (8003cac <HAL_GPIO_Init+0x328>)
 8003bd6:	69fb      	ldr	r3, [r7, #28]
 8003bd8:	089b      	lsrs	r3, r3, #2
 8003bda:	3302      	adds	r3, #2
 8003bdc:	69ba      	ldr	r2, [r7, #24]
 8003bde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003be2:	4b3d      	ldr	r3, [pc, #244]	; (8003cd8 <HAL_GPIO_Init+0x354>)
 8003be4:	689b      	ldr	r3, [r3, #8]
 8003be6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	43db      	mvns	r3, r3
 8003bec:	69ba      	ldr	r2, [r7, #24]
 8003bee:	4013      	ands	r3, r2
 8003bf0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	685b      	ldr	r3, [r3, #4]
 8003bf6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d003      	beq.n	8003c06 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003bfe:	69ba      	ldr	r2, [r7, #24]
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	4313      	orrs	r3, r2
 8003c04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c06:	4a34      	ldr	r2, [pc, #208]	; (8003cd8 <HAL_GPIO_Init+0x354>)
 8003c08:	69bb      	ldr	r3, [r7, #24]
 8003c0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c0c:	4b32      	ldr	r3, [pc, #200]	; (8003cd8 <HAL_GPIO_Init+0x354>)
 8003c0e:	68db      	ldr	r3, [r3, #12]
 8003c10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c12:	693b      	ldr	r3, [r7, #16]
 8003c14:	43db      	mvns	r3, r3
 8003c16:	69ba      	ldr	r2, [r7, #24]
 8003c18:	4013      	ands	r3, r2
 8003c1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c1c:	683b      	ldr	r3, [r7, #0]
 8003c1e:	685b      	ldr	r3, [r3, #4]
 8003c20:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d003      	beq.n	8003c30 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c28:	69ba      	ldr	r2, [r7, #24]
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c30:	4a29      	ldr	r2, [pc, #164]	; (8003cd8 <HAL_GPIO_Init+0x354>)
 8003c32:	69bb      	ldr	r3, [r7, #24]
 8003c34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c36:	4b28      	ldr	r3, [pc, #160]	; (8003cd8 <HAL_GPIO_Init+0x354>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	43db      	mvns	r3, r3
 8003c40:	69ba      	ldr	r2, [r7, #24]
 8003c42:	4013      	ands	r3, r2
 8003c44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c46:	683b      	ldr	r3, [r7, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d003      	beq.n	8003c5a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c52:	69ba      	ldr	r2, [r7, #24]
 8003c54:	693b      	ldr	r3, [r7, #16]
 8003c56:	4313      	orrs	r3, r2
 8003c58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c5a:	4a1f      	ldr	r2, [pc, #124]	; (8003cd8 <HAL_GPIO_Init+0x354>)
 8003c5c:	69bb      	ldr	r3, [r7, #24]
 8003c5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c60:	4b1d      	ldr	r3, [pc, #116]	; (8003cd8 <HAL_GPIO_Init+0x354>)
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c66:	693b      	ldr	r3, [r7, #16]
 8003c68:	43db      	mvns	r3, r3
 8003c6a:	69ba      	ldr	r2, [r7, #24]
 8003c6c:	4013      	ands	r3, r2
 8003c6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d003      	beq.n	8003c84 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003c7c:	69ba      	ldr	r2, [r7, #24]
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	4313      	orrs	r3, r2
 8003c82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003c84:	4a14      	ldr	r2, [pc, #80]	; (8003cd8 <HAL_GPIO_Init+0x354>)
 8003c86:	69bb      	ldr	r3, [r7, #24]
 8003c88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c8a:	69fb      	ldr	r3, [r7, #28]
 8003c8c:	3301      	adds	r3, #1
 8003c8e:	61fb      	str	r3, [r7, #28]
 8003c90:	69fb      	ldr	r3, [r7, #28]
 8003c92:	2b0f      	cmp	r3, #15
 8003c94:	f67f ae84 	bls.w	80039a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003c98:	bf00      	nop
 8003c9a:	bf00      	nop
 8003c9c:	3724      	adds	r7, #36	; 0x24
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40023800 	.word	0x40023800
 8003cac:	40013800 	.word	0x40013800
 8003cb0:	40020000 	.word	0x40020000
 8003cb4:	40020400 	.word	0x40020400
 8003cb8:	40020800 	.word	0x40020800
 8003cbc:	40020c00 	.word	0x40020c00
 8003cc0:	40021000 	.word	0x40021000
 8003cc4:	40021400 	.word	0x40021400
 8003cc8:	40021800 	.word	0x40021800
 8003ccc:	40021c00 	.word	0x40021c00
 8003cd0:	40022000 	.word	0x40022000
 8003cd4:	40022400 	.word	0x40022400
 8003cd8:	40013c00 	.word	0x40013c00

08003cdc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003cdc:	b480      	push	{r7}
 8003cde:	b083      	sub	sp, #12
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	807b      	strh	r3, [r7, #2]
 8003ce8:	4613      	mov	r3, r2
 8003cea:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003cec:	787b      	ldrb	r3, [r7, #1]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d003      	beq.n	8003cfa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003cf2:	887a      	ldrh	r2, [r7, #2]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003cf8:	e003      	b.n	8003d02 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003cfa:	887b      	ldrh	r3, [r7, #2]
 8003cfc:	041a      	lsls	r2, r3, #16
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	619a      	str	r2, [r3, #24]
}
 8003d02:	bf00      	nop
 8003d04:	370c      	adds	r7, #12
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d0e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d10:	b08f      	sub	sp, #60	; 0x3c
 8003d12:	af0a      	add	r7, sp, #40	; 0x28
 8003d14:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d101      	bne.n	8003d20 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e10f      	b.n	8003f40 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003d2c:	b2db      	uxtb	r3, r3
 8003d2e:	2b00      	cmp	r3, #0
 8003d30:	d106      	bne.n	8003d40 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f7fe f9c8 	bl	80020d0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2203      	movs	r2, #3
 8003d44:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d102      	bne.n	8003d5a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2200      	movs	r2, #0
 8003d58:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f001 ff05 	bl	8005b6e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	603b      	str	r3, [r7, #0]
 8003d6a:	687e      	ldr	r6, [r7, #4]
 8003d6c:	466d      	mov	r5, sp
 8003d6e:	f106 0410 	add.w	r4, r6, #16
 8003d72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d76:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003d78:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003d7a:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003d7e:	e885 0003 	stmia.w	r5, {r0, r1}
 8003d82:	1d33      	adds	r3, r6, #4
 8003d84:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003d86:	6838      	ldr	r0, [r7, #0]
 8003d88:	f001 fe90 	bl	8005aac <USB_CoreInit>
 8003d8c:	4603      	mov	r3, r0
 8003d8e:	2b00      	cmp	r3, #0
 8003d90:	d005      	beq.n	8003d9e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2202      	movs	r2, #2
 8003d96:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	e0d0      	b.n	8003f40 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2100      	movs	r1, #0
 8003da4:	4618      	mov	r0, r3
 8003da6:	f001 fef3 	bl	8005b90 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003daa:	2300      	movs	r3, #0
 8003dac:	73fb      	strb	r3, [r7, #15]
 8003dae:	e04a      	b.n	8003e46 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003db0:	7bfa      	ldrb	r2, [r7, #15]
 8003db2:	6879      	ldr	r1, [r7, #4]
 8003db4:	4613      	mov	r3, r2
 8003db6:	00db      	lsls	r3, r3, #3
 8003db8:	4413      	add	r3, r2
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	440b      	add	r3, r1
 8003dbe:	333d      	adds	r3, #61	; 0x3d
 8003dc0:	2201      	movs	r2, #1
 8003dc2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003dc4:	7bfa      	ldrb	r2, [r7, #15]
 8003dc6:	6879      	ldr	r1, [r7, #4]
 8003dc8:	4613      	mov	r3, r2
 8003dca:	00db      	lsls	r3, r3, #3
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	440b      	add	r3, r1
 8003dd2:	333c      	adds	r3, #60	; 0x3c
 8003dd4:	7bfa      	ldrb	r2, [r7, #15]
 8003dd6:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003dd8:	7bfa      	ldrb	r2, [r7, #15]
 8003dda:	7bfb      	ldrb	r3, [r7, #15]
 8003ddc:	b298      	uxth	r0, r3
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	3344      	adds	r3, #68	; 0x44
 8003dec:	4602      	mov	r2, r0
 8003dee:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003df0:	7bfa      	ldrb	r2, [r7, #15]
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	3340      	adds	r3, #64	; 0x40
 8003e00:	2200      	movs	r2, #0
 8003e02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e04:	7bfa      	ldrb	r2, [r7, #15]
 8003e06:	6879      	ldr	r1, [r7, #4]
 8003e08:	4613      	mov	r3, r2
 8003e0a:	00db      	lsls	r3, r3, #3
 8003e0c:	4413      	add	r3, r2
 8003e0e:	009b      	lsls	r3, r3, #2
 8003e10:	440b      	add	r3, r1
 8003e12:	3348      	adds	r3, #72	; 0x48
 8003e14:	2200      	movs	r2, #0
 8003e16:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e18:	7bfa      	ldrb	r2, [r7, #15]
 8003e1a:	6879      	ldr	r1, [r7, #4]
 8003e1c:	4613      	mov	r3, r2
 8003e1e:	00db      	lsls	r3, r3, #3
 8003e20:	4413      	add	r3, r2
 8003e22:	009b      	lsls	r3, r3, #2
 8003e24:	440b      	add	r3, r1
 8003e26:	334c      	adds	r3, #76	; 0x4c
 8003e28:	2200      	movs	r2, #0
 8003e2a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e2c:	7bfa      	ldrb	r2, [r7, #15]
 8003e2e:	6879      	ldr	r1, [r7, #4]
 8003e30:	4613      	mov	r3, r2
 8003e32:	00db      	lsls	r3, r3, #3
 8003e34:	4413      	add	r3, r2
 8003e36:	009b      	lsls	r3, r3, #2
 8003e38:	440b      	add	r3, r1
 8003e3a:	3354      	adds	r3, #84	; 0x54
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e40:	7bfb      	ldrb	r3, [r7, #15]
 8003e42:	3301      	adds	r3, #1
 8003e44:	73fb      	strb	r3, [r7, #15]
 8003e46:	7bfa      	ldrb	r2, [r7, #15]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	429a      	cmp	r2, r3
 8003e4e:	d3af      	bcc.n	8003db0 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e50:	2300      	movs	r3, #0
 8003e52:	73fb      	strb	r3, [r7, #15]
 8003e54:	e044      	b.n	8003ee0 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e56:	7bfa      	ldrb	r2, [r7, #15]
 8003e58:	6879      	ldr	r1, [r7, #4]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	00db      	lsls	r3, r3, #3
 8003e5e:	4413      	add	r3, r2
 8003e60:	009b      	lsls	r3, r3, #2
 8003e62:	440b      	add	r3, r1
 8003e64:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003e68:	2200      	movs	r2, #0
 8003e6a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e6c:	7bfa      	ldrb	r2, [r7, #15]
 8003e6e:	6879      	ldr	r1, [r7, #4]
 8003e70:	4613      	mov	r3, r2
 8003e72:	00db      	lsls	r3, r3, #3
 8003e74:	4413      	add	r3, r2
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	440b      	add	r3, r1
 8003e7a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003e7e:	7bfa      	ldrb	r2, [r7, #15]
 8003e80:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003e82:	7bfa      	ldrb	r2, [r7, #15]
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003e94:	2200      	movs	r2, #0
 8003e96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003e98:	7bfa      	ldrb	r2, [r7, #15]
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003eaa:	2200      	movs	r2, #0
 8003eac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003eae:	7bfa      	ldrb	r2, [r7, #15]
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ec4:	7bfa      	ldrb	r2, [r7, #15]
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003eda:	7bfb      	ldrb	r3, [r7, #15]
 8003edc:	3301      	adds	r3, #1
 8003ede:	73fb      	strb	r3, [r7, #15]
 8003ee0:	7bfa      	ldrb	r2, [r7, #15]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d3b5      	bcc.n	8003e56 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	603b      	str	r3, [r7, #0]
 8003ef0:	687e      	ldr	r6, [r7, #4]
 8003ef2:	466d      	mov	r5, sp
 8003ef4:	f106 0410 	add.w	r4, r6, #16
 8003ef8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003efa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003efc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003efe:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f00:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f04:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f08:	1d33      	adds	r3, r6, #4
 8003f0a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f0c:	6838      	ldr	r0, [r7, #0]
 8003f0e:	f001 fe8b 	bl	8005c28 <USB_DevInit>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	2202      	movs	r2, #2
 8003f1c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f20:	2301      	movs	r3, #1
 8003f22:	e00d      	b.n	8003f40 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2200      	movs	r2, #0
 8003f28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	4618      	mov	r0, r3
 8003f3a:	f002 f856 	bl	8005fea <USB_DevDisconnect>

  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3714      	adds	r7, #20
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f48 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f48:	b580      	push	{r7, lr}
 8003f4a:	b086      	sub	sp, #24
 8003f4c:	af00      	add	r7, sp, #0
 8003f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d101      	bne.n	8003f5a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f56:	2301      	movs	r3, #1
 8003f58:	e267      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d075      	beq.n	8004052 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f66:	4b88      	ldr	r3, [pc, #544]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 8003f68:	689b      	ldr	r3, [r3, #8]
 8003f6a:	f003 030c 	and.w	r3, r3, #12
 8003f6e:	2b04      	cmp	r3, #4
 8003f70:	d00c      	beq.n	8003f8c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f72:	4b85      	ldr	r3, [pc, #532]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 8003f74:	689b      	ldr	r3, [r3, #8]
 8003f76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f7a:	2b08      	cmp	r3, #8
 8003f7c:	d112      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f7e:	4b82      	ldr	r3, [pc, #520]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003f86:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003f8a:	d10b      	bne.n	8003fa4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f8c:	4b7e      	ldr	r3, [pc, #504]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d05b      	beq.n	8004050 <HAL_RCC_OscConfig+0x108>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	685b      	ldr	r3, [r3, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d157      	bne.n	8004050 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e242      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fac:	d106      	bne.n	8003fbc <HAL_RCC_OscConfig+0x74>
 8003fae:	4b76      	ldr	r3, [pc, #472]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	4a75      	ldr	r2, [pc, #468]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fb8:	6013      	str	r3, [r2, #0]
 8003fba:	e01d      	b.n	8003ff8 <HAL_RCC_OscConfig+0xb0>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	685b      	ldr	r3, [r3, #4]
 8003fc0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003fc4:	d10c      	bne.n	8003fe0 <HAL_RCC_OscConfig+0x98>
 8003fc6:	4b70      	ldr	r3, [pc, #448]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	4a6f      	ldr	r2, [pc, #444]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 8003fcc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003fd0:	6013      	str	r3, [r2, #0]
 8003fd2:	4b6d      	ldr	r3, [pc, #436]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	4a6c      	ldr	r2, [pc, #432]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 8003fd8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fdc:	6013      	str	r3, [r2, #0]
 8003fde:	e00b      	b.n	8003ff8 <HAL_RCC_OscConfig+0xb0>
 8003fe0:	4b69      	ldr	r3, [pc, #420]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	4a68      	ldr	r2, [pc, #416]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 8003fe6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003fea:	6013      	str	r3, [r2, #0]
 8003fec:	4b66      	ldr	r3, [pc, #408]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4a65      	ldr	r2, [pc, #404]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 8003ff2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003ff6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	685b      	ldr	r3, [r3, #4]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d013      	beq.n	8004028 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004000:	f7fe fcce 	bl	80029a0 <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004006:	e008      	b.n	800401a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004008:	f7fe fcca 	bl	80029a0 <HAL_GetTick>
 800400c:	4602      	mov	r2, r0
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	1ad3      	subs	r3, r2, r3
 8004012:	2b64      	cmp	r3, #100	; 0x64
 8004014:	d901      	bls.n	800401a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004016:	2303      	movs	r3, #3
 8004018:	e207      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800401a:	4b5b      	ldr	r3, [pc, #364]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004022:	2b00      	cmp	r3, #0
 8004024:	d0f0      	beq.n	8004008 <HAL_RCC_OscConfig+0xc0>
 8004026:	e014      	b.n	8004052 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004028:	f7fe fcba 	bl	80029a0 <HAL_GetTick>
 800402c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800402e:	e008      	b.n	8004042 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004030:	f7fe fcb6 	bl	80029a0 <HAL_GetTick>
 8004034:	4602      	mov	r2, r0
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	1ad3      	subs	r3, r2, r3
 800403a:	2b64      	cmp	r3, #100	; 0x64
 800403c:	d901      	bls.n	8004042 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800403e:	2303      	movs	r3, #3
 8004040:	e1f3      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004042:	4b51      	ldr	r3, [pc, #324]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404a:	2b00      	cmp	r3, #0
 800404c:	d1f0      	bne.n	8004030 <HAL_RCC_OscConfig+0xe8>
 800404e:	e000      	b.n	8004052 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004050:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f003 0302 	and.w	r3, r3, #2
 800405a:	2b00      	cmp	r3, #0
 800405c:	d063      	beq.n	8004126 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800405e:	4b4a      	ldr	r3, [pc, #296]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	f003 030c 	and.w	r3, r3, #12
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00b      	beq.n	8004082 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800406a:	4b47      	ldr	r3, [pc, #284]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 800406c:	689b      	ldr	r3, [r3, #8]
 800406e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004072:	2b08      	cmp	r3, #8
 8004074:	d11c      	bne.n	80040b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004076:	4b44      	ldr	r3, [pc, #272]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 8004078:	685b      	ldr	r3, [r3, #4]
 800407a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800407e:	2b00      	cmp	r3, #0
 8004080:	d116      	bne.n	80040b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004082:	4b41      	ldr	r3, [pc, #260]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f003 0302 	and.w	r3, r3, #2
 800408a:	2b00      	cmp	r3, #0
 800408c:	d005      	beq.n	800409a <HAL_RCC_OscConfig+0x152>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d001      	beq.n	800409a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004096:	2301      	movs	r3, #1
 8004098:	e1c7      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800409a:	4b3b      	ldr	r3, [pc, #236]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	691b      	ldr	r3, [r3, #16]
 80040a6:	00db      	lsls	r3, r3, #3
 80040a8:	4937      	ldr	r1, [pc, #220]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 80040aa:	4313      	orrs	r3, r2
 80040ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ae:	e03a      	b.n	8004126 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	68db      	ldr	r3, [r3, #12]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d020      	beq.n	80040fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040b8:	4b34      	ldr	r3, [pc, #208]	; (800418c <HAL_RCC_OscConfig+0x244>)
 80040ba:	2201      	movs	r2, #1
 80040bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040be:	f7fe fc6f 	bl	80029a0 <HAL_GetTick>
 80040c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c4:	e008      	b.n	80040d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040c6:	f7fe fc6b 	bl	80029a0 <HAL_GetTick>
 80040ca:	4602      	mov	r2, r0
 80040cc:	693b      	ldr	r3, [r7, #16]
 80040ce:	1ad3      	subs	r3, r2, r3
 80040d0:	2b02      	cmp	r3, #2
 80040d2:	d901      	bls.n	80040d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040d4:	2303      	movs	r3, #3
 80040d6:	e1a8      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040d8:	4b2b      	ldr	r3, [pc, #172]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0f0      	beq.n	80040c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040e4:	4b28      	ldr	r3, [pc, #160]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	691b      	ldr	r3, [r3, #16]
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	4925      	ldr	r1, [pc, #148]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 80040f4:	4313      	orrs	r3, r2
 80040f6:	600b      	str	r3, [r1, #0]
 80040f8:	e015      	b.n	8004126 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040fa:	4b24      	ldr	r3, [pc, #144]	; (800418c <HAL_RCC_OscConfig+0x244>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004100:	f7fe fc4e 	bl	80029a0 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004108:	f7fe fc4a 	bl	80029a0 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e187      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800411a:	4b1b      	ldr	r3, [pc, #108]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f003 0308 	and.w	r3, r3, #8
 800412e:	2b00      	cmp	r3, #0
 8004130:	d036      	beq.n	80041a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	695b      	ldr	r3, [r3, #20]
 8004136:	2b00      	cmp	r3, #0
 8004138:	d016      	beq.n	8004168 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800413a:	4b15      	ldr	r3, [pc, #84]	; (8004190 <HAL_RCC_OscConfig+0x248>)
 800413c:	2201      	movs	r2, #1
 800413e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004140:	f7fe fc2e 	bl	80029a0 <HAL_GetTick>
 8004144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004146:	e008      	b.n	800415a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004148:	f7fe fc2a 	bl	80029a0 <HAL_GetTick>
 800414c:	4602      	mov	r2, r0
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	2b02      	cmp	r3, #2
 8004154:	d901      	bls.n	800415a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004156:	2303      	movs	r3, #3
 8004158:	e167      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800415a:	4b0b      	ldr	r3, [pc, #44]	; (8004188 <HAL_RCC_OscConfig+0x240>)
 800415c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800415e:	f003 0302 	and.w	r3, r3, #2
 8004162:	2b00      	cmp	r3, #0
 8004164:	d0f0      	beq.n	8004148 <HAL_RCC_OscConfig+0x200>
 8004166:	e01b      	b.n	80041a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004168:	4b09      	ldr	r3, [pc, #36]	; (8004190 <HAL_RCC_OscConfig+0x248>)
 800416a:	2200      	movs	r2, #0
 800416c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800416e:	f7fe fc17 	bl	80029a0 <HAL_GetTick>
 8004172:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004174:	e00e      	b.n	8004194 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004176:	f7fe fc13 	bl	80029a0 <HAL_GetTick>
 800417a:	4602      	mov	r2, r0
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	1ad3      	subs	r3, r2, r3
 8004180:	2b02      	cmp	r3, #2
 8004182:	d907      	bls.n	8004194 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e150      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
 8004188:	40023800 	.word	0x40023800
 800418c:	42470000 	.word	0x42470000
 8004190:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004194:	4b88      	ldr	r3, [pc, #544]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 8004196:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1ea      	bne.n	8004176 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	f003 0304 	and.w	r3, r3, #4
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	f000 8097 	beq.w	80042dc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041ae:	2300      	movs	r3, #0
 80041b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041b2:	4b81      	ldr	r3, [pc, #516]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d10f      	bne.n	80041de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041be:	2300      	movs	r3, #0
 80041c0:	60bb      	str	r3, [r7, #8]
 80041c2:	4b7d      	ldr	r3, [pc, #500]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 80041c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c6:	4a7c      	ldr	r2, [pc, #496]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 80041c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041cc:	6413      	str	r3, [r2, #64]	; 0x40
 80041ce:	4b7a      	ldr	r3, [pc, #488]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 80041d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041d6:	60bb      	str	r3, [r7, #8]
 80041d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041da:	2301      	movs	r3, #1
 80041dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041de:	4b77      	ldr	r3, [pc, #476]	; (80043bc <HAL_RCC_OscConfig+0x474>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d118      	bne.n	800421c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041ea:	4b74      	ldr	r3, [pc, #464]	; (80043bc <HAL_RCC_OscConfig+0x474>)
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	4a73      	ldr	r2, [pc, #460]	; (80043bc <HAL_RCC_OscConfig+0x474>)
 80041f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80041f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041f6:	f7fe fbd3 	bl	80029a0 <HAL_GetTick>
 80041fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fc:	e008      	b.n	8004210 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041fe:	f7fe fbcf 	bl	80029a0 <HAL_GetTick>
 8004202:	4602      	mov	r2, r0
 8004204:	693b      	ldr	r3, [r7, #16]
 8004206:	1ad3      	subs	r3, r2, r3
 8004208:	2b02      	cmp	r3, #2
 800420a:	d901      	bls.n	8004210 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e10c      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004210:	4b6a      	ldr	r3, [pc, #424]	; (80043bc <HAL_RCC_OscConfig+0x474>)
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004218:	2b00      	cmp	r3, #0
 800421a:	d0f0      	beq.n	80041fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	689b      	ldr	r3, [r3, #8]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d106      	bne.n	8004232 <HAL_RCC_OscConfig+0x2ea>
 8004224:	4b64      	ldr	r3, [pc, #400]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 8004226:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004228:	4a63      	ldr	r2, [pc, #396]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 800422a:	f043 0301 	orr.w	r3, r3, #1
 800422e:	6713      	str	r3, [r2, #112]	; 0x70
 8004230:	e01c      	b.n	800426c <HAL_RCC_OscConfig+0x324>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	689b      	ldr	r3, [r3, #8]
 8004236:	2b05      	cmp	r3, #5
 8004238:	d10c      	bne.n	8004254 <HAL_RCC_OscConfig+0x30c>
 800423a:	4b5f      	ldr	r3, [pc, #380]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 800423c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800423e:	4a5e      	ldr	r2, [pc, #376]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 8004240:	f043 0304 	orr.w	r3, r3, #4
 8004244:	6713      	str	r3, [r2, #112]	; 0x70
 8004246:	4b5c      	ldr	r3, [pc, #368]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 8004248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800424a:	4a5b      	ldr	r2, [pc, #364]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 800424c:	f043 0301 	orr.w	r3, r3, #1
 8004250:	6713      	str	r3, [r2, #112]	; 0x70
 8004252:	e00b      	b.n	800426c <HAL_RCC_OscConfig+0x324>
 8004254:	4b58      	ldr	r3, [pc, #352]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 8004256:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004258:	4a57      	ldr	r2, [pc, #348]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 800425a:	f023 0301 	bic.w	r3, r3, #1
 800425e:	6713      	str	r3, [r2, #112]	; 0x70
 8004260:	4b55      	ldr	r3, [pc, #340]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 8004262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004264:	4a54      	ldr	r2, [pc, #336]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 8004266:	f023 0304 	bic.w	r3, r3, #4
 800426a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	689b      	ldr	r3, [r3, #8]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d015      	beq.n	80042a0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004274:	f7fe fb94 	bl	80029a0 <HAL_GetTick>
 8004278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427a:	e00a      	b.n	8004292 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800427c:	f7fe fb90 	bl	80029a0 <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	f241 3288 	movw	r2, #5000	; 0x1388
 800428a:	4293      	cmp	r3, r2
 800428c:	d901      	bls.n	8004292 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800428e:	2303      	movs	r3, #3
 8004290:	e0cb      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004292:	4b49      	ldr	r3, [pc, #292]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 8004294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004296:	f003 0302 	and.w	r3, r3, #2
 800429a:	2b00      	cmp	r3, #0
 800429c:	d0ee      	beq.n	800427c <HAL_RCC_OscConfig+0x334>
 800429e:	e014      	b.n	80042ca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042a0:	f7fe fb7e 	bl	80029a0 <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042a6:	e00a      	b.n	80042be <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a8:	f7fe fb7a 	bl	80029a0 <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e0b5      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042be:	4b3e      	ldr	r3, [pc, #248]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d1ee      	bne.n	80042a8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042ca:	7dfb      	ldrb	r3, [r7, #23]
 80042cc:	2b01      	cmp	r3, #1
 80042ce:	d105      	bne.n	80042dc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042d0:	4b39      	ldr	r3, [pc, #228]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 80042d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d4:	4a38      	ldr	r2, [pc, #224]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 80042d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80042da:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	f000 80a1 	beq.w	8004428 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042e6:	4b34      	ldr	r3, [pc, #208]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f003 030c 	and.w	r3, r3, #12
 80042ee:	2b08      	cmp	r3, #8
 80042f0:	d05c      	beq.n	80043ac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	699b      	ldr	r3, [r3, #24]
 80042f6:	2b02      	cmp	r3, #2
 80042f8:	d141      	bne.n	800437e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042fa:	4b31      	ldr	r3, [pc, #196]	; (80043c0 <HAL_RCC_OscConfig+0x478>)
 80042fc:	2200      	movs	r2, #0
 80042fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004300:	f7fe fb4e 	bl	80029a0 <HAL_GetTick>
 8004304:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004306:	e008      	b.n	800431a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004308:	f7fe fb4a 	bl	80029a0 <HAL_GetTick>
 800430c:	4602      	mov	r2, r0
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	1ad3      	subs	r3, r2, r3
 8004312:	2b02      	cmp	r3, #2
 8004314:	d901      	bls.n	800431a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e087      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800431a:	4b27      	ldr	r3, [pc, #156]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1f0      	bne.n	8004308 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	69da      	ldr	r2, [r3, #28]
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a1b      	ldr	r3, [r3, #32]
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004334:	019b      	lsls	r3, r3, #6
 8004336:	431a      	orrs	r2, r3
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800433c:	085b      	lsrs	r3, r3, #1
 800433e:	3b01      	subs	r3, #1
 8004340:	041b      	lsls	r3, r3, #16
 8004342:	431a      	orrs	r2, r3
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004348:	061b      	lsls	r3, r3, #24
 800434a:	491b      	ldr	r1, [pc, #108]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 800434c:	4313      	orrs	r3, r2
 800434e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004350:	4b1b      	ldr	r3, [pc, #108]	; (80043c0 <HAL_RCC_OscConfig+0x478>)
 8004352:	2201      	movs	r2, #1
 8004354:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004356:	f7fe fb23 	bl	80029a0 <HAL_GetTick>
 800435a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800435c:	e008      	b.n	8004370 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800435e:	f7fe fb1f 	bl	80029a0 <HAL_GetTick>
 8004362:	4602      	mov	r2, r0
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	1ad3      	subs	r3, r2, r3
 8004368:	2b02      	cmp	r3, #2
 800436a:	d901      	bls.n	8004370 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800436c:	2303      	movs	r3, #3
 800436e:	e05c      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004370:	4b11      	ldr	r3, [pc, #68]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d0f0      	beq.n	800435e <HAL_RCC_OscConfig+0x416>
 800437c:	e054      	b.n	8004428 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800437e:	4b10      	ldr	r3, [pc, #64]	; (80043c0 <HAL_RCC_OscConfig+0x478>)
 8004380:	2200      	movs	r2, #0
 8004382:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004384:	f7fe fb0c 	bl	80029a0 <HAL_GetTick>
 8004388:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438a:	e008      	b.n	800439e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800438c:	f7fe fb08 	bl	80029a0 <HAL_GetTick>
 8004390:	4602      	mov	r2, r0
 8004392:	693b      	ldr	r3, [r7, #16]
 8004394:	1ad3      	subs	r3, r2, r3
 8004396:	2b02      	cmp	r3, #2
 8004398:	d901      	bls.n	800439e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800439a:	2303      	movs	r3, #3
 800439c:	e045      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800439e:	4b06      	ldr	r3, [pc, #24]	; (80043b8 <HAL_RCC_OscConfig+0x470>)
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d1f0      	bne.n	800438c <HAL_RCC_OscConfig+0x444>
 80043aa:	e03d      	b.n	8004428 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	699b      	ldr	r3, [r3, #24]
 80043b0:	2b01      	cmp	r3, #1
 80043b2:	d107      	bne.n	80043c4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043b4:	2301      	movs	r3, #1
 80043b6:	e038      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
 80043b8:	40023800 	.word	0x40023800
 80043bc:	40007000 	.word	0x40007000
 80043c0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043c4:	4b1b      	ldr	r3, [pc, #108]	; (8004434 <HAL_RCC_OscConfig+0x4ec>)
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	699b      	ldr	r3, [r3, #24]
 80043ce:	2b01      	cmp	r3, #1
 80043d0:	d028      	beq.n	8004424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043dc:	429a      	cmp	r2, r3
 80043de:	d121      	bne.n	8004424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d11a      	bne.n	8004424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043ee:	68fa      	ldr	r2, [r7, #12]
 80043f0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80043f4:	4013      	ands	r3, r2
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80043fa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d111      	bne.n	8004424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800440a:	085b      	lsrs	r3, r3, #1
 800440c:	3b01      	subs	r3, #1
 800440e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004410:	429a      	cmp	r2, r3
 8004412:	d107      	bne.n	8004424 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800441e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004420:	429a      	cmp	r2, r3
 8004422:	d001      	beq.n	8004428 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004424:	2301      	movs	r3, #1
 8004426:	e000      	b.n	800442a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	3718      	adds	r7, #24
 800442e:	46bd      	mov	sp, r7
 8004430:	bd80      	pop	{r7, pc}
 8004432:	bf00      	nop
 8004434:	40023800 	.word	0x40023800

08004438 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004438:	b580      	push	{r7, lr}
 800443a:	b084      	sub	sp, #16
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
 8004440:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d101      	bne.n	800444c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004448:	2301      	movs	r3, #1
 800444a:	e0cc      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800444c:	4b68      	ldr	r3, [pc, #416]	; (80045f0 <HAL_RCC_ClockConfig+0x1b8>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f003 030f 	and.w	r3, r3, #15
 8004454:	683a      	ldr	r2, [r7, #0]
 8004456:	429a      	cmp	r2, r3
 8004458:	d90c      	bls.n	8004474 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800445a:	4b65      	ldr	r3, [pc, #404]	; (80045f0 <HAL_RCC_ClockConfig+0x1b8>)
 800445c:	683a      	ldr	r2, [r7, #0]
 800445e:	b2d2      	uxtb	r2, r2
 8004460:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004462:	4b63      	ldr	r3, [pc, #396]	; (80045f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f003 030f 	and.w	r3, r3, #15
 800446a:	683a      	ldr	r2, [r7, #0]
 800446c:	429a      	cmp	r2, r3
 800446e:	d001      	beq.n	8004474 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004470:	2301      	movs	r3, #1
 8004472:	e0b8      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	f003 0302 	and.w	r3, r3, #2
 800447c:	2b00      	cmp	r3, #0
 800447e:	d020      	beq.n	80044c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f003 0304 	and.w	r3, r3, #4
 8004488:	2b00      	cmp	r3, #0
 800448a:	d005      	beq.n	8004498 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800448c:	4b59      	ldr	r3, [pc, #356]	; (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 800448e:	689b      	ldr	r3, [r3, #8]
 8004490:	4a58      	ldr	r2, [pc, #352]	; (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004496:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0308 	and.w	r3, r3, #8
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d005      	beq.n	80044b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044a4:	4b53      	ldr	r3, [pc, #332]	; (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	4a52      	ldr	r2, [pc, #328]	; (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044b0:	4b50      	ldr	r3, [pc, #320]	; (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 80044b2:	689b      	ldr	r3, [r3, #8]
 80044b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	494d      	ldr	r1, [pc, #308]	; (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	4313      	orrs	r3, r2
 80044c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f003 0301 	and.w	r3, r3, #1
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d044      	beq.n	8004558 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	2b01      	cmp	r3, #1
 80044d4:	d107      	bne.n	80044e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044d6:	4b47      	ldr	r3, [pc, #284]	; (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d119      	bne.n	8004516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e07f      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	2b02      	cmp	r3, #2
 80044ec:	d003      	beq.n	80044f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d107      	bne.n	8004506 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044f6:	4b3f      	ldr	r3, [pc, #252]	; (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d109      	bne.n	8004516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004502:	2301      	movs	r3, #1
 8004504:	e06f      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004506:	4b3b      	ldr	r3, [pc, #236]	; (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e067      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004516:	4b37      	ldr	r3, [pc, #220]	; (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004518:	689b      	ldr	r3, [r3, #8]
 800451a:	f023 0203 	bic.w	r2, r3, #3
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	4934      	ldr	r1, [pc, #208]	; (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	4313      	orrs	r3, r2
 8004526:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004528:	f7fe fa3a 	bl	80029a0 <HAL_GetTick>
 800452c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800452e:	e00a      	b.n	8004546 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004530:	f7fe fa36 	bl	80029a0 <HAL_GetTick>
 8004534:	4602      	mov	r2, r0
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	1ad3      	subs	r3, r2, r3
 800453a:	f241 3288 	movw	r2, #5000	; 0x1388
 800453e:	4293      	cmp	r3, r2
 8004540:	d901      	bls.n	8004546 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004542:	2303      	movs	r3, #3
 8004544:	e04f      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004546:	4b2b      	ldr	r3, [pc, #172]	; (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 020c 	and.w	r2, r3, #12
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	685b      	ldr	r3, [r3, #4]
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	429a      	cmp	r2, r3
 8004556:	d1eb      	bne.n	8004530 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004558:	4b25      	ldr	r3, [pc, #148]	; (80045f0 <HAL_RCC_ClockConfig+0x1b8>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f003 030f 	and.w	r3, r3, #15
 8004560:	683a      	ldr	r2, [r7, #0]
 8004562:	429a      	cmp	r2, r3
 8004564:	d20c      	bcs.n	8004580 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004566:	4b22      	ldr	r3, [pc, #136]	; (80045f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004568:	683a      	ldr	r2, [r7, #0]
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800456e:	4b20      	ldr	r3, [pc, #128]	; (80045f0 <HAL_RCC_ClockConfig+0x1b8>)
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 030f 	and.w	r3, r3, #15
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d001      	beq.n	8004580 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800457c:	2301      	movs	r3, #1
 800457e:	e032      	b.n	80045e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f003 0304 	and.w	r3, r3, #4
 8004588:	2b00      	cmp	r3, #0
 800458a:	d008      	beq.n	800459e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800458c:	4b19      	ldr	r3, [pc, #100]	; (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 800458e:	689b      	ldr	r3, [r3, #8]
 8004590:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	68db      	ldr	r3, [r3, #12]
 8004598:	4916      	ldr	r1, [pc, #88]	; (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 800459a:	4313      	orrs	r3, r2
 800459c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	f003 0308 	and.w	r3, r3, #8
 80045a6:	2b00      	cmp	r3, #0
 80045a8:	d009      	beq.n	80045be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045aa:	4b12      	ldr	r3, [pc, #72]	; (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045ac:	689b      	ldr	r3, [r3, #8]
 80045ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	00db      	lsls	r3, r3, #3
 80045b8:	490e      	ldr	r1, [pc, #56]	; (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	4313      	orrs	r3, r2
 80045bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045be:	f000 f821 	bl	8004604 <HAL_RCC_GetSysClockFreq>
 80045c2:	4602      	mov	r2, r0
 80045c4:	4b0b      	ldr	r3, [pc, #44]	; (80045f4 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	091b      	lsrs	r3, r3, #4
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	490a      	ldr	r1, [pc, #40]	; (80045f8 <HAL_RCC_ClockConfig+0x1c0>)
 80045d0:	5ccb      	ldrb	r3, [r1, r3]
 80045d2:	fa22 f303 	lsr.w	r3, r2, r3
 80045d6:	4a09      	ldr	r2, [pc, #36]	; (80045fc <HAL_RCC_ClockConfig+0x1c4>)
 80045d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80045da:	4b09      	ldr	r3, [pc, #36]	; (8004600 <HAL_RCC_ClockConfig+0x1c8>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	4618      	mov	r0, r3
 80045e0:	f7fe f99a 	bl	8002918 <HAL_InitTick>

  return HAL_OK;
 80045e4:	2300      	movs	r3, #0
}
 80045e6:	4618      	mov	r0, r3
 80045e8:	3710      	adds	r7, #16
 80045ea:	46bd      	mov	sp, r7
 80045ec:	bd80      	pop	{r7, pc}
 80045ee:	bf00      	nop
 80045f0:	40023c00 	.word	0x40023c00
 80045f4:	40023800 	.word	0x40023800
 80045f8:	08008084 	.word	0x08008084
 80045fc:	200009c8 	.word	0x200009c8
 8004600:	200009cc 	.word	0x200009cc

08004604 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004604:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004608:	b094      	sub	sp, #80	; 0x50
 800460a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800460c:	2300      	movs	r3, #0
 800460e:	647b      	str	r3, [r7, #68]	; 0x44
 8004610:	2300      	movs	r3, #0
 8004612:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004614:	2300      	movs	r3, #0
 8004616:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004618:	2300      	movs	r3, #0
 800461a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800461c:	4b79      	ldr	r3, [pc, #484]	; (8004804 <HAL_RCC_GetSysClockFreq+0x200>)
 800461e:	689b      	ldr	r3, [r3, #8]
 8004620:	f003 030c 	and.w	r3, r3, #12
 8004624:	2b08      	cmp	r3, #8
 8004626:	d00d      	beq.n	8004644 <HAL_RCC_GetSysClockFreq+0x40>
 8004628:	2b08      	cmp	r3, #8
 800462a:	f200 80e1 	bhi.w	80047f0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800462e:	2b00      	cmp	r3, #0
 8004630:	d002      	beq.n	8004638 <HAL_RCC_GetSysClockFreq+0x34>
 8004632:	2b04      	cmp	r3, #4
 8004634:	d003      	beq.n	800463e <HAL_RCC_GetSysClockFreq+0x3a>
 8004636:	e0db      	b.n	80047f0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004638:	4b73      	ldr	r3, [pc, #460]	; (8004808 <HAL_RCC_GetSysClockFreq+0x204>)
 800463a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800463c:	e0db      	b.n	80047f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800463e:	4b73      	ldr	r3, [pc, #460]	; (800480c <HAL_RCC_GetSysClockFreq+0x208>)
 8004640:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004642:	e0d8      	b.n	80047f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004644:	4b6f      	ldr	r3, [pc, #444]	; (8004804 <HAL_RCC_GetSysClockFreq+0x200>)
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800464c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800464e:	4b6d      	ldr	r3, [pc, #436]	; (8004804 <HAL_RCC_GetSysClockFreq+0x200>)
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d063      	beq.n	8004722 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800465a:	4b6a      	ldr	r3, [pc, #424]	; (8004804 <HAL_RCC_GetSysClockFreq+0x200>)
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	099b      	lsrs	r3, r3, #6
 8004660:	2200      	movs	r2, #0
 8004662:	63bb      	str	r3, [r7, #56]	; 0x38
 8004664:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004666:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004668:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800466c:	633b      	str	r3, [r7, #48]	; 0x30
 800466e:	2300      	movs	r3, #0
 8004670:	637b      	str	r3, [r7, #52]	; 0x34
 8004672:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004676:	4622      	mov	r2, r4
 8004678:	462b      	mov	r3, r5
 800467a:	f04f 0000 	mov.w	r0, #0
 800467e:	f04f 0100 	mov.w	r1, #0
 8004682:	0159      	lsls	r1, r3, #5
 8004684:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004688:	0150      	lsls	r0, r2, #5
 800468a:	4602      	mov	r2, r0
 800468c:	460b      	mov	r3, r1
 800468e:	4621      	mov	r1, r4
 8004690:	1a51      	subs	r1, r2, r1
 8004692:	6139      	str	r1, [r7, #16]
 8004694:	4629      	mov	r1, r5
 8004696:	eb63 0301 	sbc.w	r3, r3, r1
 800469a:	617b      	str	r3, [r7, #20]
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	f04f 0300 	mov.w	r3, #0
 80046a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046a8:	4659      	mov	r1, fp
 80046aa:	018b      	lsls	r3, r1, #6
 80046ac:	4651      	mov	r1, sl
 80046ae:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046b2:	4651      	mov	r1, sl
 80046b4:	018a      	lsls	r2, r1, #6
 80046b6:	4651      	mov	r1, sl
 80046b8:	ebb2 0801 	subs.w	r8, r2, r1
 80046bc:	4659      	mov	r1, fp
 80046be:	eb63 0901 	sbc.w	r9, r3, r1
 80046c2:	f04f 0200 	mov.w	r2, #0
 80046c6:	f04f 0300 	mov.w	r3, #0
 80046ca:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046ce:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046d2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046d6:	4690      	mov	r8, r2
 80046d8:	4699      	mov	r9, r3
 80046da:	4623      	mov	r3, r4
 80046dc:	eb18 0303 	adds.w	r3, r8, r3
 80046e0:	60bb      	str	r3, [r7, #8]
 80046e2:	462b      	mov	r3, r5
 80046e4:	eb49 0303 	adc.w	r3, r9, r3
 80046e8:	60fb      	str	r3, [r7, #12]
 80046ea:	f04f 0200 	mov.w	r2, #0
 80046ee:	f04f 0300 	mov.w	r3, #0
 80046f2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046f6:	4629      	mov	r1, r5
 80046f8:	024b      	lsls	r3, r1, #9
 80046fa:	4621      	mov	r1, r4
 80046fc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004700:	4621      	mov	r1, r4
 8004702:	024a      	lsls	r2, r1, #9
 8004704:	4610      	mov	r0, r2
 8004706:	4619      	mov	r1, r3
 8004708:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800470a:	2200      	movs	r2, #0
 800470c:	62bb      	str	r3, [r7, #40]	; 0x28
 800470e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004710:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004714:	f7fb fdc4 	bl	80002a0 <__aeabi_uldivmod>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4613      	mov	r3, r2
 800471e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004720:	e058      	b.n	80047d4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004722:	4b38      	ldr	r3, [pc, #224]	; (8004804 <HAL_RCC_GetSysClockFreq+0x200>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	099b      	lsrs	r3, r3, #6
 8004728:	2200      	movs	r2, #0
 800472a:	4618      	mov	r0, r3
 800472c:	4611      	mov	r1, r2
 800472e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004732:	623b      	str	r3, [r7, #32]
 8004734:	2300      	movs	r3, #0
 8004736:	627b      	str	r3, [r7, #36]	; 0x24
 8004738:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800473c:	4642      	mov	r2, r8
 800473e:	464b      	mov	r3, r9
 8004740:	f04f 0000 	mov.w	r0, #0
 8004744:	f04f 0100 	mov.w	r1, #0
 8004748:	0159      	lsls	r1, r3, #5
 800474a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800474e:	0150      	lsls	r0, r2, #5
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4641      	mov	r1, r8
 8004756:	ebb2 0a01 	subs.w	sl, r2, r1
 800475a:	4649      	mov	r1, r9
 800475c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004760:	f04f 0200 	mov.w	r2, #0
 8004764:	f04f 0300 	mov.w	r3, #0
 8004768:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800476c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004770:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004774:	ebb2 040a 	subs.w	r4, r2, sl
 8004778:	eb63 050b 	sbc.w	r5, r3, fp
 800477c:	f04f 0200 	mov.w	r2, #0
 8004780:	f04f 0300 	mov.w	r3, #0
 8004784:	00eb      	lsls	r3, r5, #3
 8004786:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800478a:	00e2      	lsls	r2, r4, #3
 800478c:	4614      	mov	r4, r2
 800478e:	461d      	mov	r5, r3
 8004790:	4643      	mov	r3, r8
 8004792:	18e3      	adds	r3, r4, r3
 8004794:	603b      	str	r3, [r7, #0]
 8004796:	464b      	mov	r3, r9
 8004798:	eb45 0303 	adc.w	r3, r5, r3
 800479c:	607b      	str	r3, [r7, #4]
 800479e:	f04f 0200 	mov.w	r2, #0
 80047a2:	f04f 0300 	mov.w	r3, #0
 80047a6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047aa:	4629      	mov	r1, r5
 80047ac:	028b      	lsls	r3, r1, #10
 80047ae:	4621      	mov	r1, r4
 80047b0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047b4:	4621      	mov	r1, r4
 80047b6:	028a      	lsls	r2, r1, #10
 80047b8:	4610      	mov	r0, r2
 80047ba:	4619      	mov	r1, r3
 80047bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047be:	2200      	movs	r2, #0
 80047c0:	61bb      	str	r3, [r7, #24]
 80047c2:	61fa      	str	r2, [r7, #28]
 80047c4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047c8:	f7fb fd6a 	bl	80002a0 <__aeabi_uldivmod>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	4613      	mov	r3, r2
 80047d2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80047d4:	4b0b      	ldr	r3, [pc, #44]	; (8004804 <HAL_RCC_GetSysClockFreq+0x200>)
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	0c1b      	lsrs	r3, r3, #16
 80047da:	f003 0303 	and.w	r3, r3, #3
 80047de:	3301      	adds	r3, #1
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80047e4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80047e6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047ec:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047ee:	e002      	b.n	80047f6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047f0:	4b05      	ldr	r3, [pc, #20]	; (8004808 <HAL_RCC_GetSysClockFreq+0x204>)
 80047f2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80047f4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80047f8:	4618      	mov	r0, r3
 80047fa:	3750      	adds	r7, #80	; 0x50
 80047fc:	46bd      	mov	sp, r7
 80047fe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004802:	bf00      	nop
 8004804:	40023800 	.word	0x40023800
 8004808:	00f42400 	.word	0x00f42400
 800480c:	007a1200 	.word	0x007a1200

08004810 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004810:	b480      	push	{r7}
 8004812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004814:	4b03      	ldr	r3, [pc, #12]	; (8004824 <HAL_RCC_GetHCLKFreq+0x14>)
 8004816:	681b      	ldr	r3, [r3, #0]
}
 8004818:	4618      	mov	r0, r3
 800481a:	46bd      	mov	sp, r7
 800481c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004820:	4770      	bx	lr
 8004822:	bf00      	nop
 8004824:	200009c8 	.word	0x200009c8

08004828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004828:	b580      	push	{r7, lr}
 800482a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800482c:	f7ff fff0 	bl	8004810 <HAL_RCC_GetHCLKFreq>
 8004830:	4602      	mov	r2, r0
 8004832:	4b05      	ldr	r3, [pc, #20]	; (8004848 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004834:	689b      	ldr	r3, [r3, #8]
 8004836:	0a9b      	lsrs	r3, r3, #10
 8004838:	f003 0307 	and.w	r3, r3, #7
 800483c:	4903      	ldr	r1, [pc, #12]	; (800484c <HAL_RCC_GetPCLK1Freq+0x24>)
 800483e:	5ccb      	ldrb	r3, [r1, r3]
 8004840:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004844:	4618      	mov	r0, r3
 8004846:	bd80      	pop	{r7, pc}
 8004848:	40023800 	.word	0x40023800
 800484c:	08008094 	.word	0x08008094

08004850 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004854:	f7ff ffdc 	bl	8004810 <HAL_RCC_GetHCLKFreq>
 8004858:	4602      	mov	r2, r0
 800485a:	4b05      	ldr	r3, [pc, #20]	; (8004870 <HAL_RCC_GetPCLK2Freq+0x20>)
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	0b5b      	lsrs	r3, r3, #13
 8004860:	f003 0307 	and.w	r3, r3, #7
 8004864:	4903      	ldr	r1, [pc, #12]	; (8004874 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004866:	5ccb      	ldrb	r3, [r1, r3]
 8004868:	fa22 f303 	lsr.w	r3, r2, r3
}
 800486c:	4618      	mov	r0, r3
 800486e:	bd80      	pop	{r7, pc}
 8004870:	40023800 	.word	0x40023800
 8004874:	08008094 	.word	0x08008094

08004878 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004878:	b580      	push	{r7, lr}
 800487a:	b082      	sub	sp, #8
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d101      	bne.n	800488a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e03f      	b.n	800490a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d106      	bne.n	80048a4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800489e:	6878      	ldr	r0, [r7, #4]
 80048a0:	f7fd fbc6 	bl	8002030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2224      	movs	r2, #36	; 0x24
 80048a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	68da      	ldr	r2, [r3, #12]
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048ba:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 fe81 	bl	80055c4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	691a      	ldr	r2, [r3, #16]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048d0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	695a      	ldr	r2, [r3, #20]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048e0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	68da      	ldr	r2, [r3, #12]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80048f0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	2200      	movs	r2, #0
 80048f6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2220      	movs	r2, #32
 80048fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2220      	movs	r2, #32
 8004904:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004908:	2300      	movs	r3, #0
}
 800490a:	4618      	mov	r0, r3
 800490c:	3708      	adds	r7, #8
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}

08004912 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004912:	b580      	push	{r7, lr}
 8004914:	b08a      	sub	sp, #40	; 0x28
 8004916:	af02      	add	r7, sp, #8
 8004918:	60f8      	str	r0, [r7, #12]
 800491a:	60b9      	str	r1, [r7, #8]
 800491c:	603b      	str	r3, [r7, #0]
 800491e:	4613      	mov	r3, r2
 8004920:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004922:	2300      	movs	r3, #0
 8004924:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b20      	cmp	r3, #32
 8004930:	d17c      	bne.n	8004a2c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004932:	68bb      	ldr	r3, [r7, #8]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d002      	beq.n	800493e <HAL_UART_Transmit+0x2c>
 8004938:	88fb      	ldrh	r3, [r7, #6]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d101      	bne.n	8004942 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800493e:	2301      	movs	r3, #1
 8004940:	e075      	b.n	8004a2e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004948:	2b01      	cmp	r3, #1
 800494a:	d101      	bne.n	8004950 <HAL_UART_Transmit+0x3e>
 800494c:	2302      	movs	r3, #2
 800494e:	e06e      	b.n	8004a2e <HAL_UART_Transmit+0x11c>
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	2201      	movs	r2, #1
 8004954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004958:	68fb      	ldr	r3, [r7, #12]
 800495a:	2200      	movs	r2, #0
 800495c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2221      	movs	r2, #33	; 0x21
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004966:	f7fe f81b 	bl	80029a0 <HAL_GetTick>
 800496a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	88fa      	ldrh	r2, [r7, #6]
 8004970:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	88fa      	ldrh	r2, [r7, #6]
 8004976:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004980:	d108      	bne.n	8004994 <HAL_UART_Transmit+0x82>
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	691b      	ldr	r3, [r3, #16]
 8004986:	2b00      	cmp	r3, #0
 8004988:	d104      	bne.n	8004994 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800498a:	2300      	movs	r3, #0
 800498c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	61bb      	str	r3, [r7, #24]
 8004992:	e003      	b.n	800499c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004998:	2300      	movs	r3, #0
 800499a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80049a4:	e02a      	b.n	80049fc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2200      	movs	r2, #0
 80049ae:	2180      	movs	r1, #128	; 0x80
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 fbc1 	bl	8005138 <UART_WaitOnFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d001      	beq.n	80049c0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80049bc:	2303      	movs	r3, #3
 80049be:	e036      	b.n	8004a2e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80049c0:	69fb      	ldr	r3, [r7, #28]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d10b      	bne.n	80049de <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049c6:	69bb      	ldr	r3, [r7, #24]
 80049c8:	881b      	ldrh	r3, [r3, #0]
 80049ca:	461a      	mov	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049d4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049d6:	69bb      	ldr	r3, [r7, #24]
 80049d8:	3302      	adds	r3, #2
 80049da:	61bb      	str	r3, [r7, #24]
 80049dc:	e007      	b.n	80049ee <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049de:	69fb      	ldr	r3, [r7, #28]
 80049e0:	781a      	ldrb	r2, [r3, #0]
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049e8:	69fb      	ldr	r3, [r7, #28]
 80049ea:	3301      	adds	r3, #1
 80049ec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049f2:	b29b      	uxth	r3, r3
 80049f4:	3b01      	subs	r3, #1
 80049f6:	b29a      	uxth	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a00:	b29b      	uxth	r3, r3
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d1cf      	bne.n	80049a6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	9300      	str	r3, [sp, #0]
 8004a0a:	697b      	ldr	r3, [r7, #20]
 8004a0c:	2200      	movs	r2, #0
 8004a0e:	2140      	movs	r1, #64	; 0x40
 8004a10:	68f8      	ldr	r0, [r7, #12]
 8004a12:	f000 fb91 	bl	8005138 <UART_WaitOnFlagUntilTimeout>
 8004a16:	4603      	mov	r3, r0
 8004a18:	2b00      	cmp	r3, #0
 8004a1a:	d001      	beq.n	8004a20 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a1c:	2303      	movs	r3, #3
 8004a1e:	e006      	b.n	8004a2e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2220      	movs	r2, #32
 8004a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a28:	2300      	movs	r3, #0
 8004a2a:	e000      	b.n	8004a2e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a2c:	2302      	movs	r3, #2
  }
}
 8004a2e:	4618      	mov	r0, r3
 8004a30:	3720      	adds	r7, #32
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}

08004a36 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a36:	b580      	push	{r7, lr}
 8004a38:	b08a      	sub	sp, #40	; 0x28
 8004a3a:	af02      	add	r7, sp, #8
 8004a3c:	60f8      	str	r0, [r7, #12]
 8004a3e:	60b9      	str	r1, [r7, #8]
 8004a40:	603b      	str	r3, [r7, #0]
 8004a42:	4613      	mov	r3, r2
 8004a44:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a46:	2300      	movs	r3, #0
 8004a48:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a50:	b2db      	uxtb	r3, r3
 8004a52:	2b20      	cmp	r3, #32
 8004a54:	f040 808c 	bne.w	8004b70 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d002      	beq.n	8004a64 <HAL_UART_Receive+0x2e>
 8004a5e:	88fb      	ldrh	r3, [r7, #6]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d101      	bne.n	8004a68 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	e084      	b.n	8004b72 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a6e:	2b01      	cmp	r3, #1
 8004a70:	d101      	bne.n	8004a76 <HAL_UART_Receive+0x40>
 8004a72:	2302      	movs	r3, #2
 8004a74:	e07d      	b.n	8004b72 <HAL_UART_Receive+0x13c>
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	2201      	movs	r2, #1
 8004a7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	2200      	movs	r2, #0
 8004a82:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	2222      	movs	r2, #34	; 0x22
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004a92:	f7fd ff85 	bl	80029a0 <HAL_GetTick>
 8004a96:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	88fa      	ldrh	r2, [r7, #6]
 8004a9c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	88fa      	ldrh	r2, [r7, #6]
 8004aa2:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	689b      	ldr	r3, [r3, #8]
 8004aa8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004aac:	d108      	bne.n	8004ac0 <HAL_UART_Receive+0x8a>
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d104      	bne.n	8004ac0 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004aba:	68bb      	ldr	r3, [r7, #8]
 8004abc:	61bb      	str	r3, [r7, #24]
 8004abe:	e003      	b.n	8004ac8 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004ac0:	68bb      	ldr	r3, [r7, #8]
 8004ac2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	2200      	movs	r2, #0
 8004acc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004ad0:	e043      	b.n	8004b5a <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004ad2:	683b      	ldr	r3, [r7, #0]
 8004ad4:	9300      	str	r3, [sp, #0]
 8004ad6:	697b      	ldr	r3, [r7, #20]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	2120      	movs	r1, #32
 8004adc:	68f8      	ldr	r0, [r7, #12]
 8004ade:	f000 fb2b 	bl	8005138 <UART_WaitOnFlagUntilTimeout>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d001      	beq.n	8004aec <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004ae8:	2303      	movs	r3, #3
 8004aea:	e042      	b.n	8004b72 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004aec:	69fb      	ldr	r3, [r7, #28]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d10c      	bne.n	8004b0c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	b29b      	uxth	r3, r3
 8004afa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	69bb      	ldr	r3, [r7, #24]
 8004b02:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	3302      	adds	r3, #2
 8004b08:	61bb      	str	r3, [r7, #24]
 8004b0a:	e01f      	b.n	8004b4c <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b14:	d007      	beq.n	8004b26 <HAL_UART_Receive+0xf0>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	689b      	ldr	r3, [r3, #8]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10a      	bne.n	8004b34 <HAL_UART_Receive+0xfe>
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	691b      	ldr	r3, [r3, #16]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d106      	bne.n	8004b34 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	685b      	ldr	r3, [r3, #4]
 8004b2c:	b2da      	uxtb	r2, r3
 8004b2e:	69fb      	ldr	r3, [r7, #28]
 8004b30:	701a      	strb	r2, [r3, #0]
 8004b32:	e008      	b.n	8004b46 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	685b      	ldr	r3, [r3, #4]
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b40:	b2da      	uxtb	r2, r3
 8004b42:	69fb      	ldr	r3, [r7, #28]
 8004b44:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b50:	b29b      	uxth	r3, r3
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b5e:	b29b      	uxth	r3, r3
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d1b6      	bne.n	8004ad2 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	2220      	movs	r2, #32
 8004b68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004b6c:	2300      	movs	r3, #0
 8004b6e:	e000      	b.n	8004b72 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004b70:	2302      	movs	r3, #2
  }
}
 8004b72:	4618      	mov	r0, r3
 8004b74:	3720      	adds	r7, #32
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}

08004b7a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b7a:	b580      	push	{r7, lr}
 8004b7c:	b084      	sub	sp, #16
 8004b7e:	af00      	add	r7, sp, #0
 8004b80:	60f8      	str	r0, [r7, #12]
 8004b82:	60b9      	str	r1, [r7, #8]
 8004b84:	4613      	mov	r3, r2
 8004b86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b8e:	b2db      	uxtb	r3, r3
 8004b90:	2b20      	cmp	r3, #32
 8004b92:	d11d      	bne.n	8004bd0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d002      	beq.n	8004ba0 <HAL_UART_Receive_IT+0x26>
 8004b9a:	88fb      	ldrh	r3, [r7, #6]
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d101      	bne.n	8004ba4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004ba0:	2301      	movs	r3, #1
 8004ba2:	e016      	b.n	8004bd2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004baa:	2b01      	cmp	r3, #1
 8004bac:	d101      	bne.n	8004bb2 <HAL_UART_Receive_IT+0x38>
 8004bae:	2302      	movs	r3, #2
 8004bb0:	e00f      	b.n	8004bd2 <HAL_UART_Receive_IT+0x58>
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	2201      	movs	r2, #1
 8004bb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 fb24 	bl	8005214 <UART_Start_Receive_IT>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	e000      	b.n	8004bd2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004bd0:	2302      	movs	r3, #2
  }
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b0ba      	sub	sp, #232	; 0xe8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10f      	bne.n	8004c42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d009      	beq.n	8004c42 <HAL_UART_IRQHandler+0x66>
 8004c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fc07 	bl	800544e <UART_Receive_IT>
      return;
 8004c40:	e256      	b.n	80050f0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 80de 	beq.w	8004e08 <HAL_UART_IRQHandler+0x22c>
 8004c4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d106      	bne.n	8004c66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c5c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 80d1 	beq.w	8004e08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00b      	beq.n	8004c8a <HAL_UART_IRQHandler+0xae>
 8004c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c82:	f043 0201 	orr.w	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00b      	beq.n	8004cae <HAL_UART_IRQHandler+0xd2>
 8004c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d005      	beq.n	8004cae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ca6:	f043 0202 	orr.w	r2, r3, #2
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00b      	beq.n	8004cd2 <HAL_UART_IRQHandler+0xf6>
 8004cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d005      	beq.n	8004cd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cca:	f043 0204 	orr.w	r2, r3, #4
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d011      	beq.n	8004d02 <HAL_UART_IRQHandler+0x126>
 8004cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d105      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d005      	beq.n	8004d02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cfa:	f043 0208 	orr.w	r2, r3, #8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 81ed 	beq.w	80050e6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <HAL_UART_IRQHandler+0x14e>
 8004d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fb92 	bl	800544e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d34:	2b40      	cmp	r3, #64	; 0x40
 8004d36:	bf0c      	ite	eq
 8004d38:	2301      	moveq	r3, #1
 8004d3a:	2300      	movne	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d103      	bne.n	8004d56 <HAL_UART_IRQHandler+0x17a>
 8004d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d04f      	beq.n	8004df6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fa9a 	bl	8005290 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d66:	2b40      	cmp	r3, #64	; 0x40
 8004d68:	d141      	bne.n	8004dee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3314      	adds	r3, #20
 8004d70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004d78:	e853 3f00 	ldrex	r3, [r3]
 8004d7c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004d84:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004d88:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3314      	adds	r3, #20
 8004d92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004d96:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004da2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004dae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1d9      	bne.n	8004d6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d013      	beq.n	8004de6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dc2:	4a7d      	ldr	r2, [pc, #500]	; (8004fb8 <HAL_UART_IRQHandler+0x3dc>)
 8004dc4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fd ff99 	bl	8002d02 <HAL_DMA_Abort_IT>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d016      	beq.n	8004e04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004de0:	4610      	mov	r0, r2
 8004de2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de4:	e00e      	b.n	8004e04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f990 	bl	800510c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dec:	e00a      	b.n	8004e04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f98c 	bl	800510c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df4:	e006      	b.n	8004e04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f988 	bl	800510c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e02:	e170      	b.n	80050e6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e04:	bf00      	nop
    return;
 8004e06:	e16e      	b.n	80050e6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	f040 814a 	bne.w	80050a6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 8143 	beq.w	80050a6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 813c 	beq.w	80050a6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60bb      	str	r3, [r7, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e4e:	2b40      	cmp	r3, #64	; 0x40
 8004e50:	f040 80b4 	bne.w	8004fbc <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8140 	beq.w	80050ea <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e72:	429a      	cmp	r2, r3
 8004e74:	f080 8139 	bcs.w	80050ea <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e7e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004e8a:	f000 8088 	beq.w	8004f9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	330c      	adds	r3, #12
 8004e94:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004e9c:	e853 3f00 	ldrex	r3, [r3]
 8004ea0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ea4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ea8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004eac:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	330c      	adds	r3, #12
 8004eb6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004eba:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004ebe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ec6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004eca:	e841 2300 	strex	r3, r2, [r1]
 8004ece:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1d9      	bne.n	8004e8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3314      	adds	r3, #20
 8004ee0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004eea:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3314      	adds	r3, #20
 8004efa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004efe:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f02:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f04:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f06:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f10:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e1      	bne.n	8004eda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3314      	adds	r3, #20
 8004f1c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f20:	e853 3f00 	ldrex	r3, [r3]
 8004f24:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f26:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f28:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	3314      	adds	r3, #20
 8004f36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f3a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f3c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f40:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f42:	e841 2300 	strex	r3, r2, [r1]
 8004f46:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1e3      	bne.n	8004f16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	330c      	adds	r3, #12
 8004f62:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f6c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f6e:	f023 0310 	bic.w	r3, r3, #16
 8004f72:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	330c      	adds	r3, #12
 8004f7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004f80:	65ba      	str	r2, [r7, #88]	; 0x58
 8004f82:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004f86:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004f8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e3      	bne.n	8004f5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fd fe42 	bl	8002c22 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fa6:	b29b      	uxth	r3, r3
 8004fa8:	1ad3      	subs	r3, r2, r3
 8004faa:	b29b      	uxth	r3, r3
 8004fac:	4619      	mov	r1, r3
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f000 f8b6 	bl	8005120 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fb4:	e099      	b.n	80050ea <HAL_UART_IRQHandler+0x50e>
 8004fb6:	bf00      	nop
 8004fb8:	08005357 	.word	0x08005357
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fc4:	b29b      	uxth	r3, r3
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fd0:	b29b      	uxth	r3, r3
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	f000 808b 	beq.w	80050ee <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8004fd8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	f000 8086 	beq.w	80050ee <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	330c      	adds	r3, #12
 8004fe8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fec:	e853 3f00 	ldrex	r3, [r3]
 8004ff0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004ff8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	330c      	adds	r3, #12
 8005002:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005006:	647a      	str	r2, [r7, #68]	; 0x44
 8005008:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800500c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800500e:	e841 2300 	strex	r3, r2, [r1]
 8005012:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005014:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005016:	2b00      	cmp	r3, #0
 8005018:	d1e3      	bne.n	8004fe2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	3314      	adds	r3, #20
 8005020:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005024:	e853 3f00 	ldrex	r3, [r3]
 8005028:	623b      	str	r3, [r7, #32]
   return(result);
 800502a:	6a3b      	ldr	r3, [r7, #32]
 800502c:	f023 0301 	bic.w	r3, r3, #1
 8005030:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	3314      	adds	r3, #20
 800503a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800503e:	633a      	str	r2, [r7, #48]	; 0x30
 8005040:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005042:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005044:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005046:	e841 2300 	strex	r3, r2, [r1]
 800504a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800504c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800504e:	2b00      	cmp	r3, #0
 8005050:	d1e3      	bne.n	800501a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2220      	movs	r2, #32
 8005056:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	2200      	movs	r2, #0
 800505e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	330c      	adds	r3, #12
 8005066:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005068:	693b      	ldr	r3, [r7, #16]
 800506a:	e853 3f00 	ldrex	r3, [r3]
 800506e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	f023 0310 	bic.w	r3, r3, #16
 8005076:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	330c      	adds	r3, #12
 8005080:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005084:	61fa      	str	r2, [r7, #28]
 8005086:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005088:	69b9      	ldr	r1, [r7, #24]
 800508a:	69fa      	ldr	r2, [r7, #28]
 800508c:	e841 2300 	strex	r3, r2, [r1]
 8005090:	617b      	str	r3, [r7, #20]
   return(result);
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d1e3      	bne.n	8005060 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005098:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800509c:	4619      	mov	r1, r3
 800509e:	6878      	ldr	r0, [r7, #4]
 80050a0:	f000 f83e 	bl	8005120 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050a4:	e023      	b.n	80050ee <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d009      	beq.n	80050c6 <HAL_UART_IRQHandler+0x4ea>
 80050b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d003      	beq.n	80050c6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f000 f95d 	bl	800537e <UART_Transmit_IT>
    return;
 80050c4:	e014      	b.n	80050f0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d00e      	beq.n	80050f0 <HAL_UART_IRQHandler+0x514>
 80050d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d008      	beq.n	80050f0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80050de:	6878      	ldr	r0, [r7, #4]
 80050e0:	f000 f99d 	bl	800541e <UART_EndTransmit_IT>
    return;
 80050e4:	e004      	b.n	80050f0 <HAL_UART_IRQHandler+0x514>
    return;
 80050e6:	bf00      	nop
 80050e8:	e002      	b.n	80050f0 <HAL_UART_IRQHandler+0x514>
      return;
 80050ea:	bf00      	nop
 80050ec:	e000      	b.n	80050f0 <HAL_UART_IRQHandler+0x514>
      return;
 80050ee:	bf00      	nop
  }
}
 80050f0:	37e8      	adds	r7, #232	; 0xe8
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop

080050f8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80050f8:	b480      	push	{r7}
 80050fa:	b083      	sub	sp, #12
 80050fc:	af00      	add	r7, sp, #0
 80050fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005100:	bf00      	nop
 8005102:	370c      	adds	r7, #12
 8005104:	46bd      	mov	sp, r7
 8005106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800510a:	4770      	bx	lr

0800510c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800510c:	b480      	push	{r7}
 800510e:	b083      	sub	sp, #12
 8005110:	af00      	add	r7, sp, #0
 8005112:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005114:	bf00      	nop
 8005116:	370c      	adds	r7, #12
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005120:	b480      	push	{r7}
 8005122:	b083      	sub	sp, #12
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	460b      	mov	r3, r1
 800512a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005138:	b580      	push	{r7, lr}
 800513a:	b090      	sub	sp, #64	; 0x40
 800513c:	af00      	add	r7, sp, #0
 800513e:	60f8      	str	r0, [r7, #12]
 8005140:	60b9      	str	r1, [r7, #8]
 8005142:	603b      	str	r3, [r7, #0]
 8005144:	4613      	mov	r3, r2
 8005146:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005148:	e050      	b.n	80051ec <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800514a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800514c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005150:	d04c      	beq.n	80051ec <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005154:	2b00      	cmp	r3, #0
 8005156:	d007      	beq.n	8005168 <UART_WaitOnFlagUntilTimeout+0x30>
 8005158:	f7fd fc22 	bl	80029a0 <HAL_GetTick>
 800515c:	4602      	mov	r2, r0
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	1ad3      	subs	r3, r2, r3
 8005162:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005164:	429a      	cmp	r2, r3
 8005166:	d241      	bcs.n	80051ec <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	330c      	adds	r3, #12
 800516e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005178:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800517e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	330c      	adds	r3, #12
 8005186:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005188:	637a      	str	r2, [r7, #52]	; 0x34
 800518a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800518e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005196:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e5      	bne.n	8005168 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	3314      	adds	r3, #20
 80051a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a4:	697b      	ldr	r3, [r7, #20]
 80051a6:	e853 3f00 	ldrex	r3, [r3]
 80051aa:	613b      	str	r3, [r7, #16]
   return(result);
 80051ac:	693b      	ldr	r3, [r7, #16]
 80051ae:	f023 0301 	bic.w	r3, r3, #1
 80051b2:	63bb      	str	r3, [r7, #56]	; 0x38
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	3314      	adds	r3, #20
 80051ba:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051bc:	623a      	str	r2, [r7, #32]
 80051be:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c0:	69f9      	ldr	r1, [r7, #28]
 80051c2:	6a3a      	ldr	r2, [r7, #32]
 80051c4:	e841 2300 	strex	r3, r2, [r1]
 80051c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80051ca:	69bb      	ldr	r3, [r7, #24]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d1e5      	bne.n	800519c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	2220      	movs	r2, #32
 80051d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	2220      	movs	r2, #32
 80051dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80051e8:	2303      	movs	r3, #3
 80051ea:	e00f      	b.n	800520c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	681a      	ldr	r2, [r3, #0]
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	4013      	ands	r3, r2
 80051f6:	68ba      	ldr	r2, [r7, #8]
 80051f8:	429a      	cmp	r2, r3
 80051fa:	bf0c      	ite	eq
 80051fc:	2301      	moveq	r3, #1
 80051fe:	2300      	movne	r3, #0
 8005200:	b2db      	uxtb	r3, r3
 8005202:	461a      	mov	r2, r3
 8005204:	79fb      	ldrb	r3, [r7, #7]
 8005206:	429a      	cmp	r2, r3
 8005208:	d09f      	beq.n	800514a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	3740      	adds	r7, #64	; 0x40
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005214:	b480      	push	{r7}
 8005216:	b085      	sub	sp, #20
 8005218:	af00      	add	r7, sp, #0
 800521a:	60f8      	str	r0, [r7, #12]
 800521c:	60b9      	str	r1, [r7, #8]
 800521e:	4613      	mov	r3, r2
 8005220:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	88fa      	ldrh	r2, [r7, #6]
 800522c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	88fa      	ldrh	r2, [r7, #6]
 8005232:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2200      	movs	r2, #0
 8005238:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800523a:	68fb      	ldr	r3, [r7, #12]
 800523c:	2222      	movs	r2, #34	; 0x22
 800523e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	2200      	movs	r2, #0
 8005246:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	691b      	ldr	r3, [r3, #16]
 800524e:	2b00      	cmp	r3, #0
 8005250:	d007      	beq.n	8005262 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	68da      	ldr	r2, [r3, #12]
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005260:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	695a      	ldr	r2, [r3, #20]
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f042 0201 	orr.w	r2, r2, #1
 8005270:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68da      	ldr	r2, [r3, #12]
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	f042 0220 	orr.w	r2, r2, #32
 8005280:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3714      	adds	r7, #20
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005290:	b480      	push	{r7}
 8005292:	b095      	sub	sp, #84	; 0x54
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	330c      	adds	r3, #12
 800529e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052a2:	e853 3f00 	ldrex	r3, [r3]
 80052a6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052aa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	330c      	adds	r3, #12
 80052b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052b8:	643a      	str	r2, [r7, #64]	; 0x40
 80052ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052bc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052be:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052c0:	e841 2300 	strex	r3, r2, [r1]
 80052c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d1e5      	bne.n	8005298 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	3314      	adds	r3, #20
 80052d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052d4:	6a3b      	ldr	r3, [r7, #32]
 80052d6:	e853 3f00 	ldrex	r3, [r3]
 80052da:	61fb      	str	r3, [r7, #28]
   return(result);
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	f023 0301 	bic.w	r3, r3, #1
 80052e2:	64bb      	str	r3, [r7, #72]	; 0x48
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	3314      	adds	r3, #20
 80052ea:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80052ec:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052ee:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052f0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80052f2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80052f4:	e841 2300 	strex	r3, r2, [r1]
 80052f8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80052fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1e5      	bne.n	80052cc <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005304:	2b01      	cmp	r3, #1
 8005306:	d119      	bne.n	800533c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	330c      	adds	r3, #12
 800530e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	e853 3f00 	ldrex	r3, [r3]
 8005316:	60bb      	str	r3, [r7, #8]
   return(result);
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f023 0310 	bic.w	r3, r3, #16
 800531e:	647b      	str	r3, [r7, #68]	; 0x44
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	330c      	adds	r3, #12
 8005326:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005328:	61ba      	str	r2, [r7, #24]
 800532a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800532c:	6979      	ldr	r1, [r7, #20]
 800532e:	69ba      	ldr	r2, [r7, #24]
 8005330:	e841 2300 	strex	r3, r2, [r1]
 8005334:	613b      	str	r3, [r7, #16]
   return(result);
 8005336:	693b      	ldr	r3, [r7, #16]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d1e5      	bne.n	8005308 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2220      	movs	r2, #32
 8005340:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	2200      	movs	r2, #0
 8005348:	631a      	str	r2, [r3, #48]	; 0x30
}
 800534a:	bf00      	nop
 800534c:	3754      	adds	r7, #84	; 0x54
 800534e:	46bd      	mov	sp, r7
 8005350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005354:	4770      	bx	lr

08005356 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005356:	b580      	push	{r7, lr}
 8005358:	b084      	sub	sp, #16
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f7ff fecb 	bl	800510c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005376:	bf00      	nop
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}

0800537e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800537e:	b480      	push	{r7}
 8005380:	b085      	sub	sp, #20
 8005382:	af00      	add	r7, sp, #0
 8005384:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800538c:	b2db      	uxtb	r3, r3
 800538e:	2b21      	cmp	r3, #33	; 0x21
 8005390:	d13e      	bne.n	8005410 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800539a:	d114      	bne.n	80053c6 <UART_Transmit_IT+0x48>
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	691b      	ldr	r3, [r3, #16]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d110      	bne.n	80053c6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a1b      	ldr	r3, [r3, #32]
 80053a8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	881b      	ldrh	r3, [r3, #0]
 80053ae:	461a      	mov	r2, r3
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053b8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	6a1b      	ldr	r3, [r3, #32]
 80053be:	1c9a      	adds	r2, r3, #2
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	621a      	str	r2, [r3, #32]
 80053c4:	e008      	b.n	80053d8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	6a1b      	ldr	r3, [r3, #32]
 80053ca:	1c59      	adds	r1, r3, #1
 80053cc:	687a      	ldr	r2, [r7, #4]
 80053ce:	6211      	str	r1, [r2, #32]
 80053d0:	781a      	ldrb	r2, [r3, #0]
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80053dc:	b29b      	uxth	r3, r3
 80053de:	3b01      	subs	r3, #1
 80053e0:	b29b      	uxth	r3, r3
 80053e2:	687a      	ldr	r2, [r7, #4]
 80053e4:	4619      	mov	r1, r3
 80053e6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d10f      	bne.n	800540c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	68da      	ldr	r2, [r3, #12]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80053fa:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	68da      	ldr	r2, [r3, #12]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800540a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800540c:	2300      	movs	r3, #0
 800540e:	e000      	b.n	8005412 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005410:	2302      	movs	r3, #2
  }
}
 8005412:	4618      	mov	r0, r3
 8005414:	3714      	adds	r7, #20
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800541e:	b580      	push	{r7, lr}
 8005420:	b082      	sub	sp, #8
 8005422:	af00      	add	r7, sp, #0
 8005424:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	68da      	ldr	r2, [r3, #12]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005434:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2220      	movs	r2, #32
 800543a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800543e:	6878      	ldr	r0, [r7, #4]
 8005440:	f7ff fe5a 	bl	80050f8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005444:	2300      	movs	r3, #0
}
 8005446:	4618      	mov	r0, r3
 8005448:	3708      	adds	r7, #8
 800544a:	46bd      	mov	sp, r7
 800544c:	bd80      	pop	{r7, pc}

0800544e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800544e:	b580      	push	{r7, lr}
 8005450:	b08c      	sub	sp, #48	; 0x30
 8005452:	af00      	add	r7, sp, #0
 8005454:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800545c:	b2db      	uxtb	r3, r3
 800545e:	2b22      	cmp	r3, #34	; 0x22
 8005460:	f040 80ab 	bne.w	80055ba <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800546c:	d117      	bne.n	800549e <UART_Receive_IT+0x50>
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	691b      	ldr	r3, [r3, #16]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d113      	bne.n	800549e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005476:	2300      	movs	r3, #0
 8005478:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800547e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	685b      	ldr	r3, [r3, #4]
 8005486:	b29b      	uxth	r3, r3
 8005488:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800548c:	b29a      	uxth	r2, r3
 800548e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005490:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005496:	1c9a      	adds	r2, r3, #2
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	629a      	str	r2, [r3, #40]	; 0x28
 800549c:	e026      	b.n	80054ec <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054a2:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80054a4:	2300      	movs	r3, #0
 80054a6:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	689b      	ldr	r3, [r3, #8]
 80054ac:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054b0:	d007      	beq.n	80054c2 <UART_Receive_IT+0x74>
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d10a      	bne.n	80054d0 <UART_Receive_IT+0x82>
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d106      	bne.n	80054d0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	685b      	ldr	r3, [r3, #4]
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054cc:	701a      	strb	r2, [r3, #0]
 80054ce:	e008      	b.n	80054e2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	685b      	ldr	r3, [r3, #4]
 80054d6:	b2db      	uxtb	r3, r3
 80054d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054dc:	b2da      	uxtb	r2, r3
 80054de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054e6:	1c5a      	adds	r2, r3, #1
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	3b01      	subs	r3, #1
 80054f4:	b29b      	uxth	r3, r3
 80054f6:	687a      	ldr	r2, [r7, #4]
 80054f8:	4619      	mov	r1, r3
 80054fa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d15a      	bne.n	80055b6 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	68da      	ldr	r2, [r3, #12]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	f022 0220 	bic.w	r2, r2, #32
 800550e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	68da      	ldr	r2, [r3, #12]
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800551e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695a      	ldr	r2, [r3, #20]
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f022 0201 	bic.w	r2, r2, #1
 800552e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	2220      	movs	r2, #32
 8005534:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800553c:	2b01      	cmp	r3, #1
 800553e:	d135      	bne.n	80055ac <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2200      	movs	r2, #0
 8005544:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	330c      	adds	r3, #12
 800554c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	e853 3f00 	ldrex	r3, [r3]
 8005554:	613b      	str	r3, [r7, #16]
   return(result);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f023 0310 	bic.w	r3, r3, #16
 800555c:	627b      	str	r3, [r7, #36]	; 0x24
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	330c      	adds	r3, #12
 8005564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005566:	623a      	str	r2, [r7, #32]
 8005568:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800556a:	69f9      	ldr	r1, [r7, #28]
 800556c:	6a3a      	ldr	r2, [r7, #32]
 800556e:	e841 2300 	strex	r3, r2, [r1]
 8005572:	61bb      	str	r3, [r7, #24]
   return(result);
 8005574:	69bb      	ldr	r3, [r7, #24]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d1e5      	bne.n	8005546 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0310 	and.w	r3, r3, #16
 8005584:	2b10      	cmp	r3, #16
 8005586:	d10a      	bne.n	800559e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005588:	2300      	movs	r3, #0
 800558a:	60fb      	str	r3, [r7, #12]
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	685b      	ldr	r3, [r3, #4]
 800559a:	60fb      	str	r3, [r7, #12]
 800559c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055a2:	4619      	mov	r1, r3
 80055a4:	6878      	ldr	r0, [r7, #4]
 80055a6:	f7ff fdbb 	bl	8005120 <HAL_UARTEx_RxEventCallback>
 80055aa:	e002      	b.n	80055b2 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f7fb ff5b 	bl	8001468 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055b2:	2300      	movs	r3, #0
 80055b4:	e002      	b.n	80055bc <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80055b6:	2300      	movs	r3, #0
 80055b8:	e000      	b.n	80055bc <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80055ba:	2302      	movs	r3, #2
  }
}
 80055bc:	4618      	mov	r0, r3
 80055be:	3730      	adds	r7, #48	; 0x30
 80055c0:	46bd      	mov	sp, r7
 80055c2:	bd80      	pop	{r7, pc}

080055c4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055c4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055c8:	b0c0      	sub	sp, #256	; 0x100
 80055ca:	af00      	add	r7, sp, #0
 80055cc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	691b      	ldr	r3, [r3, #16]
 80055d8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80055dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e0:	68d9      	ldr	r1, [r3, #12]
 80055e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e6:	681a      	ldr	r2, [r3, #0]
 80055e8:	ea40 0301 	orr.w	r3, r0, r1
 80055ec:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80055ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f2:	689a      	ldr	r2, [r3, #8]
 80055f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055f8:	691b      	ldr	r3, [r3, #16]
 80055fa:	431a      	orrs	r2, r3
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005600:	695b      	ldr	r3, [r3, #20]
 8005602:	431a      	orrs	r2, r3
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005608:	69db      	ldr	r3, [r3, #28]
 800560a:	4313      	orrs	r3, r2
 800560c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68db      	ldr	r3, [r3, #12]
 8005618:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800561c:	f021 010c 	bic.w	r1, r1, #12
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800562a:	430b      	orrs	r3, r1
 800562c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800562e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	695b      	ldr	r3, [r3, #20]
 8005636:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800563a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563e:	6999      	ldr	r1, [r3, #24]
 8005640:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005644:	681a      	ldr	r2, [r3, #0]
 8005646:	ea40 0301 	orr.w	r3, r0, r1
 800564a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	4b8f      	ldr	r3, [pc, #572]	; (8005890 <UART_SetConfig+0x2cc>)
 8005654:	429a      	cmp	r2, r3
 8005656:	d005      	beq.n	8005664 <UART_SetConfig+0xa0>
 8005658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565c:	681a      	ldr	r2, [r3, #0]
 800565e:	4b8d      	ldr	r3, [pc, #564]	; (8005894 <UART_SetConfig+0x2d0>)
 8005660:	429a      	cmp	r2, r3
 8005662:	d104      	bne.n	800566e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005664:	f7ff f8f4 	bl	8004850 <HAL_RCC_GetPCLK2Freq>
 8005668:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800566c:	e003      	b.n	8005676 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800566e:	f7ff f8db 	bl	8004828 <HAL_RCC_GetPCLK1Freq>
 8005672:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567a:	69db      	ldr	r3, [r3, #28]
 800567c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005680:	f040 810c 	bne.w	800589c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005684:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005688:	2200      	movs	r2, #0
 800568a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800568e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005692:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005696:	4622      	mov	r2, r4
 8005698:	462b      	mov	r3, r5
 800569a:	1891      	adds	r1, r2, r2
 800569c:	65b9      	str	r1, [r7, #88]	; 0x58
 800569e:	415b      	adcs	r3, r3
 80056a0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056a2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056a6:	4621      	mov	r1, r4
 80056a8:	eb12 0801 	adds.w	r8, r2, r1
 80056ac:	4629      	mov	r1, r5
 80056ae:	eb43 0901 	adc.w	r9, r3, r1
 80056b2:	f04f 0200 	mov.w	r2, #0
 80056b6:	f04f 0300 	mov.w	r3, #0
 80056ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056c6:	4690      	mov	r8, r2
 80056c8:	4699      	mov	r9, r3
 80056ca:	4623      	mov	r3, r4
 80056cc:	eb18 0303 	adds.w	r3, r8, r3
 80056d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80056d4:	462b      	mov	r3, r5
 80056d6:	eb49 0303 	adc.w	r3, r9, r3
 80056da:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80056de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	2200      	movs	r2, #0
 80056e6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80056ea:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80056ee:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80056f2:	460b      	mov	r3, r1
 80056f4:	18db      	adds	r3, r3, r3
 80056f6:	653b      	str	r3, [r7, #80]	; 0x50
 80056f8:	4613      	mov	r3, r2
 80056fa:	eb42 0303 	adc.w	r3, r2, r3
 80056fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005700:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005704:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005708:	f7fa fdca 	bl	80002a0 <__aeabi_uldivmod>
 800570c:	4602      	mov	r2, r0
 800570e:	460b      	mov	r3, r1
 8005710:	4b61      	ldr	r3, [pc, #388]	; (8005898 <UART_SetConfig+0x2d4>)
 8005712:	fba3 2302 	umull	r2, r3, r3, r2
 8005716:	095b      	lsrs	r3, r3, #5
 8005718:	011c      	lsls	r4, r3, #4
 800571a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800571e:	2200      	movs	r2, #0
 8005720:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005724:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005728:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800572c:	4642      	mov	r2, r8
 800572e:	464b      	mov	r3, r9
 8005730:	1891      	adds	r1, r2, r2
 8005732:	64b9      	str	r1, [r7, #72]	; 0x48
 8005734:	415b      	adcs	r3, r3
 8005736:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005738:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800573c:	4641      	mov	r1, r8
 800573e:	eb12 0a01 	adds.w	sl, r2, r1
 8005742:	4649      	mov	r1, r9
 8005744:	eb43 0b01 	adc.w	fp, r3, r1
 8005748:	f04f 0200 	mov.w	r2, #0
 800574c:	f04f 0300 	mov.w	r3, #0
 8005750:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005754:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005758:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800575c:	4692      	mov	sl, r2
 800575e:	469b      	mov	fp, r3
 8005760:	4643      	mov	r3, r8
 8005762:	eb1a 0303 	adds.w	r3, sl, r3
 8005766:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800576a:	464b      	mov	r3, r9
 800576c:	eb4b 0303 	adc.w	r3, fp, r3
 8005770:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005774:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2200      	movs	r2, #0
 800577c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005780:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005784:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005788:	460b      	mov	r3, r1
 800578a:	18db      	adds	r3, r3, r3
 800578c:	643b      	str	r3, [r7, #64]	; 0x40
 800578e:	4613      	mov	r3, r2
 8005790:	eb42 0303 	adc.w	r3, r2, r3
 8005794:	647b      	str	r3, [r7, #68]	; 0x44
 8005796:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800579a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800579e:	f7fa fd7f 	bl	80002a0 <__aeabi_uldivmod>
 80057a2:	4602      	mov	r2, r0
 80057a4:	460b      	mov	r3, r1
 80057a6:	4611      	mov	r1, r2
 80057a8:	4b3b      	ldr	r3, [pc, #236]	; (8005898 <UART_SetConfig+0x2d4>)
 80057aa:	fba3 2301 	umull	r2, r3, r3, r1
 80057ae:	095b      	lsrs	r3, r3, #5
 80057b0:	2264      	movs	r2, #100	; 0x64
 80057b2:	fb02 f303 	mul.w	r3, r2, r3
 80057b6:	1acb      	subs	r3, r1, r3
 80057b8:	00db      	lsls	r3, r3, #3
 80057ba:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057be:	4b36      	ldr	r3, [pc, #216]	; (8005898 <UART_SetConfig+0x2d4>)
 80057c0:	fba3 2302 	umull	r2, r3, r3, r2
 80057c4:	095b      	lsrs	r3, r3, #5
 80057c6:	005b      	lsls	r3, r3, #1
 80057c8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057cc:	441c      	add	r4, r3
 80057ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057d2:	2200      	movs	r2, #0
 80057d4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80057d8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80057dc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80057e0:	4642      	mov	r2, r8
 80057e2:	464b      	mov	r3, r9
 80057e4:	1891      	adds	r1, r2, r2
 80057e6:	63b9      	str	r1, [r7, #56]	; 0x38
 80057e8:	415b      	adcs	r3, r3
 80057ea:	63fb      	str	r3, [r7, #60]	; 0x3c
 80057ec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80057f0:	4641      	mov	r1, r8
 80057f2:	1851      	adds	r1, r2, r1
 80057f4:	6339      	str	r1, [r7, #48]	; 0x30
 80057f6:	4649      	mov	r1, r9
 80057f8:	414b      	adcs	r3, r1
 80057fa:	637b      	str	r3, [r7, #52]	; 0x34
 80057fc:	f04f 0200 	mov.w	r2, #0
 8005800:	f04f 0300 	mov.w	r3, #0
 8005804:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005808:	4659      	mov	r1, fp
 800580a:	00cb      	lsls	r3, r1, #3
 800580c:	4651      	mov	r1, sl
 800580e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005812:	4651      	mov	r1, sl
 8005814:	00ca      	lsls	r2, r1, #3
 8005816:	4610      	mov	r0, r2
 8005818:	4619      	mov	r1, r3
 800581a:	4603      	mov	r3, r0
 800581c:	4642      	mov	r2, r8
 800581e:	189b      	adds	r3, r3, r2
 8005820:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005824:	464b      	mov	r3, r9
 8005826:	460a      	mov	r2, r1
 8005828:	eb42 0303 	adc.w	r3, r2, r3
 800582c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005830:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005834:	685b      	ldr	r3, [r3, #4]
 8005836:	2200      	movs	r2, #0
 8005838:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800583c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005840:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005844:	460b      	mov	r3, r1
 8005846:	18db      	adds	r3, r3, r3
 8005848:	62bb      	str	r3, [r7, #40]	; 0x28
 800584a:	4613      	mov	r3, r2
 800584c:	eb42 0303 	adc.w	r3, r2, r3
 8005850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005852:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005856:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800585a:	f7fa fd21 	bl	80002a0 <__aeabi_uldivmod>
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	4b0d      	ldr	r3, [pc, #52]	; (8005898 <UART_SetConfig+0x2d4>)
 8005864:	fba3 1302 	umull	r1, r3, r3, r2
 8005868:	095b      	lsrs	r3, r3, #5
 800586a:	2164      	movs	r1, #100	; 0x64
 800586c:	fb01 f303 	mul.w	r3, r1, r3
 8005870:	1ad3      	subs	r3, r2, r3
 8005872:	00db      	lsls	r3, r3, #3
 8005874:	3332      	adds	r3, #50	; 0x32
 8005876:	4a08      	ldr	r2, [pc, #32]	; (8005898 <UART_SetConfig+0x2d4>)
 8005878:	fba2 2303 	umull	r2, r3, r2, r3
 800587c:	095b      	lsrs	r3, r3, #5
 800587e:	f003 0207 	and.w	r2, r3, #7
 8005882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	4422      	add	r2, r4
 800588a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800588c:	e105      	b.n	8005a9a <UART_SetConfig+0x4d6>
 800588e:	bf00      	nop
 8005890:	40011000 	.word	0x40011000
 8005894:	40011400 	.word	0x40011400
 8005898:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800589c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058a0:	2200      	movs	r2, #0
 80058a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058a6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058aa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058ae:	4642      	mov	r2, r8
 80058b0:	464b      	mov	r3, r9
 80058b2:	1891      	adds	r1, r2, r2
 80058b4:	6239      	str	r1, [r7, #32]
 80058b6:	415b      	adcs	r3, r3
 80058b8:	627b      	str	r3, [r7, #36]	; 0x24
 80058ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058be:	4641      	mov	r1, r8
 80058c0:	1854      	adds	r4, r2, r1
 80058c2:	4649      	mov	r1, r9
 80058c4:	eb43 0501 	adc.w	r5, r3, r1
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	00eb      	lsls	r3, r5, #3
 80058d2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80058d6:	00e2      	lsls	r2, r4, #3
 80058d8:	4614      	mov	r4, r2
 80058da:	461d      	mov	r5, r3
 80058dc:	4643      	mov	r3, r8
 80058de:	18e3      	adds	r3, r4, r3
 80058e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80058e4:	464b      	mov	r3, r9
 80058e6:	eb45 0303 	adc.w	r3, r5, r3
 80058ea:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80058ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058f2:	685b      	ldr	r3, [r3, #4]
 80058f4:	2200      	movs	r2, #0
 80058f6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80058fa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058fe:	f04f 0200 	mov.w	r2, #0
 8005902:	f04f 0300 	mov.w	r3, #0
 8005906:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800590a:	4629      	mov	r1, r5
 800590c:	008b      	lsls	r3, r1, #2
 800590e:	4621      	mov	r1, r4
 8005910:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005914:	4621      	mov	r1, r4
 8005916:	008a      	lsls	r2, r1, #2
 8005918:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800591c:	f7fa fcc0 	bl	80002a0 <__aeabi_uldivmod>
 8005920:	4602      	mov	r2, r0
 8005922:	460b      	mov	r3, r1
 8005924:	4b60      	ldr	r3, [pc, #384]	; (8005aa8 <UART_SetConfig+0x4e4>)
 8005926:	fba3 2302 	umull	r2, r3, r3, r2
 800592a:	095b      	lsrs	r3, r3, #5
 800592c:	011c      	lsls	r4, r3, #4
 800592e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005932:	2200      	movs	r2, #0
 8005934:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005938:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800593c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005940:	4642      	mov	r2, r8
 8005942:	464b      	mov	r3, r9
 8005944:	1891      	adds	r1, r2, r2
 8005946:	61b9      	str	r1, [r7, #24]
 8005948:	415b      	adcs	r3, r3
 800594a:	61fb      	str	r3, [r7, #28]
 800594c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005950:	4641      	mov	r1, r8
 8005952:	1851      	adds	r1, r2, r1
 8005954:	6139      	str	r1, [r7, #16]
 8005956:	4649      	mov	r1, r9
 8005958:	414b      	adcs	r3, r1
 800595a:	617b      	str	r3, [r7, #20]
 800595c:	f04f 0200 	mov.w	r2, #0
 8005960:	f04f 0300 	mov.w	r3, #0
 8005964:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005968:	4659      	mov	r1, fp
 800596a:	00cb      	lsls	r3, r1, #3
 800596c:	4651      	mov	r1, sl
 800596e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005972:	4651      	mov	r1, sl
 8005974:	00ca      	lsls	r2, r1, #3
 8005976:	4610      	mov	r0, r2
 8005978:	4619      	mov	r1, r3
 800597a:	4603      	mov	r3, r0
 800597c:	4642      	mov	r2, r8
 800597e:	189b      	adds	r3, r3, r2
 8005980:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005984:	464b      	mov	r3, r9
 8005986:	460a      	mov	r2, r1
 8005988:	eb42 0303 	adc.w	r3, r2, r3
 800598c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005990:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005994:	685b      	ldr	r3, [r3, #4]
 8005996:	2200      	movs	r2, #0
 8005998:	67bb      	str	r3, [r7, #120]	; 0x78
 800599a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800599c:	f04f 0200 	mov.w	r2, #0
 80059a0:	f04f 0300 	mov.w	r3, #0
 80059a4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059a8:	4649      	mov	r1, r9
 80059aa:	008b      	lsls	r3, r1, #2
 80059ac:	4641      	mov	r1, r8
 80059ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059b2:	4641      	mov	r1, r8
 80059b4:	008a      	lsls	r2, r1, #2
 80059b6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059ba:	f7fa fc71 	bl	80002a0 <__aeabi_uldivmod>
 80059be:	4602      	mov	r2, r0
 80059c0:	460b      	mov	r3, r1
 80059c2:	4b39      	ldr	r3, [pc, #228]	; (8005aa8 <UART_SetConfig+0x4e4>)
 80059c4:	fba3 1302 	umull	r1, r3, r3, r2
 80059c8:	095b      	lsrs	r3, r3, #5
 80059ca:	2164      	movs	r1, #100	; 0x64
 80059cc:	fb01 f303 	mul.w	r3, r1, r3
 80059d0:	1ad3      	subs	r3, r2, r3
 80059d2:	011b      	lsls	r3, r3, #4
 80059d4:	3332      	adds	r3, #50	; 0x32
 80059d6:	4a34      	ldr	r2, [pc, #208]	; (8005aa8 <UART_SetConfig+0x4e4>)
 80059d8:	fba2 2303 	umull	r2, r3, r2, r3
 80059dc:	095b      	lsrs	r3, r3, #5
 80059de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80059e2:	441c      	add	r4, r3
 80059e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80059e8:	2200      	movs	r2, #0
 80059ea:	673b      	str	r3, [r7, #112]	; 0x70
 80059ec:	677a      	str	r2, [r7, #116]	; 0x74
 80059ee:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80059f2:	4642      	mov	r2, r8
 80059f4:	464b      	mov	r3, r9
 80059f6:	1891      	adds	r1, r2, r2
 80059f8:	60b9      	str	r1, [r7, #8]
 80059fa:	415b      	adcs	r3, r3
 80059fc:	60fb      	str	r3, [r7, #12]
 80059fe:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a02:	4641      	mov	r1, r8
 8005a04:	1851      	adds	r1, r2, r1
 8005a06:	6039      	str	r1, [r7, #0]
 8005a08:	4649      	mov	r1, r9
 8005a0a:	414b      	adcs	r3, r1
 8005a0c:	607b      	str	r3, [r7, #4]
 8005a0e:	f04f 0200 	mov.w	r2, #0
 8005a12:	f04f 0300 	mov.w	r3, #0
 8005a16:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a1a:	4659      	mov	r1, fp
 8005a1c:	00cb      	lsls	r3, r1, #3
 8005a1e:	4651      	mov	r1, sl
 8005a20:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a24:	4651      	mov	r1, sl
 8005a26:	00ca      	lsls	r2, r1, #3
 8005a28:	4610      	mov	r0, r2
 8005a2a:	4619      	mov	r1, r3
 8005a2c:	4603      	mov	r3, r0
 8005a2e:	4642      	mov	r2, r8
 8005a30:	189b      	adds	r3, r3, r2
 8005a32:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a34:	464b      	mov	r3, r9
 8005a36:	460a      	mov	r2, r1
 8005a38:	eb42 0303 	adc.w	r3, r2, r3
 8005a3c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a42:	685b      	ldr	r3, [r3, #4]
 8005a44:	2200      	movs	r2, #0
 8005a46:	663b      	str	r3, [r7, #96]	; 0x60
 8005a48:	667a      	str	r2, [r7, #100]	; 0x64
 8005a4a:	f04f 0200 	mov.w	r2, #0
 8005a4e:	f04f 0300 	mov.w	r3, #0
 8005a52:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a56:	4649      	mov	r1, r9
 8005a58:	008b      	lsls	r3, r1, #2
 8005a5a:	4641      	mov	r1, r8
 8005a5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a60:	4641      	mov	r1, r8
 8005a62:	008a      	lsls	r2, r1, #2
 8005a64:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a68:	f7fa fc1a 	bl	80002a0 <__aeabi_uldivmod>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	460b      	mov	r3, r1
 8005a70:	4b0d      	ldr	r3, [pc, #52]	; (8005aa8 <UART_SetConfig+0x4e4>)
 8005a72:	fba3 1302 	umull	r1, r3, r3, r2
 8005a76:	095b      	lsrs	r3, r3, #5
 8005a78:	2164      	movs	r1, #100	; 0x64
 8005a7a:	fb01 f303 	mul.w	r3, r1, r3
 8005a7e:	1ad3      	subs	r3, r2, r3
 8005a80:	011b      	lsls	r3, r3, #4
 8005a82:	3332      	adds	r3, #50	; 0x32
 8005a84:	4a08      	ldr	r2, [pc, #32]	; (8005aa8 <UART_SetConfig+0x4e4>)
 8005a86:	fba2 2303 	umull	r2, r3, r2, r3
 8005a8a:	095b      	lsrs	r3, r3, #5
 8005a8c:	f003 020f 	and.w	r2, r3, #15
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	4422      	add	r2, r4
 8005a98:	609a      	str	r2, [r3, #8]
}
 8005a9a:	bf00      	nop
 8005a9c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005aa0:	46bd      	mov	sp, r7
 8005aa2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005aa6:	bf00      	nop
 8005aa8:	51eb851f 	.word	0x51eb851f

08005aac <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005aac:	b084      	sub	sp, #16
 8005aae:	b580      	push	{r7, lr}
 8005ab0:	b084      	sub	sp, #16
 8005ab2:	af00      	add	r7, sp, #0
 8005ab4:	6078      	str	r0, [r7, #4]
 8005ab6:	f107 001c 	add.w	r0, r7, #28
 8005aba:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005abe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac0:	2b01      	cmp	r3, #1
 8005ac2:	d122      	bne.n	8005b0a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ac8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005ad8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	68db      	ldr	r3, [r3, #12]
 8005ae4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005aec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005aee:	2b01      	cmp	r3, #1
 8005af0:	d105      	bne.n	8005afe <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005afe:	6878      	ldr	r0, [r7, #4]
 8005b00:	f000 faa2 	bl	8006048 <USB_CoreReset>
 8005b04:	4603      	mov	r3, r0
 8005b06:	73fb      	strb	r3, [r7, #15]
 8005b08:	e01a      	b.n	8005b40 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68db      	ldr	r3, [r3, #12]
 8005b0e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b16:	6878      	ldr	r0, [r7, #4]
 8005b18:	f000 fa96 	bl	8006048 <USB_CoreReset>
 8005b1c:	4603      	mov	r3, r0
 8005b1e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b20:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d106      	bne.n	8005b34 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	639a      	str	r2, [r3, #56]	; 0x38
 8005b32:	e005      	b.n	8005b40 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b38:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b42:	2b01      	cmp	r3, #1
 8005b44:	d10b      	bne.n	8005b5e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	f043 0206 	orr.w	r2, r3, #6
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	f043 0220 	orr.w	r2, r3, #32
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3710      	adds	r7, #16
 8005b64:	46bd      	mov	sp, r7
 8005b66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b6a:	b004      	add	sp, #16
 8005b6c:	4770      	bx	lr

08005b6e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b083      	sub	sp, #12
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	689b      	ldr	r3, [r3, #8]
 8005b7a:	f023 0201 	bic.w	r2, r3, #1
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005b82:	2300      	movs	r3, #0
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr

08005b90 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b084      	sub	sp, #16
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	6078      	str	r0, [r7, #4]
 8005b98:	460b      	mov	r3, r1
 8005b9a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bac:	78fb      	ldrb	r3, [r7, #3]
 8005bae:	2b01      	cmp	r3, #1
 8005bb0:	d115      	bne.n	8005bde <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bbe:	2001      	movs	r0, #1
 8005bc0:	f7fc fefa 	bl	80029b8 <HAL_Delay>
      ms++;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	3301      	adds	r3, #1
 8005bc8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005bca:	6878      	ldr	r0, [r7, #4]
 8005bcc:	f000 fa2e 	bl	800602c <USB_GetMode>
 8005bd0:	4603      	mov	r3, r0
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d01e      	beq.n	8005c14 <USB_SetCurrentMode+0x84>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	2b31      	cmp	r3, #49	; 0x31
 8005bda:	d9f0      	bls.n	8005bbe <USB_SetCurrentMode+0x2e>
 8005bdc:	e01a      	b.n	8005c14 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005bde:	78fb      	ldrb	r3, [r7, #3]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d115      	bne.n	8005c10 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	68db      	ldr	r3, [r3, #12]
 8005be8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bf0:	2001      	movs	r0, #1
 8005bf2:	f7fc fee1 	bl	80029b8 <HAL_Delay>
      ms++;
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	3301      	adds	r3, #1
 8005bfa:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005bfc:	6878      	ldr	r0, [r7, #4]
 8005bfe:	f000 fa15 	bl	800602c <USB_GetMode>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d005      	beq.n	8005c14 <USB_SetCurrentMode+0x84>
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2b31      	cmp	r3, #49	; 0x31
 8005c0c:	d9f0      	bls.n	8005bf0 <USB_SetCurrentMode+0x60>
 8005c0e:	e001      	b.n	8005c14 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c10:	2301      	movs	r3, #1
 8005c12:	e005      	b.n	8005c20 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	2b32      	cmp	r3, #50	; 0x32
 8005c18:	d101      	bne.n	8005c1e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c1a:	2301      	movs	r3, #1
 8005c1c:	e000      	b.n	8005c20 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3710      	adds	r7, #16
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c28:	b084      	sub	sp, #16
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b086      	sub	sp, #24
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c36:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c42:	2300      	movs	r3, #0
 8005c44:	613b      	str	r3, [r7, #16]
 8005c46:	e009      	b.n	8005c5c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c48:	687a      	ldr	r2, [r7, #4]
 8005c4a:	693b      	ldr	r3, [r7, #16]
 8005c4c:	3340      	adds	r3, #64	; 0x40
 8005c4e:	009b      	lsls	r3, r3, #2
 8005c50:	4413      	add	r3, r2
 8005c52:	2200      	movs	r2, #0
 8005c54:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	3301      	adds	r3, #1
 8005c5a:	613b      	str	r3, [r7, #16]
 8005c5c:	693b      	ldr	r3, [r7, #16]
 8005c5e:	2b0e      	cmp	r3, #14
 8005c60:	d9f2      	bls.n	8005c48 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c62:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d11c      	bne.n	8005ca2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c6e:	685b      	ldr	r3, [r3, #4]
 8005c70:	68fa      	ldr	r2, [r7, #12]
 8005c72:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c76:	f043 0302 	orr.w	r3, r3, #2
 8005c7a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c80:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c98:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	639a      	str	r2, [r3, #56]	; 0x38
 8005ca0:	e00b      	b.n	8005cba <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ca6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cc0:	461a      	mov	r2, r3
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ccc:	4619      	mov	r1, r3
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd4:	461a      	mov	r2, r3
 8005cd6:	680b      	ldr	r3, [r1, #0]
 8005cd8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005cda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	d10c      	bne.n	8005cfa <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d104      	bne.n	8005cf0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005ce6:	2100      	movs	r1, #0
 8005ce8:	6878      	ldr	r0, [r7, #4]
 8005cea:	f000 f965 	bl	8005fb8 <USB_SetDevSpeed>
 8005cee:	e008      	b.n	8005d02 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f000 f960 	bl	8005fb8 <USB_SetDevSpeed>
 8005cf8:	e003      	b.n	8005d02 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005cfa:	2103      	movs	r1, #3
 8005cfc:	6878      	ldr	r0, [r7, #4]
 8005cfe:	f000 f95b 	bl	8005fb8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d02:	2110      	movs	r1, #16
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f000 f8f3 	bl	8005ef0 <USB_FlushTxFifo>
 8005d0a:	4603      	mov	r3, r0
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d001      	beq.n	8005d14 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005d10:	2301      	movs	r3, #1
 8005d12:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f91f 	bl	8005f58 <USB_FlushRxFifo>
 8005d1a:	4603      	mov	r3, r0
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d001      	beq.n	8005d24 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005d20:	2301      	movs	r3, #1
 8005d22:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d36:	461a      	mov	r2, r3
 8005d38:	2300      	movs	r3, #0
 8005d3a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d3c:	68fb      	ldr	r3, [r7, #12]
 8005d3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d42:	461a      	mov	r2, r3
 8005d44:	2300      	movs	r3, #0
 8005d46:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d48:	2300      	movs	r3, #0
 8005d4a:	613b      	str	r3, [r7, #16]
 8005d4c:	e043      	b.n	8005dd6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	015a      	lsls	r2, r3, #5
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	4413      	add	r3, r2
 8005d56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d60:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d64:	d118      	bne.n	8005d98 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005d66:	693b      	ldr	r3, [r7, #16]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d10a      	bne.n	8005d82 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d6c:	693b      	ldr	r3, [r7, #16]
 8005d6e:	015a      	lsls	r2, r3, #5
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	4413      	add	r3, r2
 8005d74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d78:	461a      	mov	r2, r3
 8005d7a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005d7e:	6013      	str	r3, [r2, #0]
 8005d80:	e013      	b.n	8005daa <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005d82:	693b      	ldr	r3, [r7, #16]
 8005d84:	015a      	lsls	r2, r3, #5
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	4413      	add	r3, r2
 8005d8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d8e:	461a      	mov	r2, r3
 8005d90:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005d94:	6013      	str	r3, [r2, #0]
 8005d96:	e008      	b.n	8005daa <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da4:	461a      	mov	r2, r3
 8005da6:	2300      	movs	r3, #0
 8005da8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	015a      	lsls	r2, r3, #5
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4413      	add	r3, r2
 8005db2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005db6:	461a      	mov	r2, r3
 8005db8:	2300      	movs	r3, #0
 8005dba:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005dbc:	693b      	ldr	r3, [r7, #16]
 8005dbe:	015a      	lsls	r2, r3, #5
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	4413      	add	r3, r2
 8005dc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dc8:	461a      	mov	r2, r3
 8005dca:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dce:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dd0:	693b      	ldr	r3, [r7, #16]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	613b      	str	r3, [r7, #16]
 8005dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dd8:	693a      	ldr	r2, [r7, #16]
 8005dda:	429a      	cmp	r2, r3
 8005ddc:	d3b7      	bcc.n	8005d4e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dde:	2300      	movs	r3, #0
 8005de0:	613b      	str	r3, [r7, #16]
 8005de2:	e043      	b.n	8005e6c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	015a      	lsls	r2, r3, #5
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	4413      	add	r3, r2
 8005dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005df6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005dfa:	d118      	bne.n	8005e2e <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d10a      	bne.n	8005e18 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e02:	693b      	ldr	r3, [r7, #16]
 8005e04:	015a      	lsls	r2, r3, #5
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	4413      	add	r3, r2
 8005e0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e0e:	461a      	mov	r2, r3
 8005e10:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	e013      	b.n	8005e40 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e18:	693b      	ldr	r3, [r7, #16]
 8005e1a:	015a      	lsls	r2, r3, #5
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	4413      	add	r3, r2
 8005e20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e24:	461a      	mov	r2, r3
 8005e26:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e2a:	6013      	str	r3, [r2, #0]
 8005e2c:	e008      	b.n	8005e40 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	015a      	lsls	r2, r3, #5
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	4413      	add	r3, r2
 8005e48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e4c:	461a      	mov	r2, r3
 8005e4e:	2300      	movs	r3, #0
 8005e50:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e52:	693b      	ldr	r3, [r7, #16]
 8005e54:	015a      	lsls	r2, r3, #5
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	4413      	add	r3, r2
 8005e5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e5e:	461a      	mov	r2, r3
 8005e60:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e64:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e66:	693b      	ldr	r3, [r7, #16]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	613b      	str	r3, [r7, #16]
 8005e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e6e:	693a      	ldr	r2, [r7, #16]
 8005e70:	429a      	cmp	r2, r3
 8005e72:	d3b7      	bcc.n	8005de4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005e74:	68fb      	ldr	r3, [r7, #12]
 8005e76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e7a:	691b      	ldr	r3, [r3, #16]
 8005e7c:	68fa      	ldr	r2, [r7, #12]
 8005e7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e86:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005e94:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d105      	bne.n	8005ea8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	f043 0210 	orr.w	r2, r3, #16
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	699a      	ldr	r2, [r3, #24]
 8005eac:	4b0f      	ldr	r3, [pc, #60]	; (8005eec <USB_DevInit+0x2c4>)
 8005eae:	4313      	orrs	r3, r2
 8005eb0:	687a      	ldr	r2, [r7, #4]
 8005eb2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005eb4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d005      	beq.n	8005ec6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	f043 0208 	orr.w	r2, r3, #8
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d107      	bne.n	8005edc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005ed4:	f043 0304 	orr.w	r3, r3, #4
 8005ed8:	687a      	ldr	r2, [r7, #4]
 8005eda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005edc:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ede:	4618      	mov	r0, r3
 8005ee0:	3718      	adds	r7, #24
 8005ee2:	46bd      	mov	sp, r7
 8005ee4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ee8:	b004      	add	sp, #16
 8005eea:	4770      	bx	lr
 8005eec:	803c3800 	.word	0x803c3800

08005ef0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ef0:	b480      	push	{r7}
 8005ef2:	b085      	sub	sp, #20
 8005ef4:	af00      	add	r7, sp, #0
 8005ef6:	6078      	str	r0, [r7, #4]
 8005ef8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005efa:	2300      	movs	r3, #0
 8005efc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	3301      	adds	r3, #1
 8005f02:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	4a13      	ldr	r2, [pc, #76]	; (8005f54 <USB_FlushTxFifo+0x64>)
 8005f08:	4293      	cmp	r3, r2
 8005f0a:	d901      	bls.n	8005f10 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f0c:	2303      	movs	r3, #3
 8005f0e:	e01b      	b.n	8005f48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	691b      	ldr	r3, [r3, #16]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	daf2      	bge.n	8005efe <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f18:	2300      	movs	r3, #0
 8005f1a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f1c:	683b      	ldr	r3, [r7, #0]
 8005f1e:	019b      	lsls	r3, r3, #6
 8005f20:	f043 0220 	orr.w	r2, r3, #32
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f28:	68fb      	ldr	r3, [r7, #12]
 8005f2a:	3301      	adds	r3, #1
 8005f2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	4a08      	ldr	r2, [pc, #32]	; (8005f54 <USB_FlushTxFifo+0x64>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	d901      	bls.n	8005f3a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f36:	2303      	movs	r3, #3
 8005f38:	e006      	b.n	8005f48 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	691b      	ldr	r3, [r3, #16]
 8005f3e:	f003 0320 	and.w	r3, r3, #32
 8005f42:	2b20      	cmp	r3, #32
 8005f44:	d0f0      	beq.n	8005f28 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f46:	2300      	movs	r3, #0
}
 8005f48:	4618      	mov	r0, r3
 8005f4a:	3714      	adds	r7, #20
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f52:	4770      	bx	lr
 8005f54:	00030d40 	.word	0x00030d40

08005f58 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f58:	b480      	push	{r7}
 8005f5a:	b085      	sub	sp, #20
 8005f5c:	af00      	add	r7, sp, #0
 8005f5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f60:	2300      	movs	r3, #0
 8005f62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	3301      	adds	r3, #1
 8005f68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	4a11      	ldr	r2, [pc, #68]	; (8005fb4 <USB_FlushRxFifo+0x5c>)
 8005f6e:	4293      	cmp	r3, r2
 8005f70:	d901      	bls.n	8005f76 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f72:	2303      	movs	r3, #3
 8005f74:	e018      	b.n	8005fa8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	daf2      	bge.n	8005f64 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005f7e:	2300      	movs	r3, #0
 8005f80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	2210      	movs	r2, #16
 8005f86:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	3301      	adds	r3, #1
 8005f8c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	4a08      	ldr	r2, [pc, #32]	; (8005fb4 <USB_FlushRxFifo+0x5c>)
 8005f92:	4293      	cmp	r3, r2
 8005f94:	d901      	bls.n	8005f9a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005f96:	2303      	movs	r3, #3
 8005f98:	e006      	b.n	8005fa8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	f003 0310 	and.w	r3, r3, #16
 8005fa2:	2b10      	cmp	r3, #16
 8005fa4:	d0f0      	beq.n	8005f88 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005fa6:	2300      	movs	r3, #0
}
 8005fa8:	4618      	mov	r0, r3
 8005faa:	3714      	adds	r7, #20
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr
 8005fb4:	00030d40 	.word	0x00030d40

08005fb8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	b085      	sub	sp, #20
 8005fbc:	af00      	add	r7, sp, #0
 8005fbe:	6078      	str	r0, [r7, #4]
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fce:	681a      	ldr	r2, [r3, #0]
 8005fd0:	78fb      	ldrb	r3, [r7, #3]
 8005fd2:	68f9      	ldr	r1, [r7, #12]
 8005fd4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005fdc:	2300      	movs	r3, #0
}
 8005fde:	4618      	mov	r0, r3
 8005fe0:	3714      	adds	r7, #20
 8005fe2:	46bd      	mov	sp, r7
 8005fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe8:	4770      	bx	lr

08005fea <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005fea:	b480      	push	{r7}
 8005fec:	b085      	sub	sp, #20
 8005fee:	af00      	add	r7, sp, #0
 8005ff0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006004:	f023 0303 	bic.w	r3, r3, #3
 8006008:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	68fa      	ldr	r2, [r7, #12]
 8006014:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006018:	f043 0302 	orr.w	r3, r3, #2
 800601c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800601e:	2300      	movs	r3, #0
}
 8006020:	4618      	mov	r0, r3
 8006022:	3714      	adds	r7, #20
 8006024:	46bd      	mov	sp, r7
 8006026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800602a:	4770      	bx	lr

0800602c <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800602c:	b480      	push	{r7}
 800602e:	b083      	sub	sp, #12
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	695b      	ldr	r3, [r3, #20]
 8006038:	f003 0301 	and.w	r3, r3, #1
}
 800603c:	4618      	mov	r0, r3
 800603e:	370c      	adds	r7, #12
 8006040:	46bd      	mov	sp, r7
 8006042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006046:	4770      	bx	lr

08006048 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006048:	b480      	push	{r7}
 800604a:	b085      	sub	sp, #20
 800604c:	af00      	add	r7, sp, #0
 800604e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006050:	2300      	movs	r3, #0
 8006052:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	3301      	adds	r3, #1
 8006058:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	4a13      	ldr	r2, [pc, #76]	; (80060ac <USB_CoreReset+0x64>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d901      	bls.n	8006066 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006062:	2303      	movs	r3, #3
 8006064:	e01b      	b.n	800609e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	691b      	ldr	r3, [r3, #16]
 800606a:	2b00      	cmp	r3, #0
 800606c:	daf2      	bge.n	8006054 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	691b      	ldr	r3, [r3, #16]
 8006076:	f043 0201 	orr.w	r2, r3, #1
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	3301      	adds	r3, #1
 8006082:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	4a09      	ldr	r2, [pc, #36]	; (80060ac <USB_CoreReset+0x64>)
 8006088:	4293      	cmp	r3, r2
 800608a:	d901      	bls.n	8006090 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 800608c:	2303      	movs	r3, #3
 800608e:	e006      	b.n	800609e <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	691b      	ldr	r3, [r3, #16]
 8006094:	f003 0301 	and.w	r3, r3, #1
 8006098:	2b01      	cmp	r3, #1
 800609a:	d0f0      	beq.n	800607e <USB_CoreReset+0x36>

  return HAL_OK;
 800609c:	2300      	movs	r3, #0
}
 800609e:	4618      	mov	r0, r3
 80060a0:	3714      	adds	r7, #20
 80060a2:	46bd      	mov	sp, r7
 80060a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a8:	4770      	bx	lr
 80060aa:	bf00      	nop
 80060ac:	00030d40 	.word	0x00030d40

080060b0 <atoi>:
 80060b0:	220a      	movs	r2, #10
 80060b2:	2100      	movs	r1, #0
 80060b4:	f000 baee 	b.w	8006694 <strtol>

080060b8 <__errno>:
 80060b8:	4b01      	ldr	r3, [pc, #4]	; (80060c0 <__errno+0x8>)
 80060ba:	6818      	ldr	r0, [r3, #0]
 80060bc:	4770      	bx	lr
 80060be:	bf00      	nop
 80060c0:	200009d4 	.word	0x200009d4

080060c4 <__libc_init_array>:
 80060c4:	b570      	push	{r4, r5, r6, lr}
 80060c6:	4d0d      	ldr	r5, [pc, #52]	; (80060fc <__libc_init_array+0x38>)
 80060c8:	4c0d      	ldr	r4, [pc, #52]	; (8006100 <__libc_init_array+0x3c>)
 80060ca:	1b64      	subs	r4, r4, r5
 80060cc:	10a4      	asrs	r4, r4, #2
 80060ce:	2600      	movs	r6, #0
 80060d0:	42a6      	cmp	r6, r4
 80060d2:	d109      	bne.n	80060e8 <__libc_init_array+0x24>
 80060d4:	4d0b      	ldr	r5, [pc, #44]	; (8006104 <__libc_init_array+0x40>)
 80060d6:	4c0c      	ldr	r4, [pc, #48]	; (8006108 <__libc_init_array+0x44>)
 80060d8:	f001 fbde 	bl	8007898 <_init>
 80060dc:	1b64      	subs	r4, r4, r5
 80060de:	10a4      	asrs	r4, r4, #2
 80060e0:	2600      	movs	r6, #0
 80060e2:	42a6      	cmp	r6, r4
 80060e4:	d105      	bne.n	80060f2 <__libc_init_array+0x2e>
 80060e6:	bd70      	pop	{r4, r5, r6, pc}
 80060e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060ec:	4798      	blx	r3
 80060ee:	3601      	adds	r6, #1
 80060f0:	e7ee      	b.n	80060d0 <__libc_init_array+0xc>
 80060f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80060f6:	4798      	blx	r3
 80060f8:	3601      	adds	r6, #1
 80060fa:	e7f2      	b.n	80060e2 <__libc_init_array+0x1e>
 80060fc:	08008240 	.word	0x08008240
 8006100:	08008240 	.word	0x08008240
 8006104:	08008240 	.word	0x08008240
 8006108:	08008244 	.word	0x08008244

0800610c <malloc>:
 800610c:	4b02      	ldr	r3, [pc, #8]	; (8006118 <malloc+0xc>)
 800610e:	4601      	mov	r1, r0
 8006110:	6818      	ldr	r0, [r3, #0]
 8006112:	f000 b88d 	b.w	8006230 <_malloc_r>
 8006116:	bf00      	nop
 8006118:	200009d4 	.word	0x200009d4

0800611c <free>:
 800611c:	4b02      	ldr	r3, [pc, #8]	; (8006128 <free+0xc>)
 800611e:	4601      	mov	r1, r0
 8006120:	6818      	ldr	r0, [r3, #0]
 8006122:	f000 b819 	b.w	8006158 <_free_r>
 8006126:	bf00      	nop
 8006128:	200009d4 	.word	0x200009d4

0800612c <memcpy>:
 800612c:	440a      	add	r2, r1
 800612e:	4291      	cmp	r1, r2
 8006130:	f100 33ff 	add.w	r3, r0, #4294967295
 8006134:	d100      	bne.n	8006138 <memcpy+0xc>
 8006136:	4770      	bx	lr
 8006138:	b510      	push	{r4, lr}
 800613a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800613e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006142:	4291      	cmp	r1, r2
 8006144:	d1f9      	bne.n	800613a <memcpy+0xe>
 8006146:	bd10      	pop	{r4, pc}

08006148 <memset>:
 8006148:	4402      	add	r2, r0
 800614a:	4603      	mov	r3, r0
 800614c:	4293      	cmp	r3, r2
 800614e:	d100      	bne.n	8006152 <memset+0xa>
 8006150:	4770      	bx	lr
 8006152:	f803 1b01 	strb.w	r1, [r3], #1
 8006156:	e7f9      	b.n	800614c <memset+0x4>

08006158 <_free_r>:
 8006158:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800615a:	2900      	cmp	r1, #0
 800615c:	d044      	beq.n	80061e8 <_free_r+0x90>
 800615e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006162:	9001      	str	r0, [sp, #4]
 8006164:	2b00      	cmp	r3, #0
 8006166:	f1a1 0404 	sub.w	r4, r1, #4
 800616a:	bfb8      	it	lt
 800616c:	18e4      	addlt	r4, r4, r3
 800616e:	f000 fdf7 	bl	8006d60 <__malloc_lock>
 8006172:	4a1e      	ldr	r2, [pc, #120]	; (80061ec <_free_r+0x94>)
 8006174:	9801      	ldr	r0, [sp, #4]
 8006176:	6813      	ldr	r3, [r2, #0]
 8006178:	b933      	cbnz	r3, 8006188 <_free_r+0x30>
 800617a:	6063      	str	r3, [r4, #4]
 800617c:	6014      	str	r4, [r2, #0]
 800617e:	b003      	add	sp, #12
 8006180:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006184:	f000 bdf2 	b.w	8006d6c <__malloc_unlock>
 8006188:	42a3      	cmp	r3, r4
 800618a:	d908      	bls.n	800619e <_free_r+0x46>
 800618c:	6825      	ldr	r5, [r4, #0]
 800618e:	1961      	adds	r1, r4, r5
 8006190:	428b      	cmp	r3, r1
 8006192:	bf01      	itttt	eq
 8006194:	6819      	ldreq	r1, [r3, #0]
 8006196:	685b      	ldreq	r3, [r3, #4]
 8006198:	1949      	addeq	r1, r1, r5
 800619a:	6021      	streq	r1, [r4, #0]
 800619c:	e7ed      	b.n	800617a <_free_r+0x22>
 800619e:	461a      	mov	r2, r3
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	b10b      	cbz	r3, 80061a8 <_free_r+0x50>
 80061a4:	42a3      	cmp	r3, r4
 80061a6:	d9fa      	bls.n	800619e <_free_r+0x46>
 80061a8:	6811      	ldr	r1, [r2, #0]
 80061aa:	1855      	adds	r5, r2, r1
 80061ac:	42a5      	cmp	r5, r4
 80061ae:	d10b      	bne.n	80061c8 <_free_r+0x70>
 80061b0:	6824      	ldr	r4, [r4, #0]
 80061b2:	4421      	add	r1, r4
 80061b4:	1854      	adds	r4, r2, r1
 80061b6:	42a3      	cmp	r3, r4
 80061b8:	6011      	str	r1, [r2, #0]
 80061ba:	d1e0      	bne.n	800617e <_free_r+0x26>
 80061bc:	681c      	ldr	r4, [r3, #0]
 80061be:	685b      	ldr	r3, [r3, #4]
 80061c0:	6053      	str	r3, [r2, #4]
 80061c2:	4421      	add	r1, r4
 80061c4:	6011      	str	r1, [r2, #0]
 80061c6:	e7da      	b.n	800617e <_free_r+0x26>
 80061c8:	d902      	bls.n	80061d0 <_free_r+0x78>
 80061ca:	230c      	movs	r3, #12
 80061cc:	6003      	str	r3, [r0, #0]
 80061ce:	e7d6      	b.n	800617e <_free_r+0x26>
 80061d0:	6825      	ldr	r5, [r4, #0]
 80061d2:	1961      	adds	r1, r4, r5
 80061d4:	428b      	cmp	r3, r1
 80061d6:	bf04      	itt	eq
 80061d8:	6819      	ldreq	r1, [r3, #0]
 80061da:	685b      	ldreq	r3, [r3, #4]
 80061dc:	6063      	str	r3, [r4, #4]
 80061de:	bf04      	itt	eq
 80061e0:	1949      	addeq	r1, r1, r5
 80061e2:	6021      	streq	r1, [r4, #0]
 80061e4:	6054      	str	r4, [r2, #4]
 80061e6:	e7ca      	b.n	800617e <_free_r+0x26>
 80061e8:	b003      	add	sp, #12
 80061ea:	bd30      	pop	{r4, r5, pc}
 80061ec:	200023ec 	.word	0x200023ec

080061f0 <sbrk_aligned>:
 80061f0:	b570      	push	{r4, r5, r6, lr}
 80061f2:	4e0e      	ldr	r6, [pc, #56]	; (800622c <sbrk_aligned+0x3c>)
 80061f4:	460c      	mov	r4, r1
 80061f6:	6831      	ldr	r1, [r6, #0]
 80061f8:	4605      	mov	r5, r0
 80061fa:	b911      	cbnz	r1, 8006202 <sbrk_aligned+0x12>
 80061fc:	f000 f930 	bl	8006460 <_sbrk_r>
 8006200:	6030      	str	r0, [r6, #0]
 8006202:	4621      	mov	r1, r4
 8006204:	4628      	mov	r0, r5
 8006206:	f000 f92b 	bl	8006460 <_sbrk_r>
 800620a:	1c43      	adds	r3, r0, #1
 800620c:	d00a      	beq.n	8006224 <sbrk_aligned+0x34>
 800620e:	1cc4      	adds	r4, r0, #3
 8006210:	f024 0403 	bic.w	r4, r4, #3
 8006214:	42a0      	cmp	r0, r4
 8006216:	d007      	beq.n	8006228 <sbrk_aligned+0x38>
 8006218:	1a21      	subs	r1, r4, r0
 800621a:	4628      	mov	r0, r5
 800621c:	f000 f920 	bl	8006460 <_sbrk_r>
 8006220:	3001      	adds	r0, #1
 8006222:	d101      	bne.n	8006228 <sbrk_aligned+0x38>
 8006224:	f04f 34ff 	mov.w	r4, #4294967295
 8006228:	4620      	mov	r0, r4
 800622a:	bd70      	pop	{r4, r5, r6, pc}
 800622c:	200023f0 	.word	0x200023f0

08006230 <_malloc_r>:
 8006230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006234:	1ccd      	adds	r5, r1, #3
 8006236:	f025 0503 	bic.w	r5, r5, #3
 800623a:	3508      	adds	r5, #8
 800623c:	2d0c      	cmp	r5, #12
 800623e:	bf38      	it	cc
 8006240:	250c      	movcc	r5, #12
 8006242:	2d00      	cmp	r5, #0
 8006244:	4607      	mov	r7, r0
 8006246:	db01      	blt.n	800624c <_malloc_r+0x1c>
 8006248:	42a9      	cmp	r1, r5
 800624a:	d905      	bls.n	8006258 <_malloc_r+0x28>
 800624c:	230c      	movs	r3, #12
 800624e:	603b      	str	r3, [r7, #0]
 8006250:	2600      	movs	r6, #0
 8006252:	4630      	mov	r0, r6
 8006254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006258:	4e2e      	ldr	r6, [pc, #184]	; (8006314 <_malloc_r+0xe4>)
 800625a:	f000 fd81 	bl	8006d60 <__malloc_lock>
 800625e:	6833      	ldr	r3, [r6, #0]
 8006260:	461c      	mov	r4, r3
 8006262:	bb34      	cbnz	r4, 80062b2 <_malloc_r+0x82>
 8006264:	4629      	mov	r1, r5
 8006266:	4638      	mov	r0, r7
 8006268:	f7ff ffc2 	bl	80061f0 <sbrk_aligned>
 800626c:	1c43      	adds	r3, r0, #1
 800626e:	4604      	mov	r4, r0
 8006270:	d14d      	bne.n	800630e <_malloc_r+0xde>
 8006272:	6834      	ldr	r4, [r6, #0]
 8006274:	4626      	mov	r6, r4
 8006276:	2e00      	cmp	r6, #0
 8006278:	d140      	bne.n	80062fc <_malloc_r+0xcc>
 800627a:	6823      	ldr	r3, [r4, #0]
 800627c:	4631      	mov	r1, r6
 800627e:	4638      	mov	r0, r7
 8006280:	eb04 0803 	add.w	r8, r4, r3
 8006284:	f000 f8ec 	bl	8006460 <_sbrk_r>
 8006288:	4580      	cmp	r8, r0
 800628a:	d13a      	bne.n	8006302 <_malloc_r+0xd2>
 800628c:	6821      	ldr	r1, [r4, #0]
 800628e:	3503      	adds	r5, #3
 8006290:	1a6d      	subs	r5, r5, r1
 8006292:	f025 0503 	bic.w	r5, r5, #3
 8006296:	3508      	adds	r5, #8
 8006298:	2d0c      	cmp	r5, #12
 800629a:	bf38      	it	cc
 800629c:	250c      	movcc	r5, #12
 800629e:	4629      	mov	r1, r5
 80062a0:	4638      	mov	r0, r7
 80062a2:	f7ff ffa5 	bl	80061f0 <sbrk_aligned>
 80062a6:	3001      	adds	r0, #1
 80062a8:	d02b      	beq.n	8006302 <_malloc_r+0xd2>
 80062aa:	6823      	ldr	r3, [r4, #0]
 80062ac:	442b      	add	r3, r5
 80062ae:	6023      	str	r3, [r4, #0]
 80062b0:	e00e      	b.n	80062d0 <_malloc_r+0xa0>
 80062b2:	6822      	ldr	r2, [r4, #0]
 80062b4:	1b52      	subs	r2, r2, r5
 80062b6:	d41e      	bmi.n	80062f6 <_malloc_r+0xc6>
 80062b8:	2a0b      	cmp	r2, #11
 80062ba:	d916      	bls.n	80062ea <_malloc_r+0xba>
 80062bc:	1961      	adds	r1, r4, r5
 80062be:	42a3      	cmp	r3, r4
 80062c0:	6025      	str	r5, [r4, #0]
 80062c2:	bf18      	it	ne
 80062c4:	6059      	strne	r1, [r3, #4]
 80062c6:	6863      	ldr	r3, [r4, #4]
 80062c8:	bf08      	it	eq
 80062ca:	6031      	streq	r1, [r6, #0]
 80062cc:	5162      	str	r2, [r4, r5]
 80062ce:	604b      	str	r3, [r1, #4]
 80062d0:	4638      	mov	r0, r7
 80062d2:	f104 060b 	add.w	r6, r4, #11
 80062d6:	f000 fd49 	bl	8006d6c <__malloc_unlock>
 80062da:	f026 0607 	bic.w	r6, r6, #7
 80062de:	1d23      	adds	r3, r4, #4
 80062e0:	1af2      	subs	r2, r6, r3
 80062e2:	d0b6      	beq.n	8006252 <_malloc_r+0x22>
 80062e4:	1b9b      	subs	r3, r3, r6
 80062e6:	50a3      	str	r3, [r4, r2]
 80062e8:	e7b3      	b.n	8006252 <_malloc_r+0x22>
 80062ea:	6862      	ldr	r2, [r4, #4]
 80062ec:	42a3      	cmp	r3, r4
 80062ee:	bf0c      	ite	eq
 80062f0:	6032      	streq	r2, [r6, #0]
 80062f2:	605a      	strne	r2, [r3, #4]
 80062f4:	e7ec      	b.n	80062d0 <_malloc_r+0xa0>
 80062f6:	4623      	mov	r3, r4
 80062f8:	6864      	ldr	r4, [r4, #4]
 80062fa:	e7b2      	b.n	8006262 <_malloc_r+0x32>
 80062fc:	4634      	mov	r4, r6
 80062fe:	6876      	ldr	r6, [r6, #4]
 8006300:	e7b9      	b.n	8006276 <_malloc_r+0x46>
 8006302:	230c      	movs	r3, #12
 8006304:	603b      	str	r3, [r7, #0]
 8006306:	4638      	mov	r0, r7
 8006308:	f000 fd30 	bl	8006d6c <__malloc_unlock>
 800630c:	e7a1      	b.n	8006252 <_malloc_r+0x22>
 800630e:	6025      	str	r5, [r4, #0]
 8006310:	e7de      	b.n	80062d0 <_malloc_r+0xa0>
 8006312:	bf00      	nop
 8006314:	200023ec 	.word	0x200023ec

08006318 <iprintf>:
 8006318:	b40f      	push	{r0, r1, r2, r3}
 800631a:	4b0a      	ldr	r3, [pc, #40]	; (8006344 <iprintf+0x2c>)
 800631c:	b513      	push	{r0, r1, r4, lr}
 800631e:	681c      	ldr	r4, [r3, #0]
 8006320:	b124      	cbz	r4, 800632c <iprintf+0x14>
 8006322:	69a3      	ldr	r3, [r4, #24]
 8006324:	b913      	cbnz	r3, 800632c <iprintf+0x14>
 8006326:	4620      	mov	r0, r4
 8006328:	f000 fc14 	bl	8006b54 <__sinit>
 800632c:	ab05      	add	r3, sp, #20
 800632e:	9a04      	ldr	r2, [sp, #16]
 8006330:	68a1      	ldr	r1, [r4, #8]
 8006332:	9301      	str	r3, [sp, #4]
 8006334:	4620      	mov	r0, r4
 8006336:	f000 fea5 	bl	8007084 <_vfiprintf_r>
 800633a:	b002      	add	sp, #8
 800633c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006340:	b004      	add	sp, #16
 8006342:	4770      	bx	lr
 8006344:	200009d4 	.word	0x200009d4

08006348 <putchar>:
 8006348:	4b09      	ldr	r3, [pc, #36]	; (8006370 <putchar+0x28>)
 800634a:	b513      	push	{r0, r1, r4, lr}
 800634c:	681c      	ldr	r4, [r3, #0]
 800634e:	4601      	mov	r1, r0
 8006350:	b134      	cbz	r4, 8006360 <putchar+0x18>
 8006352:	69a3      	ldr	r3, [r4, #24]
 8006354:	b923      	cbnz	r3, 8006360 <putchar+0x18>
 8006356:	9001      	str	r0, [sp, #4]
 8006358:	4620      	mov	r0, r4
 800635a:	f000 fbfb 	bl	8006b54 <__sinit>
 800635e:	9901      	ldr	r1, [sp, #4]
 8006360:	68a2      	ldr	r2, [r4, #8]
 8006362:	4620      	mov	r0, r4
 8006364:	b002      	add	sp, #8
 8006366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800636a:	f001 b94f 	b.w	800760c <_putc_r>
 800636e:	bf00      	nop
 8006370:	200009d4 	.word	0x200009d4

08006374 <_puts_r>:
 8006374:	b570      	push	{r4, r5, r6, lr}
 8006376:	460e      	mov	r6, r1
 8006378:	4605      	mov	r5, r0
 800637a:	b118      	cbz	r0, 8006384 <_puts_r+0x10>
 800637c:	6983      	ldr	r3, [r0, #24]
 800637e:	b90b      	cbnz	r3, 8006384 <_puts_r+0x10>
 8006380:	f000 fbe8 	bl	8006b54 <__sinit>
 8006384:	69ab      	ldr	r3, [r5, #24]
 8006386:	68ac      	ldr	r4, [r5, #8]
 8006388:	b913      	cbnz	r3, 8006390 <_puts_r+0x1c>
 800638a:	4628      	mov	r0, r5
 800638c:	f000 fbe2 	bl	8006b54 <__sinit>
 8006390:	4b2c      	ldr	r3, [pc, #176]	; (8006444 <_puts_r+0xd0>)
 8006392:	429c      	cmp	r4, r3
 8006394:	d120      	bne.n	80063d8 <_puts_r+0x64>
 8006396:	686c      	ldr	r4, [r5, #4]
 8006398:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800639a:	07db      	lsls	r3, r3, #31
 800639c:	d405      	bmi.n	80063aa <_puts_r+0x36>
 800639e:	89a3      	ldrh	r3, [r4, #12]
 80063a0:	0598      	lsls	r0, r3, #22
 80063a2:	d402      	bmi.n	80063aa <_puts_r+0x36>
 80063a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063a6:	f000 fc73 	bl	8006c90 <__retarget_lock_acquire_recursive>
 80063aa:	89a3      	ldrh	r3, [r4, #12]
 80063ac:	0719      	lsls	r1, r3, #28
 80063ae:	d51d      	bpl.n	80063ec <_puts_r+0x78>
 80063b0:	6923      	ldr	r3, [r4, #16]
 80063b2:	b1db      	cbz	r3, 80063ec <_puts_r+0x78>
 80063b4:	3e01      	subs	r6, #1
 80063b6:	68a3      	ldr	r3, [r4, #8]
 80063b8:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80063bc:	3b01      	subs	r3, #1
 80063be:	60a3      	str	r3, [r4, #8]
 80063c0:	bb39      	cbnz	r1, 8006412 <_puts_r+0x9e>
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	da38      	bge.n	8006438 <_puts_r+0xc4>
 80063c6:	4622      	mov	r2, r4
 80063c8:	210a      	movs	r1, #10
 80063ca:	4628      	mov	r0, r5
 80063cc:	f000 f9e8 	bl	80067a0 <__swbuf_r>
 80063d0:	3001      	adds	r0, #1
 80063d2:	d011      	beq.n	80063f8 <_puts_r+0x84>
 80063d4:	250a      	movs	r5, #10
 80063d6:	e011      	b.n	80063fc <_puts_r+0x88>
 80063d8:	4b1b      	ldr	r3, [pc, #108]	; (8006448 <_puts_r+0xd4>)
 80063da:	429c      	cmp	r4, r3
 80063dc:	d101      	bne.n	80063e2 <_puts_r+0x6e>
 80063de:	68ac      	ldr	r4, [r5, #8]
 80063e0:	e7da      	b.n	8006398 <_puts_r+0x24>
 80063e2:	4b1a      	ldr	r3, [pc, #104]	; (800644c <_puts_r+0xd8>)
 80063e4:	429c      	cmp	r4, r3
 80063e6:	bf08      	it	eq
 80063e8:	68ec      	ldreq	r4, [r5, #12]
 80063ea:	e7d5      	b.n	8006398 <_puts_r+0x24>
 80063ec:	4621      	mov	r1, r4
 80063ee:	4628      	mov	r0, r5
 80063f0:	f000 fa28 	bl	8006844 <__swsetup_r>
 80063f4:	2800      	cmp	r0, #0
 80063f6:	d0dd      	beq.n	80063b4 <_puts_r+0x40>
 80063f8:	f04f 35ff 	mov.w	r5, #4294967295
 80063fc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063fe:	07da      	lsls	r2, r3, #31
 8006400:	d405      	bmi.n	800640e <_puts_r+0x9a>
 8006402:	89a3      	ldrh	r3, [r4, #12]
 8006404:	059b      	lsls	r3, r3, #22
 8006406:	d402      	bmi.n	800640e <_puts_r+0x9a>
 8006408:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800640a:	f000 fc42 	bl	8006c92 <__retarget_lock_release_recursive>
 800640e:	4628      	mov	r0, r5
 8006410:	bd70      	pop	{r4, r5, r6, pc}
 8006412:	2b00      	cmp	r3, #0
 8006414:	da04      	bge.n	8006420 <_puts_r+0xac>
 8006416:	69a2      	ldr	r2, [r4, #24]
 8006418:	429a      	cmp	r2, r3
 800641a:	dc06      	bgt.n	800642a <_puts_r+0xb6>
 800641c:	290a      	cmp	r1, #10
 800641e:	d004      	beq.n	800642a <_puts_r+0xb6>
 8006420:	6823      	ldr	r3, [r4, #0]
 8006422:	1c5a      	adds	r2, r3, #1
 8006424:	6022      	str	r2, [r4, #0]
 8006426:	7019      	strb	r1, [r3, #0]
 8006428:	e7c5      	b.n	80063b6 <_puts_r+0x42>
 800642a:	4622      	mov	r2, r4
 800642c:	4628      	mov	r0, r5
 800642e:	f000 f9b7 	bl	80067a0 <__swbuf_r>
 8006432:	3001      	adds	r0, #1
 8006434:	d1bf      	bne.n	80063b6 <_puts_r+0x42>
 8006436:	e7df      	b.n	80063f8 <_puts_r+0x84>
 8006438:	6823      	ldr	r3, [r4, #0]
 800643a:	250a      	movs	r5, #10
 800643c:	1c5a      	adds	r2, r3, #1
 800643e:	6022      	str	r2, [r4, #0]
 8006440:	701d      	strb	r5, [r3, #0]
 8006442:	e7db      	b.n	80063fc <_puts_r+0x88>
 8006444:	080081c4 	.word	0x080081c4
 8006448:	080081e4 	.word	0x080081e4
 800644c:	080081a4 	.word	0x080081a4

08006450 <puts>:
 8006450:	4b02      	ldr	r3, [pc, #8]	; (800645c <puts+0xc>)
 8006452:	4601      	mov	r1, r0
 8006454:	6818      	ldr	r0, [r3, #0]
 8006456:	f7ff bf8d 	b.w	8006374 <_puts_r>
 800645a:	bf00      	nop
 800645c:	200009d4 	.word	0x200009d4

08006460 <_sbrk_r>:
 8006460:	b538      	push	{r3, r4, r5, lr}
 8006462:	4d06      	ldr	r5, [pc, #24]	; (800647c <_sbrk_r+0x1c>)
 8006464:	2300      	movs	r3, #0
 8006466:	4604      	mov	r4, r0
 8006468:	4608      	mov	r0, r1
 800646a:	602b      	str	r3, [r5, #0]
 800646c:	f7fb ff2c 	bl	80022c8 <_sbrk>
 8006470:	1c43      	adds	r3, r0, #1
 8006472:	d102      	bne.n	800647a <_sbrk_r+0x1a>
 8006474:	682b      	ldr	r3, [r5, #0]
 8006476:	b103      	cbz	r3, 800647a <_sbrk_r+0x1a>
 8006478:	6023      	str	r3, [r4, #0]
 800647a:	bd38      	pop	{r3, r4, r5, pc}
 800647c:	200023f8 	.word	0x200023f8

08006480 <siprintf>:
 8006480:	b40e      	push	{r1, r2, r3}
 8006482:	b500      	push	{lr}
 8006484:	b09c      	sub	sp, #112	; 0x70
 8006486:	ab1d      	add	r3, sp, #116	; 0x74
 8006488:	9002      	str	r0, [sp, #8]
 800648a:	9006      	str	r0, [sp, #24]
 800648c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006490:	4809      	ldr	r0, [pc, #36]	; (80064b8 <siprintf+0x38>)
 8006492:	9107      	str	r1, [sp, #28]
 8006494:	9104      	str	r1, [sp, #16]
 8006496:	4909      	ldr	r1, [pc, #36]	; (80064bc <siprintf+0x3c>)
 8006498:	f853 2b04 	ldr.w	r2, [r3], #4
 800649c:	9105      	str	r1, [sp, #20]
 800649e:	6800      	ldr	r0, [r0, #0]
 80064a0:	9301      	str	r3, [sp, #4]
 80064a2:	a902      	add	r1, sp, #8
 80064a4:	f000 fcc4 	bl	8006e30 <_svfiprintf_r>
 80064a8:	9b02      	ldr	r3, [sp, #8]
 80064aa:	2200      	movs	r2, #0
 80064ac:	701a      	strb	r2, [r3, #0]
 80064ae:	b01c      	add	sp, #112	; 0x70
 80064b0:	f85d eb04 	ldr.w	lr, [sp], #4
 80064b4:	b003      	add	sp, #12
 80064b6:	4770      	bx	lr
 80064b8:	200009d4 	.word	0x200009d4
 80064bc:	ffff0208 	.word	0xffff0208

080064c0 <strcasecmp>:
 80064c0:	b530      	push	{r4, r5, lr}
 80064c2:	4d0b      	ldr	r5, [pc, #44]	; (80064f0 <strcasecmp+0x30>)
 80064c4:	4604      	mov	r4, r0
 80064c6:	f814 3b01 	ldrb.w	r3, [r4], #1
 80064ca:	5d5a      	ldrb	r2, [r3, r5]
 80064cc:	f002 0203 	and.w	r2, r2, #3
 80064d0:	2a01      	cmp	r2, #1
 80064d2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064d6:	5ca8      	ldrb	r0, [r5, r2]
 80064d8:	f000 0003 	and.w	r0, r0, #3
 80064dc:	bf08      	it	eq
 80064de:	3320      	addeq	r3, #32
 80064e0:	2801      	cmp	r0, #1
 80064e2:	bf08      	it	eq
 80064e4:	3220      	addeq	r2, #32
 80064e6:	1a98      	subs	r0, r3, r2
 80064e8:	d101      	bne.n	80064ee <strcasecmp+0x2e>
 80064ea:	2a00      	cmp	r2, #0
 80064ec:	d1eb      	bne.n	80064c6 <strcasecmp+0x6>
 80064ee:	bd30      	pop	{r4, r5, pc}
 80064f0:	080080a1 	.word	0x080080a1

080064f4 <strncasecmp>:
 80064f4:	b570      	push	{r4, r5, r6, lr}
 80064f6:	4e0f      	ldr	r6, [pc, #60]	; (8006534 <strncasecmp+0x40>)
 80064f8:	4604      	mov	r4, r0
 80064fa:	440a      	add	r2, r1
 80064fc:	428a      	cmp	r2, r1
 80064fe:	d101      	bne.n	8006504 <strncasecmp+0x10>
 8006500:	2000      	movs	r0, #0
 8006502:	e013      	b.n	800652c <strncasecmp+0x38>
 8006504:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006508:	5d98      	ldrb	r0, [r3, r6]
 800650a:	f000 0003 	and.w	r0, r0, #3
 800650e:	2801      	cmp	r0, #1
 8006510:	f811 0b01 	ldrb.w	r0, [r1], #1
 8006514:	5c35      	ldrb	r5, [r6, r0]
 8006516:	f005 0503 	and.w	r5, r5, #3
 800651a:	bf08      	it	eq
 800651c:	3320      	addeq	r3, #32
 800651e:	2d01      	cmp	r5, #1
 8006520:	bf08      	it	eq
 8006522:	3020      	addeq	r0, #32
 8006524:	1a1b      	subs	r3, r3, r0
 8006526:	d102      	bne.n	800652e <strncasecmp+0x3a>
 8006528:	2800      	cmp	r0, #0
 800652a:	d1e7      	bne.n	80064fc <strncasecmp+0x8>
 800652c:	bd70      	pop	{r4, r5, r6, pc}
 800652e:	4618      	mov	r0, r3
 8006530:	e7fc      	b.n	800652c <strncasecmp+0x38>
 8006532:	bf00      	nop
 8006534:	080080a1 	.word	0x080080a1

08006538 <__strtok_r>:
 8006538:	b5f0      	push	{r4, r5, r6, r7, lr}
 800653a:	b908      	cbnz	r0, 8006540 <__strtok_r+0x8>
 800653c:	6810      	ldr	r0, [r2, #0]
 800653e:	b188      	cbz	r0, 8006564 <__strtok_r+0x2c>
 8006540:	4604      	mov	r4, r0
 8006542:	4620      	mov	r0, r4
 8006544:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006548:	460f      	mov	r7, r1
 800654a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800654e:	b91e      	cbnz	r6, 8006558 <__strtok_r+0x20>
 8006550:	b965      	cbnz	r5, 800656c <__strtok_r+0x34>
 8006552:	6015      	str	r5, [r2, #0]
 8006554:	4628      	mov	r0, r5
 8006556:	e005      	b.n	8006564 <__strtok_r+0x2c>
 8006558:	42b5      	cmp	r5, r6
 800655a:	d1f6      	bne.n	800654a <__strtok_r+0x12>
 800655c:	2b00      	cmp	r3, #0
 800655e:	d1f0      	bne.n	8006542 <__strtok_r+0xa>
 8006560:	6014      	str	r4, [r2, #0]
 8006562:	7003      	strb	r3, [r0, #0]
 8006564:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006566:	461c      	mov	r4, r3
 8006568:	e00c      	b.n	8006584 <__strtok_r+0x4c>
 800656a:	b915      	cbnz	r5, 8006572 <__strtok_r+0x3a>
 800656c:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006570:	460e      	mov	r6, r1
 8006572:	f816 5b01 	ldrb.w	r5, [r6], #1
 8006576:	42ab      	cmp	r3, r5
 8006578:	d1f7      	bne.n	800656a <__strtok_r+0x32>
 800657a:	2b00      	cmp	r3, #0
 800657c:	d0f3      	beq.n	8006566 <__strtok_r+0x2e>
 800657e:	2300      	movs	r3, #0
 8006580:	f804 3c01 	strb.w	r3, [r4, #-1]
 8006584:	6014      	str	r4, [r2, #0]
 8006586:	e7ed      	b.n	8006564 <__strtok_r+0x2c>

08006588 <strtok_r>:
 8006588:	2301      	movs	r3, #1
 800658a:	f7ff bfd5 	b.w	8006538 <__strtok_r>
	...

08006590 <_strtol_l.constprop.0>:
 8006590:	2b01      	cmp	r3, #1
 8006592:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006596:	d001      	beq.n	800659c <_strtol_l.constprop.0+0xc>
 8006598:	2b24      	cmp	r3, #36	; 0x24
 800659a:	d906      	bls.n	80065aa <_strtol_l.constprop.0+0x1a>
 800659c:	f7ff fd8c 	bl	80060b8 <__errno>
 80065a0:	2316      	movs	r3, #22
 80065a2:	6003      	str	r3, [r0, #0]
 80065a4:	2000      	movs	r0, #0
 80065a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065aa:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006690 <_strtol_l.constprop.0+0x100>
 80065ae:	460d      	mov	r5, r1
 80065b0:	462e      	mov	r6, r5
 80065b2:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065b6:	f814 700c 	ldrb.w	r7, [r4, ip]
 80065ba:	f017 0708 	ands.w	r7, r7, #8
 80065be:	d1f7      	bne.n	80065b0 <_strtol_l.constprop.0+0x20>
 80065c0:	2c2d      	cmp	r4, #45	; 0x2d
 80065c2:	d132      	bne.n	800662a <_strtol_l.constprop.0+0x9a>
 80065c4:	782c      	ldrb	r4, [r5, #0]
 80065c6:	2701      	movs	r7, #1
 80065c8:	1cb5      	adds	r5, r6, #2
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d05b      	beq.n	8006686 <_strtol_l.constprop.0+0xf6>
 80065ce:	2b10      	cmp	r3, #16
 80065d0:	d109      	bne.n	80065e6 <_strtol_l.constprop.0+0x56>
 80065d2:	2c30      	cmp	r4, #48	; 0x30
 80065d4:	d107      	bne.n	80065e6 <_strtol_l.constprop.0+0x56>
 80065d6:	782c      	ldrb	r4, [r5, #0]
 80065d8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 80065dc:	2c58      	cmp	r4, #88	; 0x58
 80065de:	d14d      	bne.n	800667c <_strtol_l.constprop.0+0xec>
 80065e0:	786c      	ldrb	r4, [r5, #1]
 80065e2:	2310      	movs	r3, #16
 80065e4:	3502      	adds	r5, #2
 80065e6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 80065ea:	f108 38ff 	add.w	r8, r8, #4294967295
 80065ee:	f04f 0c00 	mov.w	ip, #0
 80065f2:	fbb8 f9f3 	udiv	r9, r8, r3
 80065f6:	4666      	mov	r6, ip
 80065f8:	fb03 8a19 	mls	sl, r3, r9, r8
 80065fc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006600:	f1be 0f09 	cmp.w	lr, #9
 8006604:	d816      	bhi.n	8006634 <_strtol_l.constprop.0+0xa4>
 8006606:	4674      	mov	r4, lr
 8006608:	42a3      	cmp	r3, r4
 800660a:	dd24      	ble.n	8006656 <_strtol_l.constprop.0+0xc6>
 800660c:	f1bc 0f00 	cmp.w	ip, #0
 8006610:	db1e      	blt.n	8006650 <_strtol_l.constprop.0+0xc0>
 8006612:	45b1      	cmp	r9, r6
 8006614:	d31c      	bcc.n	8006650 <_strtol_l.constprop.0+0xc0>
 8006616:	d101      	bne.n	800661c <_strtol_l.constprop.0+0x8c>
 8006618:	45a2      	cmp	sl, r4
 800661a:	db19      	blt.n	8006650 <_strtol_l.constprop.0+0xc0>
 800661c:	fb06 4603 	mla	r6, r6, r3, r4
 8006620:	f04f 0c01 	mov.w	ip, #1
 8006624:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006628:	e7e8      	b.n	80065fc <_strtol_l.constprop.0+0x6c>
 800662a:	2c2b      	cmp	r4, #43	; 0x2b
 800662c:	bf04      	itt	eq
 800662e:	782c      	ldrbeq	r4, [r5, #0]
 8006630:	1cb5      	addeq	r5, r6, #2
 8006632:	e7ca      	b.n	80065ca <_strtol_l.constprop.0+0x3a>
 8006634:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006638:	f1be 0f19 	cmp.w	lr, #25
 800663c:	d801      	bhi.n	8006642 <_strtol_l.constprop.0+0xb2>
 800663e:	3c37      	subs	r4, #55	; 0x37
 8006640:	e7e2      	b.n	8006608 <_strtol_l.constprop.0+0x78>
 8006642:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006646:	f1be 0f19 	cmp.w	lr, #25
 800664a:	d804      	bhi.n	8006656 <_strtol_l.constprop.0+0xc6>
 800664c:	3c57      	subs	r4, #87	; 0x57
 800664e:	e7db      	b.n	8006608 <_strtol_l.constprop.0+0x78>
 8006650:	f04f 3cff 	mov.w	ip, #4294967295
 8006654:	e7e6      	b.n	8006624 <_strtol_l.constprop.0+0x94>
 8006656:	f1bc 0f00 	cmp.w	ip, #0
 800665a:	da05      	bge.n	8006668 <_strtol_l.constprop.0+0xd8>
 800665c:	2322      	movs	r3, #34	; 0x22
 800665e:	6003      	str	r3, [r0, #0]
 8006660:	4646      	mov	r6, r8
 8006662:	b942      	cbnz	r2, 8006676 <_strtol_l.constprop.0+0xe6>
 8006664:	4630      	mov	r0, r6
 8006666:	e79e      	b.n	80065a6 <_strtol_l.constprop.0+0x16>
 8006668:	b107      	cbz	r7, 800666c <_strtol_l.constprop.0+0xdc>
 800666a:	4276      	negs	r6, r6
 800666c:	2a00      	cmp	r2, #0
 800666e:	d0f9      	beq.n	8006664 <_strtol_l.constprop.0+0xd4>
 8006670:	f1bc 0f00 	cmp.w	ip, #0
 8006674:	d000      	beq.n	8006678 <_strtol_l.constprop.0+0xe8>
 8006676:	1e69      	subs	r1, r5, #1
 8006678:	6011      	str	r1, [r2, #0]
 800667a:	e7f3      	b.n	8006664 <_strtol_l.constprop.0+0xd4>
 800667c:	2430      	movs	r4, #48	; 0x30
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1b1      	bne.n	80065e6 <_strtol_l.constprop.0+0x56>
 8006682:	2308      	movs	r3, #8
 8006684:	e7af      	b.n	80065e6 <_strtol_l.constprop.0+0x56>
 8006686:	2c30      	cmp	r4, #48	; 0x30
 8006688:	d0a5      	beq.n	80065d6 <_strtol_l.constprop.0+0x46>
 800668a:	230a      	movs	r3, #10
 800668c:	e7ab      	b.n	80065e6 <_strtol_l.constprop.0+0x56>
 800668e:	bf00      	nop
 8006690:	080080a1 	.word	0x080080a1

08006694 <strtol>:
 8006694:	4613      	mov	r3, r2
 8006696:	460a      	mov	r2, r1
 8006698:	4601      	mov	r1, r0
 800669a:	4802      	ldr	r0, [pc, #8]	; (80066a4 <strtol+0x10>)
 800669c:	6800      	ldr	r0, [r0, #0]
 800669e:	f7ff bf77 	b.w	8006590 <_strtol_l.constprop.0>
 80066a2:	bf00      	nop
 80066a4:	200009d4 	.word	0x200009d4

080066a8 <_strtoul_l.constprop.0>:
 80066a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066ac:	4f36      	ldr	r7, [pc, #216]	; (8006788 <_strtoul_l.constprop.0+0xe0>)
 80066ae:	4686      	mov	lr, r0
 80066b0:	460d      	mov	r5, r1
 80066b2:	4628      	mov	r0, r5
 80066b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066b8:	5de6      	ldrb	r6, [r4, r7]
 80066ba:	f016 0608 	ands.w	r6, r6, #8
 80066be:	d1f8      	bne.n	80066b2 <_strtoul_l.constprop.0+0xa>
 80066c0:	2c2d      	cmp	r4, #45	; 0x2d
 80066c2:	d12f      	bne.n	8006724 <_strtoul_l.constprop.0+0x7c>
 80066c4:	782c      	ldrb	r4, [r5, #0]
 80066c6:	2601      	movs	r6, #1
 80066c8:	1c85      	adds	r5, r0, #2
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d057      	beq.n	800677e <_strtoul_l.constprop.0+0xd6>
 80066ce:	2b10      	cmp	r3, #16
 80066d0:	d109      	bne.n	80066e6 <_strtoul_l.constprop.0+0x3e>
 80066d2:	2c30      	cmp	r4, #48	; 0x30
 80066d4:	d107      	bne.n	80066e6 <_strtoul_l.constprop.0+0x3e>
 80066d6:	7828      	ldrb	r0, [r5, #0]
 80066d8:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80066dc:	2858      	cmp	r0, #88	; 0x58
 80066de:	d149      	bne.n	8006774 <_strtoul_l.constprop.0+0xcc>
 80066e0:	786c      	ldrb	r4, [r5, #1]
 80066e2:	2310      	movs	r3, #16
 80066e4:	3502      	adds	r5, #2
 80066e6:	f04f 38ff 	mov.w	r8, #4294967295
 80066ea:	2700      	movs	r7, #0
 80066ec:	fbb8 f8f3 	udiv	r8, r8, r3
 80066f0:	fb03 f908 	mul.w	r9, r3, r8
 80066f4:	ea6f 0909 	mvn.w	r9, r9
 80066f8:	4638      	mov	r0, r7
 80066fa:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80066fe:	f1bc 0f09 	cmp.w	ip, #9
 8006702:	d814      	bhi.n	800672e <_strtoul_l.constprop.0+0x86>
 8006704:	4664      	mov	r4, ip
 8006706:	42a3      	cmp	r3, r4
 8006708:	dd22      	ble.n	8006750 <_strtoul_l.constprop.0+0xa8>
 800670a:	2f00      	cmp	r7, #0
 800670c:	db1d      	blt.n	800674a <_strtoul_l.constprop.0+0xa2>
 800670e:	4580      	cmp	r8, r0
 8006710:	d31b      	bcc.n	800674a <_strtoul_l.constprop.0+0xa2>
 8006712:	d101      	bne.n	8006718 <_strtoul_l.constprop.0+0x70>
 8006714:	45a1      	cmp	r9, r4
 8006716:	db18      	blt.n	800674a <_strtoul_l.constprop.0+0xa2>
 8006718:	fb00 4003 	mla	r0, r0, r3, r4
 800671c:	2701      	movs	r7, #1
 800671e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006722:	e7ea      	b.n	80066fa <_strtoul_l.constprop.0+0x52>
 8006724:	2c2b      	cmp	r4, #43	; 0x2b
 8006726:	bf04      	itt	eq
 8006728:	782c      	ldrbeq	r4, [r5, #0]
 800672a:	1c85      	addeq	r5, r0, #2
 800672c:	e7cd      	b.n	80066ca <_strtoul_l.constprop.0+0x22>
 800672e:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8006732:	f1bc 0f19 	cmp.w	ip, #25
 8006736:	d801      	bhi.n	800673c <_strtoul_l.constprop.0+0x94>
 8006738:	3c37      	subs	r4, #55	; 0x37
 800673a:	e7e4      	b.n	8006706 <_strtoul_l.constprop.0+0x5e>
 800673c:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8006740:	f1bc 0f19 	cmp.w	ip, #25
 8006744:	d804      	bhi.n	8006750 <_strtoul_l.constprop.0+0xa8>
 8006746:	3c57      	subs	r4, #87	; 0x57
 8006748:	e7dd      	b.n	8006706 <_strtoul_l.constprop.0+0x5e>
 800674a:	f04f 37ff 	mov.w	r7, #4294967295
 800674e:	e7e6      	b.n	800671e <_strtoul_l.constprop.0+0x76>
 8006750:	2f00      	cmp	r7, #0
 8006752:	da07      	bge.n	8006764 <_strtoul_l.constprop.0+0xbc>
 8006754:	2322      	movs	r3, #34	; 0x22
 8006756:	f8ce 3000 	str.w	r3, [lr]
 800675a:	f04f 30ff 	mov.w	r0, #4294967295
 800675e:	b932      	cbnz	r2, 800676e <_strtoul_l.constprop.0+0xc6>
 8006760:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006764:	b106      	cbz	r6, 8006768 <_strtoul_l.constprop.0+0xc0>
 8006766:	4240      	negs	r0, r0
 8006768:	2a00      	cmp	r2, #0
 800676a:	d0f9      	beq.n	8006760 <_strtoul_l.constprop.0+0xb8>
 800676c:	b107      	cbz	r7, 8006770 <_strtoul_l.constprop.0+0xc8>
 800676e:	1e69      	subs	r1, r5, #1
 8006770:	6011      	str	r1, [r2, #0]
 8006772:	e7f5      	b.n	8006760 <_strtoul_l.constprop.0+0xb8>
 8006774:	2430      	movs	r4, #48	; 0x30
 8006776:	2b00      	cmp	r3, #0
 8006778:	d1b5      	bne.n	80066e6 <_strtoul_l.constprop.0+0x3e>
 800677a:	2308      	movs	r3, #8
 800677c:	e7b3      	b.n	80066e6 <_strtoul_l.constprop.0+0x3e>
 800677e:	2c30      	cmp	r4, #48	; 0x30
 8006780:	d0a9      	beq.n	80066d6 <_strtoul_l.constprop.0+0x2e>
 8006782:	230a      	movs	r3, #10
 8006784:	e7af      	b.n	80066e6 <_strtoul_l.constprop.0+0x3e>
 8006786:	bf00      	nop
 8006788:	080080a1 	.word	0x080080a1

0800678c <strtoul>:
 800678c:	4613      	mov	r3, r2
 800678e:	460a      	mov	r2, r1
 8006790:	4601      	mov	r1, r0
 8006792:	4802      	ldr	r0, [pc, #8]	; (800679c <strtoul+0x10>)
 8006794:	6800      	ldr	r0, [r0, #0]
 8006796:	f7ff bf87 	b.w	80066a8 <_strtoul_l.constprop.0>
 800679a:	bf00      	nop
 800679c:	200009d4 	.word	0x200009d4

080067a0 <__swbuf_r>:
 80067a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067a2:	460e      	mov	r6, r1
 80067a4:	4614      	mov	r4, r2
 80067a6:	4605      	mov	r5, r0
 80067a8:	b118      	cbz	r0, 80067b2 <__swbuf_r+0x12>
 80067aa:	6983      	ldr	r3, [r0, #24]
 80067ac:	b90b      	cbnz	r3, 80067b2 <__swbuf_r+0x12>
 80067ae:	f000 f9d1 	bl	8006b54 <__sinit>
 80067b2:	4b21      	ldr	r3, [pc, #132]	; (8006838 <__swbuf_r+0x98>)
 80067b4:	429c      	cmp	r4, r3
 80067b6:	d12b      	bne.n	8006810 <__swbuf_r+0x70>
 80067b8:	686c      	ldr	r4, [r5, #4]
 80067ba:	69a3      	ldr	r3, [r4, #24]
 80067bc:	60a3      	str	r3, [r4, #8]
 80067be:	89a3      	ldrh	r3, [r4, #12]
 80067c0:	071a      	lsls	r2, r3, #28
 80067c2:	d52f      	bpl.n	8006824 <__swbuf_r+0x84>
 80067c4:	6923      	ldr	r3, [r4, #16]
 80067c6:	b36b      	cbz	r3, 8006824 <__swbuf_r+0x84>
 80067c8:	6923      	ldr	r3, [r4, #16]
 80067ca:	6820      	ldr	r0, [r4, #0]
 80067cc:	1ac0      	subs	r0, r0, r3
 80067ce:	6963      	ldr	r3, [r4, #20]
 80067d0:	b2f6      	uxtb	r6, r6
 80067d2:	4283      	cmp	r3, r0
 80067d4:	4637      	mov	r7, r6
 80067d6:	dc04      	bgt.n	80067e2 <__swbuf_r+0x42>
 80067d8:	4621      	mov	r1, r4
 80067da:	4628      	mov	r0, r5
 80067dc:	f000 f926 	bl	8006a2c <_fflush_r>
 80067e0:	bb30      	cbnz	r0, 8006830 <__swbuf_r+0x90>
 80067e2:	68a3      	ldr	r3, [r4, #8]
 80067e4:	3b01      	subs	r3, #1
 80067e6:	60a3      	str	r3, [r4, #8]
 80067e8:	6823      	ldr	r3, [r4, #0]
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	6022      	str	r2, [r4, #0]
 80067ee:	701e      	strb	r6, [r3, #0]
 80067f0:	6963      	ldr	r3, [r4, #20]
 80067f2:	3001      	adds	r0, #1
 80067f4:	4283      	cmp	r3, r0
 80067f6:	d004      	beq.n	8006802 <__swbuf_r+0x62>
 80067f8:	89a3      	ldrh	r3, [r4, #12]
 80067fa:	07db      	lsls	r3, r3, #31
 80067fc:	d506      	bpl.n	800680c <__swbuf_r+0x6c>
 80067fe:	2e0a      	cmp	r6, #10
 8006800:	d104      	bne.n	800680c <__swbuf_r+0x6c>
 8006802:	4621      	mov	r1, r4
 8006804:	4628      	mov	r0, r5
 8006806:	f000 f911 	bl	8006a2c <_fflush_r>
 800680a:	b988      	cbnz	r0, 8006830 <__swbuf_r+0x90>
 800680c:	4638      	mov	r0, r7
 800680e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006810:	4b0a      	ldr	r3, [pc, #40]	; (800683c <__swbuf_r+0x9c>)
 8006812:	429c      	cmp	r4, r3
 8006814:	d101      	bne.n	800681a <__swbuf_r+0x7a>
 8006816:	68ac      	ldr	r4, [r5, #8]
 8006818:	e7cf      	b.n	80067ba <__swbuf_r+0x1a>
 800681a:	4b09      	ldr	r3, [pc, #36]	; (8006840 <__swbuf_r+0xa0>)
 800681c:	429c      	cmp	r4, r3
 800681e:	bf08      	it	eq
 8006820:	68ec      	ldreq	r4, [r5, #12]
 8006822:	e7ca      	b.n	80067ba <__swbuf_r+0x1a>
 8006824:	4621      	mov	r1, r4
 8006826:	4628      	mov	r0, r5
 8006828:	f000 f80c 	bl	8006844 <__swsetup_r>
 800682c:	2800      	cmp	r0, #0
 800682e:	d0cb      	beq.n	80067c8 <__swbuf_r+0x28>
 8006830:	f04f 37ff 	mov.w	r7, #4294967295
 8006834:	e7ea      	b.n	800680c <__swbuf_r+0x6c>
 8006836:	bf00      	nop
 8006838:	080081c4 	.word	0x080081c4
 800683c:	080081e4 	.word	0x080081e4
 8006840:	080081a4 	.word	0x080081a4

08006844 <__swsetup_r>:
 8006844:	4b32      	ldr	r3, [pc, #200]	; (8006910 <__swsetup_r+0xcc>)
 8006846:	b570      	push	{r4, r5, r6, lr}
 8006848:	681d      	ldr	r5, [r3, #0]
 800684a:	4606      	mov	r6, r0
 800684c:	460c      	mov	r4, r1
 800684e:	b125      	cbz	r5, 800685a <__swsetup_r+0x16>
 8006850:	69ab      	ldr	r3, [r5, #24]
 8006852:	b913      	cbnz	r3, 800685a <__swsetup_r+0x16>
 8006854:	4628      	mov	r0, r5
 8006856:	f000 f97d 	bl	8006b54 <__sinit>
 800685a:	4b2e      	ldr	r3, [pc, #184]	; (8006914 <__swsetup_r+0xd0>)
 800685c:	429c      	cmp	r4, r3
 800685e:	d10f      	bne.n	8006880 <__swsetup_r+0x3c>
 8006860:	686c      	ldr	r4, [r5, #4]
 8006862:	89a3      	ldrh	r3, [r4, #12]
 8006864:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006868:	0719      	lsls	r1, r3, #28
 800686a:	d42c      	bmi.n	80068c6 <__swsetup_r+0x82>
 800686c:	06dd      	lsls	r5, r3, #27
 800686e:	d411      	bmi.n	8006894 <__swsetup_r+0x50>
 8006870:	2309      	movs	r3, #9
 8006872:	6033      	str	r3, [r6, #0]
 8006874:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006878:	81a3      	strh	r3, [r4, #12]
 800687a:	f04f 30ff 	mov.w	r0, #4294967295
 800687e:	e03e      	b.n	80068fe <__swsetup_r+0xba>
 8006880:	4b25      	ldr	r3, [pc, #148]	; (8006918 <__swsetup_r+0xd4>)
 8006882:	429c      	cmp	r4, r3
 8006884:	d101      	bne.n	800688a <__swsetup_r+0x46>
 8006886:	68ac      	ldr	r4, [r5, #8]
 8006888:	e7eb      	b.n	8006862 <__swsetup_r+0x1e>
 800688a:	4b24      	ldr	r3, [pc, #144]	; (800691c <__swsetup_r+0xd8>)
 800688c:	429c      	cmp	r4, r3
 800688e:	bf08      	it	eq
 8006890:	68ec      	ldreq	r4, [r5, #12]
 8006892:	e7e6      	b.n	8006862 <__swsetup_r+0x1e>
 8006894:	0758      	lsls	r0, r3, #29
 8006896:	d512      	bpl.n	80068be <__swsetup_r+0x7a>
 8006898:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800689a:	b141      	cbz	r1, 80068ae <__swsetup_r+0x6a>
 800689c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068a0:	4299      	cmp	r1, r3
 80068a2:	d002      	beq.n	80068aa <__swsetup_r+0x66>
 80068a4:	4630      	mov	r0, r6
 80068a6:	f7ff fc57 	bl	8006158 <_free_r>
 80068aa:	2300      	movs	r3, #0
 80068ac:	6363      	str	r3, [r4, #52]	; 0x34
 80068ae:	89a3      	ldrh	r3, [r4, #12]
 80068b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068b4:	81a3      	strh	r3, [r4, #12]
 80068b6:	2300      	movs	r3, #0
 80068b8:	6063      	str	r3, [r4, #4]
 80068ba:	6923      	ldr	r3, [r4, #16]
 80068bc:	6023      	str	r3, [r4, #0]
 80068be:	89a3      	ldrh	r3, [r4, #12]
 80068c0:	f043 0308 	orr.w	r3, r3, #8
 80068c4:	81a3      	strh	r3, [r4, #12]
 80068c6:	6923      	ldr	r3, [r4, #16]
 80068c8:	b94b      	cbnz	r3, 80068de <__swsetup_r+0x9a>
 80068ca:	89a3      	ldrh	r3, [r4, #12]
 80068cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80068d4:	d003      	beq.n	80068de <__swsetup_r+0x9a>
 80068d6:	4621      	mov	r1, r4
 80068d8:	4630      	mov	r0, r6
 80068da:	f000 fa01 	bl	8006ce0 <__smakebuf_r>
 80068de:	89a0      	ldrh	r0, [r4, #12]
 80068e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80068e4:	f010 0301 	ands.w	r3, r0, #1
 80068e8:	d00a      	beq.n	8006900 <__swsetup_r+0xbc>
 80068ea:	2300      	movs	r3, #0
 80068ec:	60a3      	str	r3, [r4, #8]
 80068ee:	6963      	ldr	r3, [r4, #20]
 80068f0:	425b      	negs	r3, r3
 80068f2:	61a3      	str	r3, [r4, #24]
 80068f4:	6923      	ldr	r3, [r4, #16]
 80068f6:	b943      	cbnz	r3, 800690a <__swsetup_r+0xc6>
 80068f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80068fc:	d1ba      	bne.n	8006874 <__swsetup_r+0x30>
 80068fe:	bd70      	pop	{r4, r5, r6, pc}
 8006900:	0781      	lsls	r1, r0, #30
 8006902:	bf58      	it	pl
 8006904:	6963      	ldrpl	r3, [r4, #20]
 8006906:	60a3      	str	r3, [r4, #8]
 8006908:	e7f4      	b.n	80068f4 <__swsetup_r+0xb0>
 800690a:	2000      	movs	r0, #0
 800690c:	e7f7      	b.n	80068fe <__swsetup_r+0xba>
 800690e:	bf00      	nop
 8006910:	200009d4 	.word	0x200009d4
 8006914:	080081c4 	.word	0x080081c4
 8006918:	080081e4 	.word	0x080081e4
 800691c:	080081a4 	.word	0x080081a4

08006920 <__sflush_r>:
 8006920:	898a      	ldrh	r2, [r1, #12]
 8006922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006926:	4605      	mov	r5, r0
 8006928:	0710      	lsls	r0, r2, #28
 800692a:	460c      	mov	r4, r1
 800692c:	d458      	bmi.n	80069e0 <__sflush_r+0xc0>
 800692e:	684b      	ldr	r3, [r1, #4]
 8006930:	2b00      	cmp	r3, #0
 8006932:	dc05      	bgt.n	8006940 <__sflush_r+0x20>
 8006934:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006936:	2b00      	cmp	r3, #0
 8006938:	dc02      	bgt.n	8006940 <__sflush_r+0x20>
 800693a:	2000      	movs	r0, #0
 800693c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006940:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006942:	2e00      	cmp	r6, #0
 8006944:	d0f9      	beq.n	800693a <__sflush_r+0x1a>
 8006946:	2300      	movs	r3, #0
 8006948:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800694c:	682f      	ldr	r7, [r5, #0]
 800694e:	602b      	str	r3, [r5, #0]
 8006950:	d032      	beq.n	80069b8 <__sflush_r+0x98>
 8006952:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006954:	89a3      	ldrh	r3, [r4, #12]
 8006956:	075a      	lsls	r2, r3, #29
 8006958:	d505      	bpl.n	8006966 <__sflush_r+0x46>
 800695a:	6863      	ldr	r3, [r4, #4]
 800695c:	1ac0      	subs	r0, r0, r3
 800695e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006960:	b10b      	cbz	r3, 8006966 <__sflush_r+0x46>
 8006962:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006964:	1ac0      	subs	r0, r0, r3
 8006966:	2300      	movs	r3, #0
 8006968:	4602      	mov	r2, r0
 800696a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800696c:	6a21      	ldr	r1, [r4, #32]
 800696e:	4628      	mov	r0, r5
 8006970:	47b0      	blx	r6
 8006972:	1c43      	adds	r3, r0, #1
 8006974:	89a3      	ldrh	r3, [r4, #12]
 8006976:	d106      	bne.n	8006986 <__sflush_r+0x66>
 8006978:	6829      	ldr	r1, [r5, #0]
 800697a:	291d      	cmp	r1, #29
 800697c:	d82c      	bhi.n	80069d8 <__sflush_r+0xb8>
 800697e:	4a2a      	ldr	r2, [pc, #168]	; (8006a28 <__sflush_r+0x108>)
 8006980:	40ca      	lsrs	r2, r1
 8006982:	07d6      	lsls	r6, r2, #31
 8006984:	d528      	bpl.n	80069d8 <__sflush_r+0xb8>
 8006986:	2200      	movs	r2, #0
 8006988:	6062      	str	r2, [r4, #4]
 800698a:	04d9      	lsls	r1, r3, #19
 800698c:	6922      	ldr	r2, [r4, #16]
 800698e:	6022      	str	r2, [r4, #0]
 8006990:	d504      	bpl.n	800699c <__sflush_r+0x7c>
 8006992:	1c42      	adds	r2, r0, #1
 8006994:	d101      	bne.n	800699a <__sflush_r+0x7a>
 8006996:	682b      	ldr	r3, [r5, #0]
 8006998:	b903      	cbnz	r3, 800699c <__sflush_r+0x7c>
 800699a:	6560      	str	r0, [r4, #84]	; 0x54
 800699c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800699e:	602f      	str	r7, [r5, #0]
 80069a0:	2900      	cmp	r1, #0
 80069a2:	d0ca      	beq.n	800693a <__sflush_r+0x1a>
 80069a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069a8:	4299      	cmp	r1, r3
 80069aa:	d002      	beq.n	80069b2 <__sflush_r+0x92>
 80069ac:	4628      	mov	r0, r5
 80069ae:	f7ff fbd3 	bl	8006158 <_free_r>
 80069b2:	2000      	movs	r0, #0
 80069b4:	6360      	str	r0, [r4, #52]	; 0x34
 80069b6:	e7c1      	b.n	800693c <__sflush_r+0x1c>
 80069b8:	6a21      	ldr	r1, [r4, #32]
 80069ba:	2301      	movs	r3, #1
 80069bc:	4628      	mov	r0, r5
 80069be:	47b0      	blx	r6
 80069c0:	1c41      	adds	r1, r0, #1
 80069c2:	d1c7      	bne.n	8006954 <__sflush_r+0x34>
 80069c4:	682b      	ldr	r3, [r5, #0]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d0c4      	beq.n	8006954 <__sflush_r+0x34>
 80069ca:	2b1d      	cmp	r3, #29
 80069cc:	d001      	beq.n	80069d2 <__sflush_r+0xb2>
 80069ce:	2b16      	cmp	r3, #22
 80069d0:	d101      	bne.n	80069d6 <__sflush_r+0xb6>
 80069d2:	602f      	str	r7, [r5, #0]
 80069d4:	e7b1      	b.n	800693a <__sflush_r+0x1a>
 80069d6:	89a3      	ldrh	r3, [r4, #12]
 80069d8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069dc:	81a3      	strh	r3, [r4, #12]
 80069de:	e7ad      	b.n	800693c <__sflush_r+0x1c>
 80069e0:	690f      	ldr	r7, [r1, #16]
 80069e2:	2f00      	cmp	r7, #0
 80069e4:	d0a9      	beq.n	800693a <__sflush_r+0x1a>
 80069e6:	0793      	lsls	r3, r2, #30
 80069e8:	680e      	ldr	r6, [r1, #0]
 80069ea:	bf08      	it	eq
 80069ec:	694b      	ldreq	r3, [r1, #20]
 80069ee:	600f      	str	r7, [r1, #0]
 80069f0:	bf18      	it	ne
 80069f2:	2300      	movne	r3, #0
 80069f4:	eba6 0807 	sub.w	r8, r6, r7
 80069f8:	608b      	str	r3, [r1, #8]
 80069fa:	f1b8 0f00 	cmp.w	r8, #0
 80069fe:	dd9c      	ble.n	800693a <__sflush_r+0x1a>
 8006a00:	6a21      	ldr	r1, [r4, #32]
 8006a02:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a04:	4643      	mov	r3, r8
 8006a06:	463a      	mov	r2, r7
 8006a08:	4628      	mov	r0, r5
 8006a0a:	47b0      	blx	r6
 8006a0c:	2800      	cmp	r0, #0
 8006a0e:	dc06      	bgt.n	8006a1e <__sflush_r+0xfe>
 8006a10:	89a3      	ldrh	r3, [r4, #12]
 8006a12:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a16:	81a3      	strh	r3, [r4, #12]
 8006a18:	f04f 30ff 	mov.w	r0, #4294967295
 8006a1c:	e78e      	b.n	800693c <__sflush_r+0x1c>
 8006a1e:	4407      	add	r7, r0
 8006a20:	eba8 0800 	sub.w	r8, r8, r0
 8006a24:	e7e9      	b.n	80069fa <__sflush_r+0xda>
 8006a26:	bf00      	nop
 8006a28:	20400001 	.word	0x20400001

08006a2c <_fflush_r>:
 8006a2c:	b538      	push	{r3, r4, r5, lr}
 8006a2e:	690b      	ldr	r3, [r1, #16]
 8006a30:	4605      	mov	r5, r0
 8006a32:	460c      	mov	r4, r1
 8006a34:	b913      	cbnz	r3, 8006a3c <_fflush_r+0x10>
 8006a36:	2500      	movs	r5, #0
 8006a38:	4628      	mov	r0, r5
 8006a3a:	bd38      	pop	{r3, r4, r5, pc}
 8006a3c:	b118      	cbz	r0, 8006a46 <_fflush_r+0x1a>
 8006a3e:	6983      	ldr	r3, [r0, #24]
 8006a40:	b90b      	cbnz	r3, 8006a46 <_fflush_r+0x1a>
 8006a42:	f000 f887 	bl	8006b54 <__sinit>
 8006a46:	4b14      	ldr	r3, [pc, #80]	; (8006a98 <_fflush_r+0x6c>)
 8006a48:	429c      	cmp	r4, r3
 8006a4a:	d11b      	bne.n	8006a84 <_fflush_r+0x58>
 8006a4c:	686c      	ldr	r4, [r5, #4]
 8006a4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d0ef      	beq.n	8006a36 <_fflush_r+0xa>
 8006a56:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a58:	07d0      	lsls	r0, r2, #31
 8006a5a:	d404      	bmi.n	8006a66 <_fflush_r+0x3a>
 8006a5c:	0599      	lsls	r1, r3, #22
 8006a5e:	d402      	bmi.n	8006a66 <_fflush_r+0x3a>
 8006a60:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a62:	f000 f915 	bl	8006c90 <__retarget_lock_acquire_recursive>
 8006a66:	4628      	mov	r0, r5
 8006a68:	4621      	mov	r1, r4
 8006a6a:	f7ff ff59 	bl	8006920 <__sflush_r>
 8006a6e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a70:	07da      	lsls	r2, r3, #31
 8006a72:	4605      	mov	r5, r0
 8006a74:	d4e0      	bmi.n	8006a38 <_fflush_r+0xc>
 8006a76:	89a3      	ldrh	r3, [r4, #12]
 8006a78:	059b      	lsls	r3, r3, #22
 8006a7a:	d4dd      	bmi.n	8006a38 <_fflush_r+0xc>
 8006a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a7e:	f000 f908 	bl	8006c92 <__retarget_lock_release_recursive>
 8006a82:	e7d9      	b.n	8006a38 <_fflush_r+0xc>
 8006a84:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <_fflush_r+0x70>)
 8006a86:	429c      	cmp	r4, r3
 8006a88:	d101      	bne.n	8006a8e <_fflush_r+0x62>
 8006a8a:	68ac      	ldr	r4, [r5, #8]
 8006a8c:	e7df      	b.n	8006a4e <_fflush_r+0x22>
 8006a8e:	4b04      	ldr	r3, [pc, #16]	; (8006aa0 <_fflush_r+0x74>)
 8006a90:	429c      	cmp	r4, r3
 8006a92:	bf08      	it	eq
 8006a94:	68ec      	ldreq	r4, [r5, #12]
 8006a96:	e7da      	b.n	8006a4e <_fflush_r+0x22>
 8006a98:	080081c4 	.word	0x080081c4
 8006a9c:	080081e4 	.word	0x080081e4
 8006aa0:	080081a4 	.word	0x080081a4

08006aa4 <std>:
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	b510      	push	{r4, lr}
 8006aa8:	4604      	mov	r4, r0
 8006aaa:	e9c0 3300 	strd	r3, r3, [r0]
 8006aae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ab2:	6083      	str	r3, [r0, #8]
 8006ab4:	8181      	strh	r1, [r0, #12]
 8006ab6:	6643      	str	r3, [r0, #100]	; 0x64
 8006ab8:	81c2      	strh	r2, [r0, #14]
 8006aba:	6183      	str	r3, [r0, #24]
 8006abc:	4619      	mov	r1, r3
 8006abe:	2208      	movs	r2, #8
 8006ac0:	305c      	adds	r0, #92	; 0x5c
 8006ac2:	f7ff fb41 	bl	8006148 <memset>
 8006ac6:	4b05      	ldr	r3, [pc, #20]	; (8006adc <std+0x38>)
 8006ac8:	6263      	str	r3, [r4, #36]	; 0x24
 8006aca:	4b05      	ldr	r3, [pc, #20]	; (8006ae0 <std+0x3c>)
 8006acc:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ace:	4b05      	ldr	r3, [pc, #20]	; (8006ae4 <std+0x40>)
 8006ad0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ad2:	4b05      	ldr	r3, [pc, #20]	; (8006ae8 <std+0x44>)
 8006ad4:	6224      	str	r4, [r4, #32]
 8006ad6:	6323      	str	r3, [r4, #48]	; 0x30
 8006ad8:	bd10      	pop	{r4, pc}
 8006ada:	bf00      	nop
 8006adc:	0800769d 	.word	0x0800769d
 8006ae0:	080076bf 	.word	0x080076bf
 8006ae4:	080076f7 	.word	0x080076f7
 8006ae8:	0800771b 	.word	0x0800771b

08006aec <_cleanup_r>:
 8006aec:	4901      	ldr	r1, [pc, #4]	; (8006af4 <_cleanup_r+0x8>)
 8006aee:	f000 b8af 	b.w	8006c50 <_fwalk_reent>
 8006af2:	bf00      	nop
 8006af4:	08006a2d 	.word	0x08006a2d

08006af8 <__sfmoreglue>:
 8006af8:	b570      	push	{r4, r5, r6, lr}
 8006afa:	2268      	movs	r2, #104	; 0x68
 8006afc:	1e4d      	subs	r5, r1, #1
 8006afe:	4355      	muls	r5, r2
 8006b00:	460e      	mov	r6, r1
 8006b02:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b06:	f7ff fb93 	bl	8006230 <_malloc_r>
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	b140      	cbz	r0, 8006b20 <__sfmoreglue+0x28>
 8006b0e:	2100      	movs	r1, #0
 8006b10:	e9c0 1600 	strd	r1, r6, [r0]
 8006b14:	300c      	adds	r0, #12
 8006b16:	60a0      	str	r0, [r4, #8]
 8006b18:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b1c:	f7ff fb14 	bl	8006148 <memset>
 8006b20:	4620      	mov	r0, r4
 8006b22:	bd70      	pop	{r4, r5, r6, pc}

08006b24 <__sfp_lock_acquire>:
 8006b24:	4801      	ldr	r0, [pc, #4]	; (8006b2c <__sfp_lock_acquire+0x8>)
 8006b26:	f000 b8b3 	b.w	8006c90 <__retarget_lock_acquire_recursive>
 8006b2a:	bf00      	nop
 8006b2c:	200023f5 	.word	0x200023f5

08006b30 <__sfp_lock_release>:
 8006b30:	4801      	ldr	r0, [pc, #4]	; (8006b38 <__sfp_lock_release+0x8>)
 8006b32:	f000 b8ae 	b.w	8006c92 <__retarget_lock_release_recursive>
 8006b36:	bf00      	nop
 8006b38:	200023f5 	.word	0x200023f5

08006b3c <__sinit_lock_acquire>:
 8006b3c:	4801      	ldr	r0, [pc, #4]	; (8006b44 <__sinit_lock_acquire+0x8>)
 8006b3e:	f000 b8a7 	b.w	8006c90 <__retarget_lock_acquire_recursive>
 8006b42:	bf00      	nop
 8006b44:	200023f6 	.word	0x200023f6

08006b48 <__sinit_lock_release>:
 8006b48:	4801      	ldr	r0, [pc, #4]	; (8006b50 <__sinit_lock_release+0x8>)
 8006b4a:	f000 b8a2 	b.w	8006c92 <__retarget_lock_release_recursive>
 8006b4e:	bf00      	nop
 8006b50:	200023f6 	.word	0x200023f6

08006b54 <__sinit>:
 8006b54:	b510      	push	{r4, lr}
 8006b56:	4604      	mov	r4, r0
 8006b58:	f7ff fff0 	bl	8006b3c <__sinit_lock_acquire>
 8006b5c:	69a3      	ldr	r3, [r4, #24]
 8006b5e:	b11b      	cbz	r3, 8006b68 <__sinit+0x14>
 8006b60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b64:	f7ff bff0 	b.w	8006b48 <__sinit_lock_release>
 8006b68:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b6c:	6523      	str	r3, [r4, #80]	; 0x50
 8006b6e:	4b13      	ldr	r3, [pc, #76]	; (8006bbc <__sinit+0x68>)
 8006b70:	4a13      	ldr	r2, [pc, #76]	; (8006bc0 <__sinit+0x6c>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b76:	42a3      	cmp	r3, r4
 8006b78:	bf04      	itt	eq
 8006b7a:	2301      	moveq	r3, #1
 8006b7c:	61a3      	streq	r3, [r4, #24]
 8006b7e:	4620      	mov	r0, r4
 8006b80:	f000 f820 	bl	8006bc4 <__sfp>
 8006b84:	6060      	str	r0, [r4, #4]
 8006b86:	4620      	mov	r0, r4
 8006b88:	f000 f81c 	bl	8006bc4 <__sfp>
 8006b8c:	60a0      	str	r0, [r4, #8]
 8006b8e:	4620      	mov	r0, r4
 8006b90:	f000 f818 	bl	8006bc4 <__sfp>
 8006b94:	2200      	movs	r2, #0
 8006b96:	60e0      	str	r0, [r4, #12]
 8006b98:	2104      	movs	r1, #4
 8006b9a:	6860      	ldr	r0, [r4, #4]
 8006b9c:	f7ff ff82 	bl	8006aa4 <std>
 8006ba0:	68a0      	ldr	r0, [r4, #8]
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	2109      	movs	r1, #9
 8006ba6:	f7ff ff7d 	bl	8006aa4 <std>
 8006baa:	68e0      	ldr	r0, [r4, #12]
 8006bac:	2202      	movs	r2, #2
 8006bae:	2112      	movs	r1, #18
 8006bb0:	f7ff ff78 	bl	8006aa4 <std>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	61a3      	str	r3, [r4, #24]
 8006bb8:	e7d2      	b.n	8006b60 <__sinit+0xc>
 8006bba:	bf00      	nop
 8006bbc:	0800809c 	.word	0x0800809c
 8006bc0:	08006aed 	.word	0x08006aed

08006bc4 <__sfp>:
 8006bc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bc6:	4607      	mov	r7, r0
 8006bc8:	f7ff ffac 	bl	8006b24 <__sfp_lock_acquire>
 8006bcc:	4b1e      	ldr	r3, [pc, #120]	; (8006c48 <__sfp+0x84>)
 8006bce:	681e      	ldr	r6, [r3, #0]
 8006bd0:	69b3      	ldr	r3, [r6, #24]
 8006bd2:	b913      	cbnz	r3, 8006bda <__sfp+0x16>
 8006bd4:	4630      	mov	r0, r6
 8006bd6:	f7ff ffbd 	bl	8006b54 <__sinit>
 8006bda:	3648      	adds	r6, #72	; 0x48
 8006bdc:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006be0:	3b01      	subs	r3, #1
 8006be2:	d503      	bpl.n	8006bec <__sfp+0x28>
 8006be4:	6833      	ldr	r3, [r6, #0]
 8006be6:	b30b      	cbz	r3, 8006c2c <__sfp+0x68>
 8006be8:	6836      	ldr	r6, [r6, #0]
 8006bea:	e7f7      	b.n	8006bdc <__sfp+0x18>
 8006bec:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006bf0:	b9d5      	cbnz	r5, 8006c28 <__sfp+0x64>
 8006bf2:	4b16      	ldr	r3, [pc, #88]	; (8006c4c <__sfp+0x88>)
 8006bf4:	60e3      	str	r3, [r4, #12]
 8006bf6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006bfa:	6665      	str	r5, [r4, #100]	; 0x64
 8006bfc:	f000 f847 	bl	8006c8e <__retarget_lock_init_recursive>
 8006c00:	f7ff ff96 	bl	8006b30 <__sfp_lock_release>
 8006c04:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c08:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c0c:	6025      	str	r5, [r4, #0]
 8006c0e:	61a5      	str	r5, [r4, #24]
 8006c10:	2208      	movs	r2, #8
 8006c12:	4629      	mov	r1, r5
 8006c14:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c18:	f7ff fa96 	bl	8006148 <memset>
 8006c1c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c20:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c24:	4620      	mov	r0, r4
 8006c26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c28:	3468      	adds	r4, #104	; 0x68
 8006c2a:	e7d9      	b.n	8006be0 <__sfp+0x1c>
 8006c2c:	2104      	movs	r1, #4
 8006c2e:	4638      	mov	r0, r7
 8006c30:	f7ff ff62 	bl	8006af8 <__sfmoreglue>
 8006c34:	4604      	mov	r4, r0
 8006c36:	6030      	str	r0, [r6, #0]
 8006c38:	2800      	cmp	r0, #0
 8006c3a:	d1d5      	bne.n	8006be8 <__sfp+0x24>
 8006c3c:	f7ff ff78 	bl	8006b30 <__sfp_lock_release>
 8006c40:	230c      	movs	r3, #12
 8006c42:	603b      	str	r3, [r7, #0]
 8006c44:	e7ee      	b.n	8006c24 <__sfp+0x60>
 8006c46:	bf00      	nop
 8006c48:	0800809c 	.word	0x0800809c
 8006c4c:	ffff0001 	.word	0xffff0001

08006c50 <_fwalk_reent>:
 8006c50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c54:	4606      	mov	r6, r0
 8006c56:	4688      	mov	r8, r1
 8006c58:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c5c:	2700      	movs	r7, #0
 8006c5e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c62:	f1b9 0901 	subs.w	r9, r9, #1
 8006c66:	d505      	bpl.n	8006c74 <_fwalk_reent+0x24>
 8006c68:	6824      	ldr	r4, [r4, #0]
 8006c6a:	2c00      	cmp	r4, #0
 8006c6c:	d1f7      	bne.n	8006c5e <_fwalk_reent+0xe>
 8006c6e:	4638      	mov	r0, r7
 8006c70:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c74:	89ab      	ldrh	r3, [r5, #12]
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d907      	bls.n	8006c8a <_fwalk_reent+0x3a>
 8006c7a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c7e:	3301      	adds	r3, #1
 8006c80:	d003      	beq.n	8006c8a <_fwalk_reent+0x3a>
 8006c82:	4629      	mov	r1, r5
 8006c84:	4630      	mov	r0, r6
 8006c86:	47c0      	blx	r8
 8006c88:	4307      	orrs	r7, r0
 8006c8a:	3568      	adds	r5, #104	; 0x68
 8006c8c:	e7e9      	b.n	8006c62 <_fwalk_reent+0x12>

08006c8e <__retarget_lock_init_recursive>:
 8006c8e:	4770      	bx	lr

08006c90 <__retarget_lock_acquire_recursive>:
 8006c90:	4770      	bx	lr

08006c92 <__retarget_lock_release_recursive>:
 8006c92:	4770      	bx	lr

08006c94 <__swhatbuf_r>:
 8006c94:	b570      	push	{r4, r5, r6, lr}
 8006c96:	460e      	mov	r6, r1
 8006c98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006c9c:	2900      	cmp	r1, #0
 8006c9e:	b096      	sub	sp, #88	; 0x58
 8006ca0:	4614      	mov	r4, r2
 8006ca2:	461d      	mov	r5, r3
 8006ca4:	da08      	bge.n	8006cb8 <__swhatbuf_r+0x24>
 8006ca6:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006caa:	2200      	movs	r2, #0
 8006cac:	602a      	str	r2, [r5, #0]
 8006cae:	061a      	lsls	r2, r3, #24
 8006cb0:	d410      	bmi.n	8006cd4 <__swhatbuf_r+0x40>
 8006cb2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cb6:	e00e      	b.n	8006cd6 <__swhatbuf_r+0x42>
 8006cb8:	466a      	mov	r2, sp
 8006cba:	f000 fd55 	bl	8007768 <_fstat_r>
 8006cbe:	2800      	cmp	r0, #0
 8006cc0:	dbf1      	blt.n	8006ca6 <__swhatbuf_r+0x12>
 8006cc2:	9a01      	ldr	r2, [sp, #4]
 8006cc4:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006cc8:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ccc:	425a      	negs	r2, r3
 8006cce:	415a      	adcs	r2, r3
 8006cd0:	602a      	str	r2, [r5, #0]
 8006cd2:	e7ee      	b.n	8006cb2 <__swhatbuf_r+0x1e>
 8006cd4:	2340      	movs	r3, #64	; 0x40
 8006cd6:	2000      	movs	r0, #0
 8006cd8:	6023      	str	r3, [r4, #0]
 8006cda:	b016      	add	sp, #88	; 0x58
 8006cdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08006ce0 <__smakebuf_r>:
 8006ce0:	898b      	ldrh	r3, [r1, #12]
 8006ce2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006ce4:	079d      	lsls	r5, r3, #30
 8006ce6:	4606      	mov	r6, r0
 8006ce8:	460c      	mov	r4, r1
 8006cea:	d507      	bpl.n	8006cfc <__smakebuf_r+0x1c>
 8006cec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006cf0:	6023      	str	r3, [r4, #0]
 8006cf2:	6123      	str	r3, [r4, #16]
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	6163      	str	r3, [r4, #20]
 8006cf8:	b002      	add	sp, #8
 8006cfa:	bd70      	pop	{r4, r5, r6, pc}
 8006cfc:	ab01      	add	r3, sp, #4
 8006cfe:	466a      	mov	r2, sp
 8006d00:	f7ff ffc8 	bl	8006c94 <__swhatbuf_r>
 8006d04:	9900      	ldr	r1, [sp, #0]
 8006d06:	4605      	mov	r5, r0
 8006d08:	4630      	mov	r0, r6
 8006d0a:	f7ff fa91 	bl	8006230 <_malloc_r>
 8006d0e:	b948      	cbnz	r0, 8006d24 <__smakebuf_r+0x44>
 8006d10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d14:	059a      	lsls	r2, r3, #22
 8006d16:	d4ef      	bmi.n	8006cf8 <__smakebuf_r+0x18>
 8006d18:	f023 0303 	bic.w	r3, r3, #3
 8006d1c:	f043 0302 	orr.w	r3, r3, #2
 8006d20:	81a3      	strh	r3, [r4, #12]
 8006d22:	e7e3      	b.n	8006cec <__smakebuf_r+0xc>
 8006d24:	4b0d      	ldr	r3, [pc, #52]	; (8006d5c <__smakebuf_r+0x7c>)
 8006d26:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d28:	89a3      	ldrh	r3, [r4, #12]
 8006d2a:	6020      	str	r0, [r4, #0]
 8006d2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d30:	81a3      	strh	r3, [r4, #12]
 8006d32:	9b00      	ldr	r3, [sp, #0]
 8006d34:	6163      	str	r3, [r4, #20]
 8006d36:	9b01      	ldr	r3, [sp, #4]
 8006d38:	6120      	str	r0, [r4, #16]
 8006d3a:	b15b      	cbz	r3, 8006d54 <__smakebuf_r+0x74>
 8006d3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d40:	4630      	mov	r0, r6
 8006d42:	f000 fd23 	bl	800778c <_isatty_r>
 8006d46:	b128      	cbz	r0, 8006d54 <__smakebuf_r+0x74>
 8006d48:	89a3      	ldrh	r3, [r4, #12]
 8006d4a:	f023 0303 	bic.w	r3, r3, #3
 8006d4e:	f043 0301 	orr.w	r3, r3, #1
 8006d52:	81a3      	strh	r3, [r4, #12]
 8006d54:	89a0      	ldrh	r0, [r4, #12]
 8006d56:	4305      	orrs	r5, r0
 8006d58:	81a5      	strh	r5, [r4, #12]
 8006d5a:	e7cd      	b.n	8006cf8 <__smakebuf_r+0x18>
 8006d5c:	08006aed 	.word	0x08006aed

08006d60 <__malloc_lock>:
 8006d60:	4801      	ldr	r0, [pc, #4]	; (8006d68 <__malloc_lock+0x8>)
 8006d62:	f7ff bf95 	b.w	8006c90 <__retarget_lock_acquire_recursive>
 8006d66:	bf00      	nop
 8006d68:	200023f4 	.word	0x200023f4

08006d6c <__malloc_unlock>:
 8006d6c:	4801      	ldr	r0, [pc, #4]	; (8006d74 <__malloc_unlock+0x8>)
 8006d6e:	f7ff bf90 	b.w	8006c92 <__retarget_lock_release_recursive>
 8006d72:	bf00      	nop
 8006d74:	200023f4 	.word	0x200023f4

08006d78 <__ssputs_r>:
 8006d78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d7c:	688e      	ldr	r6, [r1, #8]
 8006d7e:	429e      	cmp	r6, r3
 8006d80:	4682      	mov	sl, r0
 8006d82:	460c      	mov	r4, r1
 8006d84:	4690      	mov	r8, r2
 8006d86:	461f      	mov	r7, r3
 8006d88:	d838      	bhi.n	8006dfc <__ssputs_r+0x84>
 8006d8a:	898a      	ldrh	r2, [r1, #12]
 8006d8c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006d90:	d032      	beq.n	8006df8 <__ssputs_r+0x80>
 8006d92:	6825      	ldr	r5, [r4, #0]
 8006d94:	6909      	ldr	r1, [r1, #16]
 8006d96:	eba5 0901 	sub.w	r9, r5, r1
 8006d9a:	6965      	ldr	r5, [r4, #20]
 8006d9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006da0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006da4:	3301      	adds	r3, #1
 8006da6:	444b      	add	r3, r9
 8006da8:	106d      	asrs	r5, r5, #1
 8006daa:	429d      	cmp	r5, r3
 8006dac:	bf38      	it	cc
 8006dae:	461d      	movcc	r5, r3
 8006db0:	0553      	lsls	r3, r2, #21
 8006db2:	d531      	bpl.n	8006e18 <__ssputs_r+0xa0>
 8006db4:	4629      	mov	r1, r5
 8006db6:	f7ff fa3b 	bl	8006230 <_malloc_r>
 8006dba:	4606      	mov	r6, r0
 8006dbc:	b950      	cbnz	r0, 8006dd4 <__ssputs_r+0x5c>
 8006dbe:	230c      	movs	r3, #12
 8006dc0:	f8ca 3000 	str.w	r3, [sl]
 8006dc4:	89a3      	ldrh	r3, [r4, #12]
 8006dc6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006dca:	81a3      	strh	r3, [r4, #12]
 8006dcc:	f04f 30ff 	mov.w	r0, #4294967295
 8006dd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dd4:	6921      	ldr	r1, [r4, #16]
 8006dd6:	464a      	mov	r2, r9
 8006dd8:	f7ff f9a8 	bl	800612c <memcpy>
 8006ddc:	89a3      	ldrh	r3, [r4, #12]
 8006dde:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006de2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006de6:	81a3      	strh	r3, [r4, #12]
 8006de8:	6126      	str	r6, [r4, #16]
 8006dea:	6165      	str	r5, [r4, #20]
 8006dec:	444e      	add	r6, r9
 8006dee:	eba5 0509 	sub.w	r5, r5, r9
 8006df2:	6026      	str	r6, [r4, #0]
 8006df4:	60a5      	str	r5, [r4, #8]
 8006df6:	463e      	mov	r6, r7
 8006df8:	42be      	cmp	r6, r7
 8006dfa:	d900      	bls.n	8006dfe <__ssputs_r+0x86>
 8006dfc:	463e      	mov	r6, r7
 8006dfe:	6820      	ldr	r0, [r4, #0]
 8006e00:	4632      	mov	r2, r6
 8006e02:	4641      	mov	r1, r8
 8006e04:	f000 fce4 	bl	80077d0 <memmove>
 8006e08:	68a3      	ldr	r3, [r4, #8]
 8006e0a:	1b9b      	subs	r3, r3, r6
 8006e0c:	60a3      	str	r3, [r4, #8]
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	4433      	add	r3, r6
 8006e12:	6023      	str	r3, [r4, #0]
 8006e14:	2000      	movs	r0, #0
 8006e16:	e7db      	b.n	8006dd0 <__ssputs_r+0x58>
 8006e18:	462a      	mov	r2, r5
 8006e1a:	f000 fcf3 	bl	8007804 <_realloc_r>
 8006e1e:	4606      	mov	r6, r0
 8006e20:	2800      	cmp	r0, #0
 8006e22:	d1e1      	bne.n	8006de8 <__ssputs_r+0x70>
 8006e24:	6921      	ldr	r1, [r4, #16]
 8006e26:	4650      	mov	r0, sl
 8006e28:	f7ff f996 	bl	8006158 <_free_r>
 8006e2c:	e7c7      	b.n	8006dbe <__ssputs_r+0x46>
	...

08006e30 <_svfiprintf_r>:
 8006e30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e34:	4698      	mov	r8, r3
 8006e36:	898b      	ldrh	r3, [r1, #12]
 8006e38:	061b      	lsls	r3, r3, #24
 8006e3a:	b09d      	sub	sp, #116	; 0x74
 8006e3c:	4607      	mov	r7, r0
 8006e3e:	460d      	mov	r5, r1
 8006e40:	4614      	mov	r4, r2
 8006e42:	d50e      	bpl.n	8006e62 <_svfiprintf_r+0x32>
 8006e44:	690b      	ldr	r3, [r1, #16]
 8006e46:	b963      	cbnz	r3, 8006e62 <_svfiprintf_r+0x32>
 8006e48:	2140      	movs	r1, #64	; 0x40
 8006e4a:	f7ff f9f1 	bl	8006230 <_malloc_r>
 8006e4e:	6028      	str	r0, [r5, #0]
 8006e50:	6128      	str	r0, [r5, #16]
 8006e52:	b920      	cbnz	r0, 8006e5e <_svfiprintf_r+0x2e>
 8006e54:	230c      	movs	r3, #12
 8006e56:	603b      	str	r3, [r7, #0]
 8006e58:	f04f 30ff 	mov.w	r0, #4294967295
 8006e5c:	e0d1      	b.n	8007002 <_svfiprintf_r+0x1d2>
 8006e5e:	2340      	movs	r3, #64	; 0x40
 8006e60:	616b      	str	r3, [r5, #20]
 8006e62:	2300      	movs	r3, #0
 8006e64:	9309      	str	r3, [sp, #36]	; 0x24
 8006e66:	2320      	movs	r3, #32
 8006e68:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e6c:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e70:	2330      	movs	r3, #48	; 0x30
 8006e72:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800701c <_svfiprintf_r+0x1ec>
 8006e76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006e7a:	f04f 0901 	mov.w	r9, #1
 8006e7e:	4623      	mov	r3, r4
 8006e80:	469a      	mov	sl, r3
 8006e82:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006e86:	b10a      	cbz	r2, 8006e8c <_svfiprintf_r+0x5c>
 8006e88:	2a25      	cmp	r2, #37	; 0x25
 8006e8a:	d1f9      	bne.n	8006e80 <_svfiprintf_r+0x50>
 8006e8c:	ebba 0b04 	subs.w	fp, sl, r4
 8006e90:	d00b      	beq.n	8006eaa <_svfiprintf_r+0x7a>
 8006e92:	465b      	mov	r3, fp
 8006e94:	4622      	mov	r2, r4
 8006e96:	4629      	mov	r1, r5
 8006e98:	4638      	mov	r0, r7
 8006e9a:	f7ff ff6d 	bl	8006d78 <__ssputs_r>
 8006e9e:	3001      	adds	r0, #1
 8006ea0:	f000 80aa 	beq.w	8006ff8 <_svfiprintf_r+0x1c8>
 8006ea4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ea6:	445a      	add	r2, fp
 8006ea8:	9209      	str	r2, [sp, #36]	; 0x24
 8006eaa:	f89a 3000 	ldrb.w	r3, [sl]
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	f000 80a2 	beq.w	8006ff8 <_svfiprintf_r+0x1c8>
 8006eb4:	2300      	movs	r3, #0
 8006eb6:	f04f 32ff 	mov.w	r2, #4294967295
 8006eba:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006ebe:	f10a 0a01 	add.w	sl, sl, #1
 8006ec2:	9304      	str	r3, [sp, #16]
 8006ec4:	9307      	str	r3, [sp, #28]
 8006ec6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006eca:	931a      	str	r3, [sp, #104]	; 0x68
 8006ecc:	4654      	mov	r4, sl
 8006ece:	2205      	movs	r2, #5
 8006ed0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ed4:	4851      	ldr	r0, [pc, #324]	; (800701c <_svfiprintf_r+0x1ec>)
 8006ed6:	f7f9 f993 	bl	8000200 <memchr>
 8006eda:	9a04      	ldr	r2, [sp, #16]
 8006edc:	b9d8      	cbnz	r0, 8006f16 <_svfiprintf_r+0xe6>
 8006ede:	06d0      	lsls	r0, r2, #27
 8006ee0:	bf44      	itt	mi
 8006ee2:	2320      	movmi	r3, #32
 8006ee4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ee8:	0711      	lsls	r1, r2, #28
 8006eea:	bf44      	itt	mi
 8006eec:	232b      	movmi	r3, #43	; 0x2b
 8006eee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006ef2:	f89a 3000 	ldrb.w	r3, [sl]
 8006ef6:	2b2a      	cmp	r3, #42	; 0x2a
 8006ef8:	d015      	beq.n	8006f26 <_svfiprintf_r+0xf6>
 8006efa:	9a07      	ldr	r2, [sp, #28]
 8006efc:	4654      	mov	r4, sl
 8006efe:	2000      	movs	r0, #0
 8006f00:	f04f 0c0a 	mov.w	ip, #10
 8006f04:	4621      	mov	r1, r4
 8006f06:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f0a:	3b30      	subs	r3, #48	; 0x30
 8006f0c:	2b09      	cmp	r3, #9
 8006f0e:	d94e      	bls.n	8006fae <_svfiprintf_r+0x17e>
 8006f10:	b1b0      	cbz	r0, 8006f40 <_svfiprintf_r+0x110>
 8006f12:	9207      	str	r2, [sp, #28]
 8006f14:	e014      	b.n	8006f40 <_svfiprintf_r+0x110>
 8006f16:	eba0 0308 	sub.w	r3, r0, r8
 8006f1a:	fa09 f303 	lsl.w	r3, r9, r3
 8006f1e:	4313      	orrs	r3, r2
 8006f20:	9304      	str	r3, [sp, #16]
 8006f22:	46a2      	mov	sl, r4
 8006f24:	e7d2      	b.n	8006ecc <_svfiprintf_r+0x9c>
 8006f26:	9b03      	ldr	r3, [sp, #12]
 8006f28:	1d19      	adds	r1, r3, #4
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	9103      	str	r1, [sp, #12]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	bfbb      	ittet	lt
 8006f32:	425b      	neglt	r3, r3
 8006f34:	f042 0202 	orrlt.w	r2, r2, #2
 8006f38:	9307      	strge	r3, [sp, #28]
 8006f3a:	9307      	strlt	r3, [sp, #28]
 8006f3c:	bfb8      	it	lt
 8006f3e:	9204      	strlt	r2, [sp, #16]
 8006f40:	7823      	ldrb	r3, [r4, #0]
 8006f42:	2b2e      	cmp	r3, #46	; 0x2e
 8006f44:	d10c      	bne.n	8006f60 <_svfiprintf_r+0x130>
 8006f46:	7863      	ldrb	r3, [r4, #1]
 8006f48:	2b2a      	cmp	r3, #42	; 0x2a
 8006f4a:	d135      	bne.n	8006fb8 <_svfiprintf_r+0x188>
 8006f4c:	9b03      	ldr	r3, [sp, #12]
 8006f4e:	1d1a      	adds	r2, r3, #4
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	9203      	str	r2, [sp, #12]
 8006f54:	2b00      	cmp	r3, #0
 8006f56:	bfb8      	it	lt
 8006f58:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f5c:	3402      	adds	r4, #2
 8006f5e:	9305      	str	r3, [sp, #20]
 8006f60:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800702c <_svfiprintf_r+0x1fc>
 8006f64:	7821      	ldrb	r1, [r4, #0]
 8006f66:	2203      	movs	r2, #3
 8006f68:	4650      	mov	r0, sl
 8006f6a:	f7f9 f949 	bl	8000200 <memchr>
 8006f6e:	b140      	cbz	r0, 8006f82 <_svfiprintf_r+0x152>
 8006f70:	2340      	movs	r3, #64	; 0x40
 8006f72:	eba0 000a 	sub.w	r0, r0, sl
 8006f76:	fa03 f000 	lsl.w	r0, r3, r0
 8006f7a:	9b04      	ldr	r3, [sp, #16]
 8006f7c:	4303      	orrs	r3, r0
 8006f7e:	3401      	adds	r4, #1
 8006f80:	9304      	str	r3, [sp, #16]
 8006f82:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f86:	4826      	ldr	r0, [pc, #152]	; (8007020 <_svfiprintf_r+0x1f0>)
 8006f88:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006f8c:	2206      	movs	r2, #6
 8006f8e:	f7f9 f937 	bl	8000200 <memchr>
 8006f92:	2800      	cmp	r0, #0
 8006f94:	d038      	beq.n	8007008 <_svfiprintf_r+0x1d8>
 8006f96:	4b23      	ldr	r3, [pc, #140]	; (8007024 <_svfiprintf_r+0x1f4>)
 8006f98:	bb1b      	cbnz	r3, 8006fe2 <_svfiprintf_r+0x1b2>
 8006f9a:	9b03      	ldr	r3, [sp, #12]
 8006f9c:	3307      	adds	r3, #7
 8006f9e:	f023 0307 	bic.w	r3, r3, #7
 8006fa2:	3308      	adds	r3, #8
 8006fa4:	9303      	str	r3, [sp, #12]
 8006fa6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fa8:	4433      	add	r3, r6
 8006faa:	9309      	str	r3, [sp, #36]	; 0x24
 8006fac:	e767      	b.n	8006e7e <_svfiprintf_r+0x4e>
 8006fae:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fb2:	460c      	mov	r4, r1
 8006fb4:	2001      	movs	r0, #1
 8006fb6:	e7a5      	b.n	8006f04 <_svfiprintf_r+0xd4>
 8006fb8:	2300      	movs	r3, #0
 8006fba:	3401      	adds	r4, #1
 8006fbc:	9305      	str	r3, [sp, #20]
 8006fbe:	4619      	mov	r1, r3
 8006fc0:	f04f 0c0a 	mov.w	ip, #10
 8006fc4:	4620      	mov	r0, r4
 8006fc6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006fca:	3a30      	subs	r2, #48	; 0x30
 8006fcc:	2a09      	cmp	r2, #9
 8006fce:	d903      	bls.n	8006fd8 <_svfiprintf_r+0x1a8>
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d0c5      	beq.n	8006f60 <_svfiprintf_r+0x130>
 8006fd4:	9105      	str	r1, [sp, #20]
 8006fd6:	e7c3      	b.n	8006f60 <_svfiprintf_r+0x130>
 8006fd8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006fdc:	4604      	mov	r4, r0
 8006fde:	2301      	movs	r3, #1
 8006fe0:	e7f0      	b.n	8006fc4 <_svfiprintf_r+0x194>
 8006fe2:	ab03      	add	r3, sp, #12
 8006fe4:	9300      	str	r3, [sp, #0]
 8006fe6:	462a      	mov	r2, r5
 8006fe8:	4b0f      	ldr	r3, [pc, #60]	; (8007028 <_svfiprintf_r+0x1f8>)
 8006fea:	a904      	add	r1, sp, #16
 8006fec:	4638      	mov	r0, r7
 8006fee:	f3af 8000 	nop.w
 8006ff2:	1c42      	adds	r2, r0, #1
 8006ff4:	4606      	mov	r6, r0
 8006ff6:	d1d6      	bne.n	8006fa6 <_svfiprintf_r+0x176>
 8006ff8:	89ab      	ldrh	r3, [r5, #12]
 8006ffa:	065b      	lsls	r3, r3, #25
 8006ffc:	f53f af2c 	bmi.w	8006e58 <_svfiprintf_r+0x28>
 8007000:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007002:	b01d      	add	sp, #116	; 0x74
 8007004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007008:	ab03      	add	r3, sp, #12
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	462a      	mov	r2, r5
 800700e:	4b06      	ldr	r3, [pc, #24]	; (8007028 <_svfiprintf_r+0x1f8>)
 8007010:	a904      	add	r1, sp, #16
 8007012:	4638      	mov	r0, r7
 8007014:	f000 f9d4 	bl	80073c0 <_printf_i>
 8007018:	e7eb      	b.n	8006ff2 <_svfiprintf_r+0x1c2>
 800701a:	bf00      	nop
 800701c:	08008204 	.word	0x08008204
 8007020:	0800820e 	.word	0x0800820e
 8007024:	00000000 	.word	0x00000000
 8007028:	08006d79 	.word	0x08006d79
 800702c:	0800820a 	.word	0x0800820a

08007030 <__sfputc_r>:
 8007030:	6893      	ldr	r3, [r2, #8]
 8007032:	3b01      	subs	r3, #1
 8007034:	2b00      	cmp	r3, #0
 8007036:	b410      	push	{r4}
 8007038:	6093      	str	r3, [r2, #8]
 800703a:	da08      	bge.n	800704e <__sfputc_r+0x1e>
 800703c:	6994      	ldr	r4, [r2, #24]
 800703e:	42a3      	cmp	r3, r4
 8007040:	db01      	blt.n	8007046 <__sfputc_r+0x16>
 8007042:	290a      	cmp	r1, #10
 8007044:	d103      	bne.n	800704e <__sfputc_r+0x1e>
 8007046:	f85d 4b04 	ldr.w	r4, [sp], #4
 800704a:	f7ff bba9 	b.w	80067a0 <__swbuf_r>
 800704e:	6813      	ldr	r3, [r2, #0]
 8007050:	1c58      	adds	r0, r3, #1
 8007052:	6010      	str	r0, [r2, #0]
 8007054:	7019      	strb	r1, [r3, #0]
 8007056:	4608      	mov	r0, r1
 8007058:	f85d 4b04 	ldr.w	r4, [sp], #4
 800705c:	4770      	bx	lr

0800705e <__sfputs_r>:
 800705e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007060:	4606      	mov	r6, r0
 8007062:	460f      	mov	r7, r1
 8007064:	4614      	mov	r4, r2
 8007066:	18d5      	adds	r5, r2, r3
 8007068:	42ac      	cmp	r4, r5
 800706a:	d101      	bne.n	8007070 <__sfputs_r+0x12>
 800706c:	2000      	movs	r0, #0
 800706e:	e007      	b.n	8007080 <__sfputs_r+0x22>
 8007070:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007074:	463a      	mov	r2, r7
 8007076:	4630      	mov	r0, r6
 8007078:	f7ff ffda 	bl	8007030 <__sfputc_r>
 800707c:	1c43      	adds	r3, r0, #1
 800707e:	d1f3      	bne.n	8007068 <__sfputs_r+0xa>
 8007080:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007084 <_vfiprintf_r>:
 8007084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007088:	460d      	mov	r5, r1
 800708a:	b09d      	sub	sp, #116	; 0x74
 800708c:	4614      	mov	r4, r2
 800708e:	4698      	mov	r8, r3
 8007090:	4606      	mov	r6, r0
 8007092:	b118      	cbz	r0, 800709c <_vfiprintf_r+0x18>
 8007094:	6983      	ldr	r3, [r0, #24]
 8007096:	b90b      	cbnz	r3, 800709c <_vfiprintf_r+0x18>
 8007098:	f7ff fd5c 	bl	8006b54 <__sinit>
 800709c:	4b89      	ldr	r3, [pc, #548]	; (80072c4 <_vfiprintf_r+0x240>)
 800709e:	429d      	cmp	r5, r3
 80070a0:	d11b      	bne.n	80070da <_vfiprintf_r+0x56>
 80070a2:	6875      	ldr	r5, [r6, #4]
 80070a4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070a6:	07d9      	lsls	r1, r3, #31
 80070a8:	d405      	bmi.n	80070b6 <_vfiprintf_r+0x32>
 80070aa:	89ab      	ldrh	r3, [r5, #12]
 80070ac:	059a      	lsls	r2, r3, #22
 80070ae:	d402      	bmi.n	80070b6 <_vfiprintf_r+0x32>
 80070b0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070b2:	f7ff fded 	bl	8006c90 <__retarget_lock_acquire_recursive>
 80070b6:	89ab      	ldrh	r3, [r5, #12]
 80070b8:	071b      	lsls	r3, r3, #28
 80070ba:	d501      	bpl.n	80070c0 <_vfiprintf_r+0x3c>
 80070bc:	692b      	ldr	r3, [r5, #16]
 80070be:	b9eb      	cbnz	r3, 80070fc <_vfiprintf_r+0x78>
 80070c0:	4629      	mov	r1, r5
 80070c2:	4630      	mov	r0, r6
 80070c4:	f7ff fbbe 	bl	8006844 <__swsetup_r>
 80070c8:	b1c0      	cbz	r0, 80070fc <_vfiprintf_r+0x78>
 80070ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070cc:	07dc      	lsls	r4, r3, #31
 80070ce:	d50e      	bpl.n	80070ee <_vfiprintf_r+0x6a>
 80070d0:	f04f 30ff 	mov.w	r0, #4294967295
 80070d4:	b01d      	add	sp, #116	; 0x74
 80070d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070da:	4b7b      	ldr	r3, [pc, #492]	; (80072c8 <_vfiprintf_r+0x244>)
 80070dc:	429d      	cmp	r5, r3
 80070de:	d101      	bne.n	80070e4 <_vfiprintf_r+0x60>
 80070e0:	68b5      	ldr	r5, [r6, #8]
 80070e2:	e7df      	b.n	80070a4 <_vfiprintf_r+0x20>
 80070e4:	4b79      	ldr	r3, [pc, #484]	; (80072cc <_vfiprintf_r+0x248>)
 80070e6:	429d      	cmp	r5, r3
 80070e8:	bf08      	it	eq
 80070ea:	68f5      	ldreq	r5, [r6, #12]
 80070ec:	e7da      	b.n	80070a4 <_vfiprintf_r+0x20>
 80070ee:	89ab      	ldrh	r3, [r5, #12]
 80070f0:	0598      	lsls	r0, r3, #22
 80070f2:	d4ed      	bmi.n	80070d0 <_vfiprintf_r+0x4c>
 80070f4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070f6:	f7ff fdcc 	bl	8006c92 <__retarget_lock_release_recursive>
 80070fa:	e7e9      	b.n	80070d0 <_vfiprintf_r+0x4c>
 80070fc:	2300      	movs	r3, #0
 80070fe:	9309      	str	r3, [sp, #36]	; 0x24
 8007100:	2320      	movs	r3, #32
 8007102:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007106:	f8cd 800c 	str.w	r8, [sp, #12]
 800710a:	2330      	movs	r3, #48	; 0x30
 800710c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80072d0 <_vfiprintf_r+0x24c>
 8007110:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007114:	f04f 0901 	mov.w	r9, #1
 8007118:	4623      	mov	r3, r4
 800711a:	469a      	mov	sl, r3
 800711c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007120:	b10a      	cbz	r2, 8007126 <_vfiprintf_r+0xa2>
 8007122:	2a25      	cmp	r2, #37	; 0x25
 8007124:	d1f9      	bne.n	800711a <_vfiprintf_r+0x96>
 8007126:	ebba 0b04 	subs.w	fp, sl, r4
 800712a:	d00b      	beq.n	8007144 <_vfiprintf_r+0xc0>
 800712c:	465b      	mov	r3, fp
 800712e:	4622      	mov	r2, r4
 8007130:	4629      	mov	r1, r5
 8007132:	4630      	mov	r0, r6
 8007134:	f7ff ff93 	bl	800705e <__sfputs_r>
 8007138:	3001      	adds	r0, #1
 800713a:	f000 80aa 	beq.w	8007292 <_vfiprintf_r+0x20e>
 800713e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007140:	445a      	add	r2, fp
 8007142:	9209      	str	r2, [sp, #36]	; 0x24
 8007144:	f89a 3000 	ldrb.w	r3, [sl]
 8007148:	2b00      	cmp	r3, #0
 800714a:	f000 80a2 	beq.w	8007292 <_vfiprintf_r+0x20e>
 800714e:	2300      	movs	r3, #0
 8007150:	f04f 32ff 	mov.w	r2, #4294967295
 8007154:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007158:	f10a 0a01 	add.w	sl, sl, #1
 800715c:	9304      	str	r3, [sp, #16]
 800715e:	9307      	str	r3, [sp, #28]
 8007160:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007164:	931a      	str	r3, [sp, #104]	; 0x68
 8007166:	4654      	mov	r4, sl
 8007168:	2205      	movs	r2, #5
 800716a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800716e:	4858      	ldr	r0, [pc, #352]	; (80072d0 <_vfiprintf_r+0x24c>)
 8007170:	f7f9 f846 	bl	8000200 <memchr>
 8007174:	9a04      	ldr	r2, [sp, #16]
 8007176:	b9d8      	cbnz	r0, 80071b0 <_vfiprintf_r+0x12c>
 8007178:	06d1      	lsls	r1, r2, #27
 800717a:	bf44      	itt	mi
 800717c:	2320      	movmi	r3, #32
 800717e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007182:	0713      	lsls	r3, r2, #28
 8007184:	bf44      	itt	mi
 8007186:	232b      	movmi	r3, #43	; 0x2b
 8007188:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800718c:	f89a 3000 	ldrb.w	r3, [sl]
 8007190:	2b2a      	cmp	r3, #42	; 0x2a
 8007192:	d015      	beq.n	80071c0 <_vfiprintf_r+0x13c>
 8007194:	9a07      	ldr	r2, [sp, #28]
 8007196:	4654      	mov	r4, sl
 8007198:	2000      	movs	r0, #0
 800719a:	f04f 0c0a 	mov.w	ip, #10
 800719e:	4621      	mov	r1, r4
 80071a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071a4:	3b30      	subs	r3, #48	; 0x30
 80071a6:	2b09      	cmp	r3, #9
 80071a8:	d94e      	bls.n	8007248 <_vfiprintf_r+0x1c4>
 80071aa:	b1b0      	cbz	r0, 80071da <_vfiprintf_r+0x156>
 80071ac:	9207      	str	r2, [sp, #28]
 80071ae:	e014      	b.n	80071da <_vfiprintf_r+0x156>
 80071b0:	eba0 0308 	sub.w	r3, r0, r8
 80071b4:	fa09 f303 	lsl.w	r3, r9, r3
 80071b8:	4313      	orrs	r3, r2
 80071ba:	9304      	str	r3, [sp, #16]
 80071bc:	46a2      	mov	sl, r4
 80071be:	e7d2      	b.n	8007166 <_vfiprintf_r+0xe2>
 80071c0:	9b03      	ldr	r3, [sp, #12]
 80071c2:	1d19      	adds	r1, r3, #4
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	9103      	str	r1, [sp, #12]
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	bfbb      	ittet	lt
 80071cc:	425b      	neglt	r3, r3
 80071ce:	f042 0202 	orrlt.w	r2, r2, #2
 80071d2:	9307      	strge	r3, [sp, #28]
 80071d4:	9307      	strlt	r3, [sp, #28]
 80071d6:	bfb8      	it	lt
 80071d8:	9204      	strlt	r2, [sp, #16]
 80071da:	7823      	ldrb	r3, [r4, #0]
 80071dc:	2b2e      	cmp	r3, #46	; 0x2e
 80071de:	d10c      	bne.n	80071fa <_vfiprintf_r+0x176>
 80071e0:	7863      	ldrb	r3, [r4, #1]
 80071e2:	2b2a      	cmp	r3, #42	; 0x2a
 80071e4:	d135      	bne.n	8007252 <_vfiprintf_r+0x1ce>
 80071e6:	9b03      	ldr	r3, [sp, #12]
 80071e8:	1d1a      	adds	r2, r3, #4
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	9203      	str	r2, [sp, #12]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	bfb8      	it	lt
 80071f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80071f6:	3402      	adds	r4, #2
 80071f8:	9305      	str	r3, [sp, #20]
 80071fa:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80072e0 <_vfiprintf_r+0x25c>
 80071fe:	7821      	ldrb	r1, [r4, #0]
 8007200:	2203      	movs	r2, #3
 8007202:	4650      	mov	r0, sl
 8007204:	f7f8 fffc 	bl	8000200 <memchr>
 8007208:	b140      	cbz	r0, 800721c <_vfiprintf_r+0x198>
 800720a:	2340      	movs	r3, #64	; 0x40
 800720c:	eba0 000a 	sub.w	r0, r0, sl
 8007210:	fa03 f000 	lsl.w	r0, r3, r0
 8007214:	9b04      	ldr	r3, [sp, #16]
 8007216:	4303      	orrs	r3, r0
 8007218:	3401      	adds	r4, #1
 800721a:	9304      	str	r3, [sp, #16]
 800721c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007220:	482c      	ldr	r0, [pc, #176]	; (80072d4 <_vfiprintf_r+0x250>)
 8007222:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007226:	2206      	movs	r2, #6
 8007228:	f7f8 ffea 	bl	8000200 <memchr>
 800722c:	2800      	cmp	r0, #0
 800722e:	d03f      	beq.n	80072b0 <_vfiprintf_r+0x22c>
 8007230:	4b29      	ldr	r3, [pc, #164]	; (80072d8 <_vfiprintf_r+0x254>)
 8007232:	bb1b      	cbnz	r3, 800727c <_vfiprintf_r+0x1f8>
 8007234:	9b03      	ldr	r3, [sp, #12]
 8007236:	3307      	adds	r3, #7
 8007238:	f023 0307 	bic.w	r3, r3, #7
 800723c:	3308      	adds	r3, #8
 800723e:	9303      	str	r3, [sp, #12]
 8007240:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007242:	443b      	add	r3, r7
 8007244:	9309      	str	r3, [sp, #36]	; 0x24
 8007246:	e767      	b.n	8007118 <_vfiprintf_r+0x94>
 8007248:	fb0c 3202 	mla	r2, ip, r2, r3
 800724c:	460c      	mov	r4, r1
 800724e:	2001      	movs	r0, #1
 8007250:	e7a5      	b.n	800719e <_vfiprintf_r+0x11a>
 8007252:	2300      	movs	r3, #0
 8007254:	3401      	adds	r4, #1
 8007256:	9305      	str	r3, [sp, #20]
 8007258:	4619      	mov	r1, r3
 800725a:	f04f 0c0a 	mov.w	ip, #10
 800725e:	4620      	mov	r0, r4
 8007260:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007264:	3a30      	subs	r2, #48	; 0x30
 8007266:	2a09      	cmp	r2, #9
 8007268:	d903      	bls.n	8007272 <_vfiprintf_r+0x1ee>
 800726a:	2b00      	cmp	r3, #0
 800726c:	d0c5      	beq.n	80071fa <_vfiprintf_r+0x176>
 800726e:	9105      	str	r1, [sp, #20]
 8007270:	e7c3      	b.n	80071fa <_vfiprintf_r+0x176>
 8007272:	fb0c 2101 	mla	r1, ip, r1, r2
 8007276:	4604      	mov	r4, r0
 8007278:	2301      	movs	r3, #1
 800727a:	e7f0      	b.n	800725e <_vfiprintf_r+0x1da>
 800727c:	ab03      	add	r3, sp, #12
 800727e:	9300      	str	r3, [sp, #0]
 8007280:	462a      	mov	r2, r5
 8007282:	4b16      	ldr	r3, [pc, #88]	; (80072dc <_vfiprintf_r+0x258>)
 8007284:	a904      	add	r1, sp, #16
 8007286:	4630      	mov	r0, r6
 8007288:	f3af 8000 	nop.w
 800728c:	4607      	mov	r7, r0
 800728e:	1c78      	adds	r0, r7, #1
 8007290:	d1d6      	bne.n	8007240 <_vfiprintf_r+0x1bc>
 8007292:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007294:	07d9      	lsls	r1, r3, #31
 8007296:	d405      	bmi.n	80072a4 <_vfiprintf_r+0x220>
 8007298:	89ab      	ldrh	r3, [r5, #12]
 800729a:	059a      	lsls	r2, r3, #22
 800729c:	d402      	bmi.n	80072a4 <_vfiprintf_r+0x220>
 800729e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072a0:	f7ff fcf7 	bl	8006c92 <__retarget_lock_release_recursive>
 80072a4:	89ab      	ldrh	r3, [r5, #12]
 80072a6:	065b      	lsls	r3, r3, #25
 80072a8:	f53f af12 	bmi.w	80070d0 <_vfiprintf_r+0x4c>
 80072ac:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072ae:	e711      	b.n	80070d4 <_vfiprintf_r+0x50>
 80072b0:	ab03      	add	r3, sp, #12
 80072b2:	9300      	str	r3, [sp, #0]
 80072b4:	462a      	mov	r2, r5
 80072b6:	4b09      	ldr	r3, [pc, #36]	; (80072dc <_vfiprintf_r+0x258>)
 80072b8:	a904      	add	r1, sp, #16
 80072ba:	4630      	mov	r0, r6
 80072bc:	f000 f880 	bl	80073c0 <_printf_i>
 80072c0:	e7e4      	b.n	800728c <_vfiprintf_r+0x208>
 80072c2:	bf00      	nop
 80072c4:	080081c4 	.word	0x080081c4
 80072c8:	080081e4 	.word	0x080081e4
 80072cc:	080081a4 	.word	0x080081a4
 80072d0:	08008204 	.word	0x08008204
 80072d4:	0800820e 	.word	0x0800820e
 80072d8:	00000000 	.word	0x00000000
 80072dc:	0800705f 	.word	0x0800705f
 80072e0:	0800820a 	.word	0x0800820a

080072e4 <_printf_common>:
 80072e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072e8:	4616      	mov	r6, r2
 80072ea:	4699      	mov	r9, r3
 80072ec:	688a      	ldr	r2, [r1, #8]
 80072ee:	690b      	ldr	r3, [r1, #16]
 80072f0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80072f4:	4293      	cmp	r3, r2
 80072f6:	bfb8      	it	lt
 80072f8:	4613      	movlt	r3, r2
 80072fa:	6033      	str	r3, [r6, #0]
 80072fc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007300:	4607      	mov	r7, r0
 8007302:	460c      	mov	r4, r1
 8007304:	b10a      	cbz	r2, 800730a <_printf_common+0x26>
 8007306:	3301      	adds	r3, #1
 8007308:	6033      	str	r3, [r6, #0]
 800730a:	6823      	ldr	r3, [r4, #0]
 800730c:	0699      	lsls	r1, r3, #26
 800730e:	bf42      	ittt	mi
 8007310:	6833      	ldrmi	r3, [r6, #0]
 8007312:	3302      	addmi	r3, #2
 8007314:	6033      	strmi	r3, [r6, #0]
 8007316:	6825      	ldr	r5, [r4, #0]
 8007318:	f015 0506 	ands.w	r5, r5, #6
 800731c:	d106      	bne.n	800732c <_printf_common+0x48>
 800731e:	f104 0a19 	add.w	sl, r4, #25
 8007322:	68e3      	ldr	r3, [r4, #12]
 8007324:	6832      	ldr	r2, [r6, #0]
 8007326:	1a9b      	subs	r3, r3, r2
 8007328:	42ab      	cmp	r3, r5
 800732a:	dc26      	bgt.n	800737a <_printf_common+0x96>
 800732c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007330:	1e13      	subs	r3, r2, #0
 8007332:	6822      	ldr	r2, [r4, #0]
 8007334:	bf18      	it	ne
 8007336:	2301      	movne	r3, #1
 8007338:	0692      	lsls	r2, r2, #26
 800733a:	d42b      	bmi.n	8007394 <_printf_common+0xb0>
 800733c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007340:	4649      	mov	r1, r9
 8007342:	4638      	mov	r0, r7
 8007344:	47c0      	blx	r8
 8007346:	3001      	adds	r0, #1
 8007348:	d01e      	beq.n	8007388 <_printf_common+0xa4>
 800734a:	6823      	ldr	r3, [r4, #0]
 800734c:	68e5      	ldr	r5, [r4, #12]
 800734e:	6832      	ldr	r2, [r6, #0]
 8007350:	f003 0306 	and.w	r3, r3, #6
 8007354:	2b04      	cmp	r3, #4
 8007356:	bf08      	it	eq
 8007358:	1aad      	subeq	r5, r5, r2
 800735a:	68a3      	ldr	r3, [r4, #8]
 800735c:	6922      	ldr	r2, [r4, #16]
 800735e:	bf0c      	ite	eq
 8007360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007364:	2500      	movne	r5, #0
 8007366:	4293      	cmp	r3, r2
 8007368:	bfc4      	itt	gt
 800736a:	1a9b      	subgt	r3, r3, r2
 800736c:	18ed      	addgt	r5, r5, r3
 800736e:	2600      	movs	r6, #0
 8007370:	341a      	adds	r4, #26
 8007372:	42b5      	cmp	r5, r6
 8007374:	d11a      	bne.n	80073ac <_printf_common+0xc8>
 8007376:	2000      	movs	r0, #0
 8007378:	e008      	b.n	800738c <_printf_common+0xa8>
 800737a:	2301      	movs	r3, #1
 800737c:	4652      	mov	r2, sl
 800737e:	4649      	mov	r1, r9
 8007380:	4638      	mov	r0, r7
 8007382:	47c0      	blx	r8
 8007384:	3001      	adds	r0, #1
 8007386:	d103      	bne.n	8007390 <_printf_common+0xac>
 8007388:	f04f 30ff 	mov.w	r0, #4294967295
 800738c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007390:	3501      	adds	r5, #1
 8007392:	e7c6      	b.n	8007322 <_printf_common+0x3e>
 8007394:	18e1      	adds	r1, r4, r3
 8007396:	1c5a      	adds	r2, r3, #1
 8007398:	2030      	movs	r0, #48	; 0x30
 800739a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800739e:	4422      	add	r2, r4
 80073a0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073a4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073a8:	3302      	adds	r3, #2
 80073aa:	e7c7      	b.n	800733c <_printf_common+0x58>
 80073ac:	2301      	movs	r3, #1
 80073ae:	4622      	mov	r2, r4
 80073b0:	4649      	mov	r1, r9
 80073b2:	4638      	mov	r0, r7
 80073b4:	47c0      	blx	r8
 80073b6:	3001      	adds	r0, #1
 80073b8:	d0e6      	beq.n	8007388 <_printf_common+0xa4>
 80073ba:	3601      	adds	r6, #1
 80073bc:	e7d9      	b.n	8007372 <_printf_common+0x8e>
	...

080073c0 <_printf_i>:
 80073c0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073c4:	7e0f      	ldrb	r7, [r1, #24]
 80073c6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073c8:	2f78      	cmp	r7, #120	; 0x78
 80073ca:	4691      	mov	r9, r2
 80073cc:	4680      	mov	r8, r0
 80073ce:	460c      	mov	r4, r1
 80073d0:	469a      	mov	sl, r3
 80073d2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80073d6:	d807      	bhi.n	80073e8 <_printf_i+0x28>
 80073d8:	2f62      	cmp	r7, #98	; 0x62
 80073da:	d80a      	bhi.n	80073f2 <_printf_i+0x32>
 80073dc:	2f00      	cmp	r7, #0
 80073de:	f000 80d8 	beq.w	8007592 <_printf_i+0x1d2>
 80073e2:	2f58      	cmp	r7, #88	; 0x58
 80073e4:	f000 80a3 	beq.w	800752e <_printf_i+0x16e>
 80073e8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80073ec:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80073f0:	e03a      	b.n	8007468 <_printf_i+0xa8>
 80073f2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80073f6:	2b15      	cmp	r3, #21
 80073f8:	d8f6      	bhi.n	80073e8 <_printf_i+0x28>
 80073fa:	a101      	add	r1, pc, #4	; (adr r1, 8007400 <_printf_i+0x40>)
 80073fc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007400:	08007459 	.word	0x08007459
 8007404:	0800746d 	.word	0x0800746d
 8007408:	080073e9 	.word	0x080073e9
 800740c:	080073e9 	.word	0x080073e9
 8007410:	080073e9 	.word	0x080073e9
 8007414:	080073e9 	.word	0x080073e9
 8007418:	0800746d 	.word	0x0800746d
 800741c:	080073e9 	.word	0x080073e9
 8007420:	080073e9 	.word	0x080073e9
 8007424:	080073e9 	.word	0x080073e9
 8007428:	080073e9 	.word	0x080073e9
 800742c:	08007579 	.word	0x08007579
 8007430:	0800749d 	.word	0x0800749d
 8007434:	0800755b 	.word	0x0800755b
 8007438:	080073e9 	.word	0x080073e9
 800743c:	080073e9 	.word	0x080073e9
 8007440:	0800759b 	.word	0x0800759b
 8007444:	080073e9 	.word	0x080073e9
 8007448:	0800749d 	.word	0x0800749d
 800744c:	080073e9 	.word	0x080073e9
 8007450:	080073e9 	.word	0x080073e9
 8007454:	08007563 	.word	0x08007563
 8007458:	682b      	ldr	r3, [r5, #0]
 800745a:	1d1a      	adds	r2, r3, #4
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	602a      	str	r2, [r5, #0]
 8007460:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007464:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007468:	2301      	movs	r3, #1
 800746a:	e0a3      	b.n	80075b4 <_printf_i+0x1f4>
 800746c:	6820      	ldr	r0, [r4, #0]
 800746e:	6829      	ldr	r1, [r5, #0]
 8007470:	0606      	lsls	r6, r0, #24
 8007472:	f101 0304 	add.w	r3, r1, #4
 8007476:	d50a      	bpl.n	800748e <_printf_i+0xce>
 8007478:	680e      	ldr	r6, [r1, #0]
 800747a:	602b      	str	r3, [r5, #0]
 800747c:	2e00      	cmp	r6, #0
 800747e:	da03      	bge.n	8007488 <_printf_i+0xc8>
 8007480:	232d      	movs	r3, #45	; 0x2d
 8007482:	4276      	negs	r6, r6
 8007484:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007488:	485e      	ldr	r0, [pc, #376]	; (8007604 <_printf_i+0x244>)
 800748a:	230a      	movs	r3, #10
 800748c:	e019      	b.n	80074c2 <_printf_i+0x102>
 800748e:	680e      	ldr	r6, [r1, #0]
 8007490:	602b      	str	r3, [r5, #0]
 8007492:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007496:	bf18      	it	ne
 8007498:	b236      	sxthne	r6, r6
 800749a:	e7ef      	b.n	800747c <_printf_i+0xbc>
 800749c:	682b      	ldr	r3, [r5, #0]
 800749e:	6820      	ldr	r0, [r4, #0]
 80074a0:	1d19      	adds	r1, r3, #4
 80074a2:	6029      	str	r1, [r5, #0]
 80074a4:	0601      	lsls	r1, r0, #24
 80074a6:	d501      	bpl.n	80074ac <_printf_i+0xec>
 80074a8:	681e      	ldr	r6, [r3, #0]
 80074aa:	e002      	b.n	80074b2 <_printf_i+0xf2>
 80074ac:	0646      	lsls	r6, r0, #25
 80074ae:	d5fb      	bpl.n	80074a8 <_printf_i+0xe8>
 80074b0:	881e      	ldrh	r6, [r3, #0]
 80074b2:	4854      	ldr	r0, [pc, #336]	; (8007604 <_printf_i+0x244>)
 80074b4:	2f6f      	cmp	r7, #111	; 0x6f
 80074b6:	bf0c      	ite	eq
 80074b8:	2308      	moveq	r3, #8
 80074ba:	230a      	movne	r3, #10
 80074bc:	2100      	movs	r1, #0
 80074be:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074c2:	6865      	ldr	r5, [r4, #4]
 80074c4:	60a5      	str	r5, [r4, #8]
 80074c6:	2d00      	cmp	r5, #0
 80074c8:	bfa2      	ittt	ge
 80074ca:	6821      	ldrge	r1, [r4, #0]
 80074cc:	f021 0104 	bicge.w	r1, r1, #4
 80074d0:	6021      	strge	r1, [r4, #0]
 80074d2:	b90e      	cbnz	r6, 80074d8 <_printf_i+0x118>
 80074d4:	2d00      	cmp	r5, #0
 80074d6:	d04d      	beq.n	8007574 <_printf_i+0x1b4>
 80074d8:	4615      	mov	r5, r2
 80074da:	fbb6 f1f3 	udiv	r1, r6, r3
 80074de:	fb03 6711 	mls	r7, r3, r1, r6
 80074e2:	5dc7      	ldrb	r7, [r0, r7]
 80074e4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80074e8:	4637      	mov	r7, r6
 80074ea:	42bb      	cmp	r3, r7
 80074ec:	460e      	mov	r6, r1
 80074ee:	d9f4      	bls.n	80074da <_printf_i+0x11a>
 80074f0:	2b08      	cmp	r3, #8
 80074f2:	d10b      	bne.n	800750c <_printf_i+0x14c>
 80074f4:	6823      	ldr	r3, [r4, #0]
 80074f6:	07de      	lsls	r6, r3, #31
 80074f8:	d508      	bpl.n	800750c <_printf_i+0x14c>
 80074fa:	6923      	ldr	r3, [r4, #16]
 80074fc:	6861      	ldr	r1, [r4, #4]
 80074fe:	4299      	cmp	r1, r3
 8007500:	bfde      	ittt	le
 8007502:	2330      	movle	r3, #48	; 0x30
 8007504:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007508:	f105 35ff 	addle.w	r5, r5, #4294967295
 800750c:	1b52      	subs	r2, r2, r5
 800750e:	6122      	str	r2, [r4, #16]
 8007510:	f8cd a000 	str.w	sl, [sp]
 8007514:	464b      	mov	r3, r9
 8007516:	aa03      	add	r2, sp, #12
 8007518:	4621      	mov	r1, r4
 800751a:	4640      	mov	r0, r8
 800751c:	f7ff fee2 	bl	80072e4 <_printf_common>
 8007520:	3001      	adds	r0, #1
 8007522:	d14c      	bne.n	80075be <_printf_i+0x1fe>
 8007524:	f04f 30ff 	mov.w	r0, #4294967295
 8007528:	b004      	add	sp, #16
 800752a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800752e:	4835      	ldr	r0, [pc, #212]	; (8007604 <_printf_i+0x244>)
 8007530:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007534:	6829      	ldr	r1, [r5, #0]
 8007536:	6823      	ldr	r3, [r4, #0]
 8007538:	f851 6b04 	ldr.w	r6, [r1], #4
 800753c:	6029      	str	r1, [r5, #0]
 800753e:	061d      	lsls	r5, r3, #24
 8007540:	d514      	bpl.n	800756c <_printf_i+0x1ac>
 8007542:	07df      	lsls	r7, r3, #31
 8007544:	bf44      	itt	mi
 8007546:	f043 0320 	orrmi.w	r3, r3, #32
 800754a:	6023      	strmi	r3, [r4, #0]
 800754c:	b91e      	cbnz	r6, 8007556 <_printf_i+0x196>
 800754e:	6823      	ldr	r3, [r4, #0]
 8007550:	f023 0320 	bic.w	r3, r3, #32
 8007554:	6023      	str	r3, [r4, #0]
 8007556:	2310      	movs	r3, #16
 8007558:	e7b0      	b.n	80074bc <_printf_i+0xfc>
 800755a:	6823      	ldr	r3, [r4, #0]
 800755c:	f043 0320 	orr.w	r3, r3, #32
 8007560:	6023      	str	r3, [r4, #0]
 8007562:	2378      	movs	r3, #120	; 0x78
 8007564:	4828      	ldr	r0, [pc, #160]	; (8007608 <_printf_i+0x248>)
 8007566:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800756a:	e7e3      	b.n	8007534 <_printf_i+0x174>
 800756c:	0659      	lsls	r1, r3, #25
 800756e:	bf48      	it	mi
 8007570:	b2b6      	uxthmi	r6, r6
 8007572:	e7e6      	b.n	8007542 <_printf_i+0x182>
 8007574:	4615      	mov	r5, r2
 8007576:	e7bb      	b.n	80074f0 <_printf_i+0x130>
 8007578:	682b      	ldr	r3, [r5, #0]
 800757a:	6826      	ldr	r6, [r4, #0]
 800757c:	6961      	ldr	r1, [r4, #20]
 800757e:	1d18      	adds	r0, r3, #4
 8007580:	6028      	str	r0, [r5, #0]
 8007582:	0635      	lsls	r5, r6, #24
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	d501      	bpl.n	800758c <_printf_i+0x1cc>
 8007588:	6019      	str	r1, [r3, #0]
 800758a:	e002      	b.n	8007592 <_printf_i+0x1d2>
 800758c:	0670      	lsls	r0, r6, #25
 800758e:	d5fb      	bpl.n	8007588 <_printf_i+0x1c8>
 8007590:	8019      	strh	r1, [r3, #0]
 8007592:	2300      	movs	r3, #0
 8007594:	6123      	str	r3, [r4, #16]
 8007596:	4615      	mov	r5, r2
 8007598:	e7ba      	b.n	8007510 <_printf_i+0x150>
 800759a:	682b      	ldr	r3, [r5, #0]
 800759c:	1d1a      	adds	r2, r3, #4
 800759e:	602a      	str	r2, [r5, #0]
 80075a0:	681d      	ldr	r5, [r3, #0]
 80075a2:	6862      	ldr	r2, [r4, #4]
 80075a4:	2100      	movs	r1, #0
 80075a6:	4628      	mov	r0, r5
 80075a8:	f7f8 fe2a 	bl	8000200 <memchr>
 80075ac:	b108      	cbz	r0, 80075b2 <_printf_i+0x1f2>
 80075ae:	1b40      	subs	r0, r0, r5
 80075b0:	6060      	str	r0, [r4, #4]
 80075b2:	6863      	ldr	r3, [r4, #4]
 80075b4:	6123      	str	r3, [r4, #16]
 80075b6:	2300      	movs	r3, #0
 80075b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075bc:	e7a8      	b.n	8007510 <_printf_i+0x150>
 80075be:	6923      	ldr	r3, [r4, #16]
 80075c0:	462a      	mov	r2, r5
 80075c2:	4649      	mov	r1, r9
 80075c4:	4640      	mov	r0, r8
 80075c6:	47d0      	blx	sl
 80075c8:	3001      	adds	r0, #1
 80075ca:	d0ab      	beq.n	8007524 <_printf_i+0x164>
 80075cc:	6823      	ldr	r3, [r4, #0]
 80075ce:	079b      	lsls	r3, r3, #30
 80075d0:	d413      	bmi.n	80075fa <_printf_i+0x23a>
 80075d2:	68e0      	ldr	r0, [r4, #12]
 80075d4:	9b03      	ldr	r3, [sp, #12]
 80075d6:	4298      	cmp	r0, r3
 80075d8:	bfb8      	it	lt
 80075da:	4618      	movlt	r0, r3
 80075dc:	e7a4      	b.n	8007528 <_printf_i+0x168>
 80075de:	2301      	movs	r3, #1
 80075e0:	4632      	mov	r2, r6
 80075e2:	4649      	mov	r1, r9
 80075e4:	4640      	mov	r0, r8
 80075e6:	47d0      	blx	sl
 80075e8:	3001      	adds	r0, #1
 80075ea:	d09b      	beq.n	8007524 <_printf_i+0x164>
 80075ec:	3501      	adds	r5, #1
 80075ee:	68e3      	ldr	r3, [r4, #12]
 80075f0:	9903      	ldr	r1, [sp, #12]
 80075f2:	1a5b      	subs	r3, r3, r1
 80075f4:	42ab      	cmp	r3, r5
 80075f6:	dcf2      	bgt.n	80075de <_printf_i+0x21e>
 80075f8:	e7eb      	b.n	80075d2 <_printf_i+0x212>
 80075fa:	2500      	movs	r5, #0
 80075fc:	f104 0619 	add.w	r6, r4, #25
 8007600:	e7f5      	b.n	80075ee <_printf_i+0x22e>
 8007602:	bf00      	nop
 8007604:	08008215 	.word	0x08008215
 8007608:	08008226 	.word	0x08008226

0800760c <_putc_r>:
 800760c:	b570      	push	{r4, r5, r6, lr}
 800760e:	460d      	mov	r5, r1
 8007610:	4614      	mov	r4, r2
 8007612:	4606      	mov	r6, r0
 8007614:	b118      	cbz	r0, 800761e <_putc_r+0x12>
 8007616:	6983      	ldr	r3, [r0, #24]
 8007618:	b90b      	cbnz	r3, 800761e <_putc_r+0x12>
 800761a:	f7ff fa9b 	bl	8006b54 <__sinit>
 800761e:	4b1c      	ldr	r3, [pc, #112]	; (8007690 <_putc_r+0x84>)
 8007620:	429c      	cmp	r4, r3
 8007622:	d124      	bne.n	800766e <_putc_r+0x62>
 8007624:	6874      	ldr	r4, [r6, #4]
 8007626:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007628:	07d8      	lsls	r0, r3, #31
 800762a:	d405      	bmi.n	8007638 <_putc_r+0x2c>
 800762c:	89a3      	ldrh	r3, [r4, #12]
 800762e:	0599      	lsls	r1, r3, #22
 8007630:	d402      	bmi.n	8007638 <_putc_r+0x2c>
 8007632:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007634:	f7ff fb2c 	bl	8006c90 <__retarget_lock_acquire_recursive>
 8007638:	68a3      	ldr	r3, [r4, #8]
 800763a:	3b01      	subs	r3, #1
 800763c:	2b00      	cmp	r3, #0
 800763e:	60a3      	str	r3, [r4, #8]
 8007640:	da05      	bge.n	800764e <_putc_r+0x42>
 8007642:	69a2      	ldr	r2, [r4, #24]
 8007644:	4293      	cmp	r3, r2
 8007646:	db1c      	blt.n	8007682 <_putc_r+0x76>
 8007648:	b2eb      	uxtb	r3, r5
 800764a:	2b0a      	cmp	r3, #10
 800764c:	d019      	beq.n	8007682 <_putc_r+0x76>
 800764e:	6823      	ldr	r3, [r4, #0]
 8007650:	1c5a      	adds	r2, r3, #1
 8007652:	6022      	str	r2, [r4, #0]
 8007654:	701d      	strb	r5, [r3, #0]
 8007656:	b2ed      	uxtb	r5, r5
 8007658:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800765a:	07da      	lsls	r2, r3, #31
 800765c:	d405      	bmi.n	800766a <_putc_r+0x5e>
 800765e:	89a3      	ldrh	r3, [r4, #12]
 8007660:	059b      	lsls	r3, r3, #22
 8007662:	d402      	bmi.n	800766a <_putc_r+0x5e>
 8007664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007666:	f7ff fb14 	bl	8006c92 <__retarget_lock_release_recursive>
 800766a:	4628      	mov	r0, r5
 800766c:	bd70      	pop	{r4, r5, r6, pc}
 800766e:	4b09      	ldr	r3, [pc, #36]	; (8007694 <_putc_r+0x88>)
 8007670:	429c      	cmp	r4, r3
 8007672:	d101      	bne.n	8007678 <_putc_r+0x6c>
 8007674:	68b4      	ldr	r4, [r6, #8]
 8007676:	e7d6      	b.n	8007626 <_putc_r+0x1a>
 8007678:	4b07      	ldr	r3, [pc, #28]	; (8007698 <_putc_r+0x8c>)
 800767a:	429c      	cmp	r4, r3
 800767c:	bf08      	it	eq
 800767e:	68f4      	ldreq	r4, [r6, #12]
 8007680:	e7d1      	b.n	8007626 <_putc_r+0x1a>
 8007682:	4629      	mov	r1, r5
 8007684:	4622      	mov	r2, r4
 8007686:	4630      	mov	r0, r6
 8007688:	f7ff f88a 	bl	80067a0 <__swbuf_r>
 800768c:	4605      	mov	r5, r0
 800768e:	e7e3      	b.n	8007658 <_putc_r+0x4c>
 8007690:	080081c4 	.word	0x080081c4
 8007694:	080081e4 	.word	0x080081e4
 8007698:	080081a4 	.word	0x080081a4

0800769c <__sread>:
 800769c:	b510      	push	{r4, lr}
 800769e:	460c      	mov	r4, r1
 80076a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076a4:	f000 f8de 	bl	8007864 <_read_r>
 80076a8:	2800      	cmp	r0, #0
 80076aa:	bfab      	itete	ge
 80076ac:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076ae:	89a3      	ldrhlt	r3, [r4, #12]
 80076b0:	181b      	addge	r3, r3, r0
 80076b2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076b6:	bfac      	ite	ge
 80076b8:	6563      	strge	r3, [r4, #84]	; 0x54
 80076ba:	81a3      	strhlt	r3, [r4, #12]
 80076bc:	bd10      	pop	{r4, pc}

080076be <__swrite>:
 80076be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076c2:	461f      	mov	r7, r3
 80076c4:	898b      	ldrh	r3, [r1, #12]
 80076c6:	05db      	lsls	r3, r3, #23
 80076c8:	4605      	mov	r5, r0
 80076ca:	460c      	mov	r4, r1
 80076cc:	4616      	mov	r6, r2
 80076ce:	d505      	bpl.n	80076dc <__swrite+0x1e>
 80076d0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076d4:	2302      	movs	r3, #2
 80076d6:	2200      	movs	r2, #0
 80076d8:	f000 f868 	bl	80077ac <_lseek_r>
 80076dc:	89a3      	ldrh	r3, [r4, #12]
 80076de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076e2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80076e6:	81a3      	strh	r3, [r4, #12]
 80076e8:	4632      	mov	r2, r6
 80076ea:	463b      	mov	r3, r7
 80076ec:	4628      	mov	r0, r5
 80076ee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80076f2:	f000 b817 	b.w	8007724 <_write_r>

080076f6 <__sseek>:
 80076f6:	b510      	push	{r4, lr}
 80076f8:	460c      	mov	r4, r1
 80076fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076fe:	f000 f855 	bl	80077ac <_lseek_r>
 8007702:	1c43      	adds	r3, r0, #1
 8007704:	89a3      	ldrh	r3, [r4, #12]
 8007706:	bf15      	itete	ne
 8007708:	6560      	strne	r0, [r4, #84]	; 0x54
 800770a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800770e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007712:	81a3      	strheq	r3, [r4, #12]
 8007714:	bf18      	it	ne
 8007716:	81a3      	strhne	r3, [r4, #12]
 8007718:	bd10      	pop	{r4, pc}

0800771a <__sclose>:
 800771a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800771e:	f000 b813 	b.w	8007748 <_close_r>
	...

08007724 <_write_r>:
 8007724:	b538      	push	{r3, r4, r5, lr}
 8007726:	4d07      	ldr	r5, [pc, #28]	; (8007744 <_write_r+0x20>)
 8007728:	4604      	mov	r4, r0
 800772a:	4608      	mov	r0, r1
 800772c:	4611      	mov	r1, r2
 800772e:	2200      	movs	r2, #0
 8007730:	602a      	str	r2, [r5, #0]
 8007732:	461a      	mov	r2, r3
 8007734:	f7fa fd77 	bl	8002226 <_write>
 8007738:	1c43      	adds	r3, r0, #1
 800773a:	d102      	bne.n	8007742 <_write_r+0x1e>
 800773c:	682b      	ldr	r3, [r5, #0]
 800773e:	b103      	cbz	r3, 8007742 <_write_r+0x1e>
 8007740:	6023      	str	r3, [r4, #0]
 8007742:	bd38      	pop	{r3, r4, r5, pc}
 8007744:	200023f8 	.word	0x200023f8

08007748 <_close_r>:
 8007748:	b538      	push	{r3, r4, r5, lr}
 800774a:	4d06      	ldr	r5, [pc, #24]	; (8007764 <_close_r+0x1c>)
 800774c:	2300      	movs	r3, #0
 800774e:	4604      	mov	r4, r0
 8007750:	4608      	mov	r0, r1
 8007752:	602b      	str	r3, [r5, #0]
 8007754:	f7fa fd83 	bl	800225e <_close>
 8007758:	1c43      	adds	r3, r0, #1
 800775a:	d102      	bne.n	8007762 <_close_r+0x1a>
 800775c:	682b      	ldr	r3, [r5, #0]
 800775e:	b103      	cbz	r3, 8007762 <_close_r+0x1a>
 8007760:	6023      	str	r3, [r4, #0]
 8007762:	bd38      	pop	{r3, r4, r5, pc}
 8007764:	200023f8 	.word	0x200023f8

08007768 <_fstat_r>:
 8007768:	b538      	push	{r3, r4, r5, lr}
 800776a:	4d07      	ldr	r5, [pc, #28]	; (8007788 <_fstat_r+0x20>)
 800776c:	2300      	movs	r3, #0
 800776e:	4604      	mov	r4, r0
 8007770:	4608      	mov	r0, r1
 8007772:	4611      	mov	r1, r2
 8007774:	602b      	str	r3, [r5, #0]
 8007776:	f7fa fd7e 	bl	8002276 <_fstat>
 800777a:	1c43      	adds	r3, r0, #1
 800777c:	d102      	bne.n	8007784 <_fstat_r+0x1c>
 800777e:	682b      	ldr	r3, [r5, #0]
 8007780:	b103      	cbz	r3, 8007784 <_fstat_r+0x1c>
 8007782:	6023      	str	r3, [r4, #0]
 8007784:	bd38      	pop	{r3, r4, r5, pc}
 8007786:	bf00      	nop
 8007788:	200023f8 	.word	0x200023f8

0800778c <_isatty_r>:
 800778c:	b538      	push	{r3, r4, r5, lr}
 800778e:	4d06      	ldr	r5, [pc, #24]	; (80077a8 <_isatty_r+0x1c>)
 8007790:	2300      	movs	r3, #0
 8007792:	4604      	mov	r4, r0
 8007794:	4608      	mov	r0, r1
 8007796:	602b      	str	r3, [r5, #0]
 8007798:	f7fa fd7d 	bl	8002296 <_isatty>
 800779c:	1c43      	adds	r3, r0, #1
 800779e:	d102      	bne.n	80077a6 <_isatty_r+0x1a>
 80077a0:	682b      	ldr	r3, [r5, #0]
 80077a2:	b103      	cbz	r3, 80077a6 <_isatty_r+0x1a>
 80077a4:	6023      	str	r3, [r4, #0]
 80077a6:	bd38      	pop	{r3, r4, r5, pc}
 80077a8:	200023f8 	.word	0x200023f8

080077ac <_lseek_r>:
 80077ac:	b538      	push	{r3, r4, r5, lr}
 80077ae:	4d07      	ldr	r5, [pc, #28]	; (80077cc <_lseek_r+0x20>)
 80077b0:	4604      	mov	r4, r0
 80077b2:	4608      	mov	r0, r1
 80077b4:	4611      	mov	r1, r2
 80077b6:	2200      	movs	r2, #0
 80077b8:	602a      	str	r2, [r5, #0]
 80077ba:	461a      	mov	r2, r3
 80077bc:	f7fa fd76 	bl	80022ac <_lseek>
 80077c0:	1c43      	adds	r3, r0, #1
 80077c2:	d102      	bne.n	80077ca <_lseek_r+0x1e>
 80077c4:	682b      	ldr	r3, [r5, #0]
 80077c6:	b103      	cbz	r3, 80077ca <_lseek_r+0x1e>
 80077c8:	6023      	str	r3, [r4, #0]
 80077ca:	bd38      	pop	{r3, r4, r5, pc}
 80077cc:	200023f8 	.word	0x200023f8

080077d0 <memmove>:
 80077d0:	4288      	cmp	r0, r1
 80077d2:	b510      	push	{r4, lr}
 80077d4:	eb01 0402 	add.w	r4, r1, r2
 80077d8:	d902      	bls.n	80077e0 <memmove+0x10>
 80077da:	4284      	cmp	r4, r0
 80077dc:	4623      	mov	r3, r4
 80077de:	d807      	bhi.n	80077f0 <memmove+0x20>
 80077e0:	1e43      	subs	r3, r0, #1
 80077e2:	42a1      	cmp	r1, r4
 80077e4:	d008      	beq.n	80077f8 <memmove+0x28>
 80077e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80077ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 80077ee:	e7f8      	b.n	80077e2 <memmove+0x12>
 80077f0:	4402      	add	r2, r0
 80077f2:	4601      	mov	r1, r0
 80077f4:	428a      	cmp	r2, r1
 80077f6:	d100      	bne.n	80077fa <memmove+0x2a>
 80077f8:	bd10      	pop	{r4, pc}
 80077fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80077fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007802:	e7f7      	b.n	80077f4 <memmove+0x24>

08007804 <_realloc_r>:
 8007804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007808:	4680      	mov	r8, r0
 800780a:	4614      	mov	r4, r2
 800780c:	460e      	mov	r6, r1
 800780e:	b921      	cbnz	r1, 800781a <_realloc_r+0x16>
 8007810:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007814:	4611      	mov	r1, r2
 8007816:	f7fe bd0b 	b.w	8006230 <_malloc_r>
 800781a:	b92a      	cbnz	r2, 8007828 <_realloc_r+0x24>
 800781c:	f7fe fc9c 	bl	8006158 <_free_r>
 8007820:	4625      	mov	r5, r4
 8007822:	4628      	mov	r0, r5
 8007824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007828:	f000 f82e 	bl	8007888 <_malloc_usable_size_r>
 800782c:	4284      	cmp	r4, r0
 800782e:	4607      	mov	r7, r0
 8007830:	d802      	bhi.n	8007838 <_realloc_r+0x34>
 8007832:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007836:	d812      	bhi.n	800785e <_realloc_r+0x5a>
 8007838:	4621      	mov	r1, r4
 800783a:	4640      	mov	r0, r8
 800783c:	f7fe fcf8 	bl	8006230 <_malloc_r>
 8007840:	4605      	mov	r5, r0
 8007842:	2800      	cmp	r0, #0
 8007844:	d0ed      	beq.n	8007822 <_realloc_r+0x1e>
 8007846:	42bc      	cmp	r4, r7
 8007848:	4622      	mov	r2, r4
 800784a:	4631      	mov	r1, r6
 800784c:	bf28      	it	cs
 800784e:	463a      	movcs	r2, r7
 8007850:	f7fe fc6c 	bl	800612c <memcpy>
 8007854:	4631      	mov	r1, r6
 8007856:	4640      	mov	r0, r8
 8007858:	f7fe fc7e 	bl	8006158 <_free_r>
 800785c:	e7e1      	b.n	8007822 <_realloc_r+0x1e>
 800785e:	4635      	mov	r5, r6
 8007860:	e7df      	b.n	8007822 <_realloc_r+0x1e>
	...

08007864 <_read_r>:
 8007864:	b538      	push	{r3, r4, r5, lr}
 8007866:	4d07      	ldr	r5, [pc, #28]	; (8007884 <_read_r+0x20>)
 8007868:	4604      	mov	r4, r0
 800786a:	4608      	mov	r0, r1
 800786c:	4611      	mov	r1, r2
 800786e:	2200      	movs	r2, #0
 8007870:	602a      	str	r2, [r5, #0]
 8007872:	461a      	mov	r2, r3
 8007874:	f7fa fcba 	bl	80021ec <_read>
 8007878:	1c43      	adds	r3, r0, #1
 800787a:	d102      	bne.n	8007882 <_read_r+0x1e>
 800787c:	682b      	ldr	r3, [r5, #0]
 800787e:	b103      	cbz	r3, 8007882 <_read_r+0x1e>
 8007880:	6023      	str	r3, [r4, #0]
 8007882:	bd38      	pop	{r3, r4, r5, pc}
 8007884:	200023f8 	.word	0x200023f8

08007888 <_malloc_usable_size_r>:
 8007888:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800788c:	1f18      	subs	r0, r3, #4
 800788e:	2b00      	cmp	r3, #0
 8007890:	bfbc      	itt	lt
 8007892:	580b      	ldrlt	r3, [r1, r0]
 8007894:	18c0      	addlt	r0, r0, r3
 8007896:	4770      	bx	lr

08007898 <_init>:
 8007898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800789a:	bf00      	nop
 800789c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800789e:	bc08      	pop	{r3}
 80078a0:	469e      	mov	lr, r3
 80078a2:	4770      	bx	lr

080078a4 <_fini>:
 80078a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078a6:	bf00      	nop
 80078a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078aa:	bc08      	pop	{r3}
 80078ac:	469e      	mov	lr, r3
 80078ae:	4770      	bx	lr
