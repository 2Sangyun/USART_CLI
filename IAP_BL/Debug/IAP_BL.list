
IAP_BL.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000772c  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000988  080078dc  080078dc  000178dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008264  08008264  00020a38  2**0
                  CONTENTS
  4 .ARM          00000008  08008264  08008264  00018264  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800826c  0800826c  00020a38  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800826c  0800826c  0001826c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008270  08008270  00018270  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000a38  20000000  08008274  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020a38  2**0
                  CONTENTS
 10 .bss          000019c4  20000a38  20000a38  00020a38  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200023fc  200023fc  00020a38  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020a38  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015652  00000000  00000000  00020a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003768  00000000  00000000  000360ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001060  00000000  00000000  00039828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ef8  00000000  00000000  0003a888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026fd4  00000000  00000000  0003b780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000148c9  00000000  00000000  00062754  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000dd5bc  00000000  00000000  0007701d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001545d9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004e6c  00000000  00000000  0015462c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000a38 	.word	0x20000a38
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080078c4 	.word	0x080078c4

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000a3c 	.word	0x20000a3c
 80001ec:	080078c4 	.word	0x080078c4

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b974 	b.w	80005a0 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468e      	mov	lr, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	d14d      	bne.n	800037a <__udivmoddi4+0xaa>
 80002de:	428a      	cmp	r2, r1
 80002e0:	4694      	mov	ip, r2
 80002e2:	d969      	bls.n	80003b8 <__udivmoddi4+0xe8>
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	b152      	cbz	r2, 8000300 <__udivmoddi4+0x30>
 80002ea:	fa01 f302 	lsl.w	r3, r1, r2
 80002ee:	f1c2 0120 	rsb	r1, r2, #32
 80002f2:	fa20 f101 	lsr.w	r1, r0, r1
 80002f6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002fa:	ea41 0e03 	orr.w	lr, r1, r3
 80002fe:	4094      	lsls	r4, r2
 8000300:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000304:	0c21      	lsrs	r1, r4, #16
 8000306:	fbbe f6f8 	udiv	r6, lr, r8
 800030a:	fa1f f78c 	uxth.w	r7, ip
 800030e:	fb08 e316 	mls	r3, r8, r6, lr
 8000312:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000316:	fb06 f107 	mul.w	r1, r6, r7
 800031a:	4299      	cmp	r1, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x64>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f106 30ff 	add.w	r0, r6, #4294967295
 8000326:	f080 811f 	bcs.w	8000568 <__udivmoddi4+0x298>
 800032a:	4299      	cmp	r1, r3
 800032c:	f240 811c 	bls.w	8000568 <__udivmoddi4+0x298>
 8000330:	3e02      	subs	r6, #2
 8000332:	4463      	add	r3, ip
 8000334:	1a5b      	subs	r3, r3, r1
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb3 f0f8 	udiv	r0, r3, r8
 800033c:	fb08 3310 	mls	r3, r8, r0, r3
 8000340:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000344:	fb00 f707 	mul.w	r7, r0, r7
 8000348:	42a7      	cmp	r7, r4
 800034a:	d90a      	bls.n	8000362 <__udivmoddi4+0x92>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 33ff 	add.w	r3, r0, #4294967295
 8000354:	f080 810a 	bcs.w	800056c <__udivmoddi4+0x29c>
 8000358:	42a7      	cmp	r7, r4
 800035a:	f240 8107 	bls.w	800056c <__udivmoddi4+0x29c>
 800035e:	4464      	add	r4, ip
 8000360:	3802      	subs	r0, #2
 8000362:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000366:	1be4      	subs	r4, r4, r7
 8000368:	2600      	movs	r6, #0
 800036a:	b11d      	cbz	r5, 8000374 <__udivmoddi4+0xa4>
 800036c:	40d4      	lsrs	r4, r2
 800036e:	2300      	movs	r3, #0
 8000370:	e9c5 4300 	strd	r4, r3, [r5]
 8000374:	4631      	mov	r1, r6
 8000376:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037a:	428b      	cmp	r3, r1
 800037c:	d909      	bls.n	8000392 <__udivmoddi4+0xc2>
 800037e:	2d00      	cmp	r5, #0
 8000380:	f000 80ef 	beq.w	8000562 <__udivmoddi4+0x292>
 8000384:	2600      	movs	r6, #0
 8000386:	e9c5 0100 	strd	r0, r1, [r5]
 800038a:	4630      	mov	r0, r6
 800038c:	4631      	mov	r1, r6
 800038e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000392:	fab3 f683 	clz	r6, r3
 8000396:	2e00      	cmp	r6, #0
 8000398:	d14a      	bne.n	8000430 <__udivmoddi4+0x160>
 800039a:	428b      	cmp	r3, r1
 800039c:	d302      	bcc.n	80003a4 <__udivmoddi4+0xd4>
 800039e:	4282      	cmp	r2, r0
 80003a0:	f200 80f9 	bhi.w	8000596 <__udivmoddi4+0x2c6>
 80003a4:	1a84      	subs	r4, r0, r2
 80003a6:	eb61 0303 	sbc.w	r3, r1, r3
 80003aa:	2001      	movs	r0, #1
 80003ac:	469e      	mov	lr, r3
 80003ae:	2d00      	cmp	r5, #0
 80003b0:	d0e0      	beq.n	8000374 <__udivmoddi4+0xa4>
 80003b2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003b6:	e7dd      	b.n	8000374 <__udivmoddi4+0xa4>
 80003b8:	b902      	cbnz	r2, 80003bc <__udivmoddi4+0xec>
 80003ba:	deff      	udf	#255	; 0xff
 80003bc:	fab2 f282 	clz	r2, r2
 80003c0:	2a00      	cmp	r2, #0
 80003c2:	f040 8092 	bne.w	80004ea <__udivmoddi4+0x21a>
 80003c6:	eba1 010c 	sub.w	r1, r1, ip
 80003ca:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ce:	fa1f fe8c 	uxth.w	lr, ip
 80003d2:	2601      	movs	r6, #1
 80003d4:	0c20      	lsrs	r0, r4, #16
 80003d6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003da:	fb07 1113 	mls	r1, r7, r3, r1
 80003de:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e2:	fb0e f003 	mul.w	r0, lr, r3
 80003e6:	4288      	cmp	r0, r1
 80003e8:	d908      	bls.n	80003fc <__udivmoddi4+0x12c>
 80003ea:	eb1c 0101 	adds.w	r1, ip, r1
 80003ee:	f103 38ff 	add.w	r8, r3, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x12a>
 80003f4:	4288      	cmp	r0, r1
 80003f6:	f200 80cb 	bhi.w	8000590 <__udivmoddi4+0x2c0>
 80003fa:	4643      	mov	r3, r8
 80003fc:	1a09      	subs	r1, r1, r0
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	fbb1 f0f7 	udiv	r0, r1, r7
 8000404:	fb07 1110 	mls	r1, r7, r0, r1
 8000408:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800040c:	fb0e fe00 	mul.w	lr, lr, r0
 8000410:	45a6      	cmp	lr, r4
 8000412:	d908      	bls.n	8000426 <__udivmoddi4+0x156>
 8000414:	eb1c 0404 	adds.w	r4, ip, r4
 8000418:	f100 31ff 	add.w	r1, r0, #4294967295
 800041c:	d202      	bcs.n	8000424 <__udivmoddi4+0x154>
 800041e:	45a6      	cmp	lr, r4
 8000420:	f200 80bb 	bhi.w	800059a <__udivmoddi4+0x2ca>
 8000424:	4608      	mov	r0, r1
 8000426:	eba4 040e 	sub.w	r4, r4, lr
 800042a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800042e:	e79c      	b.n	800036a <__udivmoddi4+0x9a>
 8000430:	f1c6 0720 	rsb	r7, r6, #32
 8000434:	40b3      	lsls	r3, r6
 8000436:	fa22 fc07 	lsr.w	ip, r2, r7
 800043a:	ea4c 0c03 	orr.w	ip, ip, r3
 800043e:	fa20 f407 	lsr.w	r4, r0, r7
 8000442:	fa01 f306 	lsl.w	r3, r1, r6
 8000446:	431c      	orrs	r4, r3
 8000448:	40f9      	lsrs	r1, r7
 800044a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800044e:	fa00 f306 	lsl.w	r3, r0, r6
 8000452:	fbb1 f8f9 	udiv	r8, r1, r9
 8000456:	0c20      	lsrs	r0, r4, #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fb09 1118 	mls	r1, r9, r8, r1
 8000460:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000464:	fb08 f00e 	mul.w	r0, r8, lr
 8000468:	4288      	cmp	r0, r1
 800046a:	fa02 f206 	lsl.w	r2, r2, r6
 800046e:	d90b      	bls.n	8000488 <__udivmoddi4+0x1b8>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f108 3aff 	add.w	sl, r8, #4294967295
 8000478:	f080 8088 	bcs.w	800058c <__udivmoddi4+0x2bc>
 800047c:	4288      	cmp	r0, r1
 800047e:	f240 8085 	bls.w	800058c <__udivmoddi4+0x2bc>
 8000482:	f1a8 0802 	sub.w	r8, r8, #2
 8000486:	4461      	add	r1, ip
 8000488:	1a09      	subs	r1, r1, r0
 800048a:	b2a4      	uxth	r4, r4
 800048c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000490:	fb09 1110 	mls	r1, r9, r0, r1
 8000494:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000498:	fb00 fe0e 	mul.w	lr, r0, lr
 800049c:	458e      	cmp	lr, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x1e2>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004a8:	d26c      	bcs.n	8000584 <__udivmoddi4+0x2b4>
 80004aa:	458e      	cmp	lr, r1
 80004ac:	d96a      	bls.n	8000584 <__udivmoddi4+0x2b4>
 80004ae:	3802      	subs	r0, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004b6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ba:	eba1 010e 	sub.w	r1, r1, lr
 80004be:	42a1      	cmp	r1, r4
 80004c0:	46c8      	mov	r8, r9
 80004c2:	46a6      	mov	lr, r4
 80004c4:	d356      	bcc.n	8000574 <__udivmoddi4+0x2a4>
 80004c6:	d053      	beq.n	8000570 <__udivmoddi4+0x2a0>
 80004c8:	b15d      	cbz	r5, 80004e2 <__udivmoddi4+0x212>
 80004ca:	ebb3 0208 	subs.w	r2, r3, r8
 80004ce:	eb61 010e 	sbc.w	r1, r1, lr
 80004d2:	fa01 f707 	lsl.w	r7, r1, r7
 80004d6:	fa22 f306 	lsr.w	r3, r2, r6
 80004da:	40f1      	lsrs	r1, r6
 80004dc:	431f      	orrs	r7, r3
 80004de:	e9c5 7100 	strd	r7, r1, [r5]
 80004e2:	2600      	movs	r6, #0
 80004e4:	4631      	mov	r1, r6
 80004e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	40d8      	lsrs	r0, r3
 80004f0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004f4:	fa21 f303 	lsr.w	r3, r1, r3
 80004f8:	4091      	lsls	r1, r2
 80004fa:	4301      	orrs	r1, r0
 80004fc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000500:	fa1f fe8c 	uxth.w	lr, ip
 8000504:	fbb3 f0f7 	udiv	r0, r3, r7
 8000508:	fb07 3610 	mls	r6, r7, r0, r3
 800050c:	0c0b      	lsrs	r3, r1, #16
 800050e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000512:	fb00 f60e 	mul.w	r6, r0, lr
 8000516:	429e      	cmp	r6, r3
 8000518:	fa04 f402 	lsl.w	r4, r4, r2
 800051c:	d908      	bls.n	8000530 <__udivmoddi4+0x260>
 800051e:	eb1c 0303 	adds.w	r3, ip, r3
 8000522:	f100 38ff 	add.w	r8, r0, #4294967295
 8000526:	d22f      	bcs.n	8000588 <__udivmoddi4+0x2b8>
 8000528:	429e      	cmp	r6, r3
 800052a:	d92d      	bls.n	8000588 <__udivmoddi4+0x2b8>
 800052c:	3802      	subs	r0, #2
 800052e:	4463      	add	r3, ip
 8000530:	1b9b      	subs	r3, r3, r6
 8000532:	b289      	uxth	r1, r1
 8000534:	fbb3 f6f7 	udiv	r6, r3, r7
 8000538:	fb07 3316 	mls	r3, r7, r6, r3
 800053c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000540:	fb06 f30e 	mul.w	r3, r6, lr
 8000544:	428b      	cmp	r3, r1
 8000546:	d908      	bls.n	800055a <__udivmoddi4+0x28a>
 8000548:	eb1c 0101 	adds.w	r1, ip, r1
 800054c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000550:	d216      	bcs.n	8000580 <__udivmoddi4+0x2b0>
 8000552:	428b      	cmp	r3, r1
 8000554:	d914      	bls.n	8000580 <__udivmoddi4+0x2b0>
 8000556:	3e02      	subs	r6, #2
 8000558:	4461      	add	r1, ip
 800055a:	1ac9      	subs	r1, r1, r3
 800055c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000560:	e738      	b.n	80003d4 <__udivmoddi4+0x104>
 8000562:	462e      	mov	r6, r5
 8000564:	4628      	mov	r0, r5
 8000566:	e705      	b.n	8000374 <__udivmoddi4+0xa4>
 8000568:	4606      	mov	r6, r0
 800056a:	e6e3      	b.n	8000334 <__udivmoddi4+0x64>
 800056c:	4618      	mov	r0, r3
 800056e:	e6f8      	b.n	8000362 <__udivmoddi4+0x92>
 8000570:	454b      	cmp	r3, r9
 8000572:	d2a9      	bcs.n	80004c8 <__udivmoddi4+0x1f8>
 8000574:	ebb9 0802 	subs.w	r8, r9, r2
 8000578:	eb64 0e0c 	sbc.w	lr, r4, ip
 800057c:	3801      	subs	r0, #1
 800057e:	e7a3      	b.n	80004c8 <__udivmoddi4+0x1f8>
 8000580:	4646      	mov	r6, r8
 8000582:	e7ea      	b.n	800055a <__udivmoddi4+0x28a>
 8000584:	4620      	mov	r0, r4
 8000586:	e794      	b.n	80004b2 <__udivmoddi4+0x1e2>
 8000588:	4640      	mov	r0, r8
 800058a:	e7d1      	b.n	8000530 <__udivmoddi4+0x260>
 800058c:	46d0      	mov	r8, sl
 800058e:	e77b      	b.n	8000488 <__udivmoddi4+0x1b8>
 8000590:	3b02      	subs	r3, #2
 8000592:	4461      	add	r1, ip
 8000594:	e732      	b.n	80003fc <__udivmoddi4+0x12c>
 8000596:	4630      	mov	r0, r6
 8000598:	e709      	b.n	80003ae <__udivmoddi4+0xde>
 800059a:	4464      	add	r4, ip
 800059c:	3802      	subs	r0, #2
 800059e:	e742      	b.n	8000426 <__udivmoddi4+0x156>

080005a0 <__aeabi_idiv0>:
 80005a0:	4770      	bx	lr
 80005a2:	bf00      	nop

080005a4 <QueueInit>:
#include <string.h>

#include "circular_queue.h"


void QueueInit(Queue* q){
 80005a4:	b480      	push	{r7}
 80005a6:	b083      	sub	sp, #12
 80005a8:	af00      	add	r7, sp, #0
 80005aa:	6078      	str	r0, [r7, #4]
	q->front = 0;
 80005ac:	687b      	ldr	r3, [r7, #4]
 80005ae:	2200      	movs	r2, #0
 80005b0:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
	q->rear = 0;
 80005b4:	687b      	ldr	r3, [r7, #4]
 80005b6:	2200      	movs	r2, #0
 80005b8:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	q->cursor = 0;
 80005bc:	687b      	ldr	r3, [r7, #4]
 80005be:	2200      	movs	r2, #0
 80005c0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	q->usage = 0;
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	2200      	movs	r2, #0
 80005c8:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
}
 80005cc:	bf00      	nop
 80005ce:	370c      	adds	r7, #12
 80005d0:	46bd      	mov	sp, r7
 80005d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d6:	4770      	bx	lr

080005d8 <IsEmpty>:


int IsEmpty(Queue* q){
 80005d8:	b480      	push	{r7}
 80005da:	b083      	sub	sp, #12
 80005dc:	af00      	add	r7, sp, #0
 80005de:	6078      	str	r0, [r7, #4]
	return (q->front == q->rear);
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	f8d3 21f4 	ldr.w	r2, [r3, #500]	; 0x1f4
 80005e6:	687b      	ldr	r3, [r7, #4]
 80005e8:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 80005ec:	429a      	cmp	r2, r3
 80005ee:	bf0c      	ite	eq
 80005f0:	2301      	moveq	r3, #1
 80005f2:	2300      	movne	r3, #0
 80005f4:	b2db      	uxtb	r3, r3
	//return (q->usage == 0);
}
 80005f6:	4618      	mov	r0, r3
 80005f8:	370c      	adds	r7, #12
 80005fa:	46bd      	mov	sp, r7
 80005fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000600:	4770      	bx	lr
	...

08000604 <IsFull>:


int IsFull(Queue* q){
 8000604:	b480      	push	{r7}
 8000606:	b083      	sub	sp, #12
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
	return (q->front == ((q->rear + 1) % MAX_HISTORY_BUFFER_LENGTH));
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	f8d3 01f4 	ldr.w	r0, [r3, #500]	; 0x1f4
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8000618:	1c59      	adds	r1, r3, #1
 800061a:	4b0b      	ldr	r3, [pc, #44]	; (8000648 <IsFull+0x44>)
 800061c:	fb83 2301 	smull	r2, r3, r3, r1
 8000620:	109a      	asrs	r2, r3, #2
 8000622:	17cb      	asrs	r3, r1, #31
 8000624:	1ad2      	subs	r2, r2, r3
 8000626:	4613      	mov	r3, r2
 8000628:	009b      	lsls	r3, r3, #2
 800062a:	4413      	add	r3, r2
 800062c:	005b      	lsls	r3, r3, #1
 800062e:	1aca      	subs	r2, r1, r3
 8000630:	4290      	cmp	r0, r2
 8000632:	bf0c      	ite	eq
 8000634:	2301      	moveq	r3, #1
 8000636:	2300      	movne	r3, #0
 8000638:	b2db      	uxtb	r3, r3
	//return (q->usage == MAX_HISTORY_BUFFER);
}
 800063a:	4618      	mov	r0, r3
 800063c:	370c      	adds	r7, #12
 800063e:	46bd      	mov	sp, r7
 8000640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000644:	4770      	bx	lr
 8000646:	bf00      	nop
 8000648:	66666667 	.word	0x66666667

0800064c <Enqueue>:


void Enqueue(Queue* q, uint8_t* str, uint8_t length){
 800064c:	b580      	push	{r7, lr}
 800064e:	b084      	sub	sp, #16
 8000650:	af00      	add	r7, sp, #0
 8000652:	60f8      	str	r0, [r7, #12]
 8000654:	60b9      	str	r1, [r7, #8]
 8000656:	4613      	mov	r3, r2
 8000658:	71fb      	strb	r3, [r7, #7]
	if(IsFull(q)){
 800065a:	68f8      	ldr	r0, [r7, #12]
 800065c:	f7ff ffd2 	bl	8000604 <IsFull>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d002      	beq.n	800066c <Enqueue+0x20>
		Dequeue(q);
 8000666:	68f8      	ldr	r0, [r7, #12]
 8000668:	f000 f82c 	bl	80006c4 <Dequeue>
	}
	memcpy(q->history[q->rear], str, length);
 800066c:	68fb      	ldr	r3, [r7, #12]
 800066e:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8000672:	2232      	movs	r2, #50	; 0x32
 8000674:	fb02 f303 	mul.w	r3, r2, r3
 8000678:	68fa      	ldr	r2, [r7, #12]
 800067a:	4413      	add	r3, r2
 800067c:	79fa      	ldrb	r2, [r7, #7]
 800067e:	68b9      	ldr	r1, [r7, #8]
 8000680:	4618      	mov	r0, r3
 8000682:	f005 fd69 	bl	8006158 <memcpy>
	q->rear = (q->rear + 1) % MAX_HISTORY_BUFFER_LENGTH;
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800068c:	1c59      	adds	r1, r3, #1
 800068e:	4b0c      	ldr	r3, [pc, #48]	; (80006c0 <Enqueue+0x74>)
 8000690:	fb83 2301 	smull	r2, r3, r3, r1
 8000694:	109a      	asrs	r2, r3, #2
 8000696:	17cb      	asrs	r3, r1, #31
 8000698:	1ad2      	subs	r2, r2, r3
 800069a:	4613      	mov	r3, r2
 800069c:	009b      	lsls	r3, r3, #2
 800069e:	4413      	add	r3, r2
 80006a0:	005b      	lsls	r3, r3, #1
 80006a2:	1aca      	subs	r2, r1, r3
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8
	q->usage++;
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80006b0:	1c5a      	adds	r2, r3, #1
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
}
 80006b8:	bf00      	nop
 80006ba:	3710      	adds	r7, #16
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	66666667 	.word	0x66666667

080006c4 <Dequeue>:


int Dequeue(Queue* q){
 80006c4:	b580      	push	{r7, lr}
 80006c6:	b082      	sub	sp, #8
 80006c8:	af00      	add	r7, sp, #0
 80006ca:	6078      	str	r0, [r7, #4]
	if (IsEmpty(q)) {
 80006cc:	6878      	ldr	r0, [r7, #4]
 80006ce:	f7ff ff83 	bl	80005d8 <IsEmpty>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d001      	beq.n	80006dc <Dequeue+0x18>
		return 0;
 80006d8:	2300      	movs	r3, #0
 80006da:	e019      	b.n	8000710 <Dequeue+0x4c>
	}
	else {
		q->front = (q->front + 1) % MAX_HISTORY_BUFFER_LENGTH;
 80006dc:	687b      	ldr	r3, [r7, #4]
 80006de:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 80006e2:	1c59      	adds	r1, r3, #1
 80006e4:	4b0c      	ldr	r3, [pc, #48]	; (8000718 <Dequeue+0x54>)
 80006e6:	fb83 2301 	smull	r2, r3, r3, r1
 80006ea:	109a      	asrs	r2, r3, #2
 80006ec:	17cb      	asrs	r3, r1, #31
 80006ee:	1ad2      	subs	r2, r2, r3
 80006f0:	4613      	mov	r3, r2
 80006f2:	009b      	lsls	r3, r3, #2
 80006f4:	4413      	add	r3, r2
 80006f6:	005b      	lsls	r3, r3, #1
 80006f8:	1aca      	subs	r2, r1, r3
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	f8c3 21f4 	str.w	r2, [r3, #500]	; 0x1f4
		q->usage--;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 8000706:	1e5a      	subs	r2, r3, #1
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	f8c3 21fc 	str.w	r2, [r3, #508]	; 0x1fc
		return 1;
 800070e:	2301      	movs	r3, #1
	}
}
 8000710:	4618      	mov	r0, r3
 8000712:	3708      	adds	r7, #8
 8000714:	46bd      	mov	sp, r7
 8000716:	bd80      	pop	{r7, pc}
 8000718:	66666667 	.word	0x66666667

0800071c <move_cursor>:


int move_cursor(Queue* q, int dir){
 800071c:	b480      	push	{r7}
 800071e:	b083      	sub	sp, #12
 8000720:	af00      	add	r7, sp, #0
 8000722:	6078      	str	r0, [r7, #4]
 8000724:	6039      	str	r1, [r7, #0]
	if (dir == UP){
 8000726:	683b      	ldr	r3, [r7, #0]
 8000728:	2b00      	cmp	r3, #0
 800072a:	d11c      	bne.n	8000766 <move_cursor+0x4a>
		if(q->cursor == q->front){
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000732:	687b      	ldr	r3, [r7, #4]
 8000734:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8000738:	429a      	cmp	r2, r3
 800073a:	d101      	bne.n	8000740 <move_cursor+0x24>
			return 0;
 800073c:	2300      	movs	r3, #0
 800073e:	e040      	b.n	80007c2 <move_cursor+0xa6>
		}

		if(q->cursor == 0){
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000746:	2b00      	cmp	r3, #0
 8000748:	d104      	bne.n	8000754 <move_cursor+0x38>
			q->cursor = MAX_HISTORY_BUFFER_LENGTH - 1;
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	2209      	movs	r2, #9
 800074e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
 8000752:	e006      	b.n	8000762 <move_cursor+0x46>
		}else{
			q->cursor = q->cursor - 1;
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800075a:	1e5a      	subs	r2, r3, #1
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		}
		return 1;
 8000762:	2301      	movs	r3, #1
 8000764:	e02d      	b.n	80007c2 <move_cursor+0xa6>
	}
	else if(dir == DOWN){
 8000766:	683b      	ldr	r3, [r7, #0]
 8000768:	2b01      	cmp	r3, #1
 800076a:	d129      	bne.n	80007c0 <move_cursor+0xa4>
		if(((q->cursor + 1) % MAX_HISTORY_BUFFER_LENGTH) == q->rear){
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000772:	1c59      	adds	r1, r3, #1
 8000774:	4b16      	ldr	r3, [pc, #88]	; (80007d0 <move_cursor+0xb4>)
 8000776:	fb83 2301 	smull	r2, r3, r3, r1
 800077a:	109a      	asrs	r2, r3, #2
 800077c:	17cb      	asrs	r3, r1, #31
 800077e:	1ad2      	subs	r2, r2, r3
 8000780:	4613      	mov	r3, r2
 8000782:	009b      	lsls	r3, r3, #2
 8000784:	4413      	add	r3, r2
 8000786:	005b      	lsls	r3, r3, #1
 8000788:	1aca      	subs	r2, r1, r3
 800078a:	687b      	ldr	r3, [r7, #4]
 800078c:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8000790:	429a      	cmp	r2, r3
 8000792:	d101      	bne.n	8000798 <move_cursor+0x7c>
			return 0;
 8000794:	2300      	movs	r3, #0
 8000796:	e014      	b.n	80007c2 <move_cursor+0xa6>
		}

		q->cursor = (q->cursor + 1) % MAX_HISTORY_BUFFER_LENGTH;
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800079e:	1c59      	adds	r1, r3, #1
 80007a0:	4b0b      	ldr	r3, [pc, #44]	; (80007d0 <move_cursor+0xb4>)
 80007a2:	fb83 2301 	smull	r2, r3, r3, r1
 80007a6:	109a      	asrs	r2, r3, #2
 80007a8:	17cb      	asrs	r3, r1, #31
 80007aa:	1ad2      	subs	r2, r2, r3
 80007ac:	4613      	mov	r3, r2
 80007ae:	009b      	lsls	r3, r3, #2
 80007b0:	4413      	add	r3, r2
 80007b2:	005b      	lsls	r3, r3, #1
 80007b4:	1aca      	subs	r2, r1, r3
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		return 1;
 80007bc:	2301      	movs	r3, #1
 80007be:	e000      	b.n	80007c2 <move_cursor+0xa6>
	}
	return 0;
 80007c0:	2300      	movs	r3, #0
}
 80007c2:	4618      	mov	r0, r3
 80007c4:	370c      	adds	r7, #12
 80007c6:	46bd      	mov	sp, r7
 80007c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007cc:	4770      	bx	lr
 80007ce:	bf00      	nop
 80007d0:	66666667 	.word	0x66666667

080007d4 <print_history>:



void print_history(Queue* q, int num){
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
	if(q->usage == 0){
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	f8d3 31fc 	ldr.w	r3, [r3, #508]	; 0x1fc
 80007e4:	2b00      	cmp	r3, #0
 80007e6:	d06e      	beq.n	80008c6 <print_history+0xf2>
		return;
	}

	int idx = 1;
 80007e8:	2301      	movs	r3, #1
 80007ea:	60fb      	str	r3, [r7, #12]

	if(num){
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d038      	beq.n	8000864 <print_history+0x90>
		for(int i = 0; i < num; ++i){
 80007f2:	2300      	movs	r3, #0
 80007f4:	60bb      	str	r3, [r7, #8]
 80007f6:	e006      	b.n	8000806 <print_history+0x32>
			move_cursor(q, UP);
 80007f8:	2100      	movs	r1, #0
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff8e 	bl	800071c <move_cursor>
		for(int i = 0; i < num; ++i){
 8000800:	68bb      	ldr	r3, [r7, #8]
 8000802:	3301      	adds	r3, #1
 8000804:	60bb      	str	r3, [r7, #8]
 8000806:	68ba      	ldr	r2, [r7, #8]
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	429a      	cmp	r2, r3
 800080c:	dbf4      	blt.n	80007f8 <print_history+0x24>
		}

		while(q->cursor != q->rear){
 800080e:	e020      	b.n	8000852 <print_history+0x7e>
			printf("%d %s\r\n", idx++, q->history[q->cursor]);
 8000810:	68fb      	ldr	r3, [r7, #12]
 8000812:	1c5a      	adds	r2, r3, #1
 8000814:	60fa      	str	r2, [r7, #12]
 8000816:	687a      	ldr	r2, [r7, #4]
 8000818:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800081c:	2132      	movs	r1, #50	; 0x32
 800081e:	fb01 f202 	mul.w	r2, r1, r2
 8000822:	6879      	ldr	r1, [r7, #4]
 8000824:	440a      	add	r2, r1
 8000826:	4619      	mov	r1, r3
 8000828:	4829      	ldr	r0, [pc, #164]	; (80008d0 <print_history+0xfc>)
 800082a:	f005 fd8b 	bl	8006344 <iprintf>
			q->cursor = (q->cursor + 1) % MAX_HISTORY_BUFFER_LENGTH;
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000834:	1c59      	adds	r1, r3, #1
 8000836:	4b27      	ldr	r3, [pc, #156]	; (80008d4 <print_history+0x100>)
 8000838:	fb83 2301 	smull	r2, r3, r3, r1
 800083c:	109a      	asrs	r2, r3, #2
 800083e:	17cb      	asrs	r3, r1, #31
 8000840:	1ad2      	subs	r2, r2, r3
 8000842:	4613      	mov	r3, r2
 8000844:	009b      	lsls	r3, r3, #2
 8000846:	4413      	add	r3, r2
 8000848:	005b      	lsls	r3, r3, #1
 800084a:	1aca      	subs	r2, r1, r3
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while(q->cursor != q->rear){
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 800085e:	429a      	cmp	r2, r3
 8000860:	d1d6      	bne.n	8000810 <print_history+0x3c>
 8000862:	e031      	b.n	80008c8 <print_history+0xf4>
		}
	}else{
		q->cursor = q->front;
 8000864:	687b      	ldr	r3, [r7, #4]
 8000866:	f8d3 21f4 	ldr.w	r2, [r3, #500]	; 0x1f4
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while(q->cursor != q->rear){
 8000870:	e020      	b.n	80008b4 <print_history+0xe0>

			printf("%d %s\r\n", idx++, q->history[q->cursor]);
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	1c5a      	adds	r2, r3, #1
 8000876:	60fa      	str	r2, [r7, #12]
 8000878:	687a      	ldr	r2, [r7, #4]
 800087a:	f8d2 2200 	ldr.w	r2, [r2, #512]	; 0x200
 800087e:	2132      	movs	r1, #50	; 0x32
 8000880:	fb01 f202 	mul.w	r2, r1, r2
 8000884:	6879      	ldr	r1, [r7, #4]
 8000886:	440a      	add	r2, r1
 8000888:	4619      	mov	r1, r3
 800088a:	4811      	ldr	r0, [pc, #68]	; (80008d0 <print_history+0xfc>)
 800088c:	f005 fd5a 	bl	8006344 <iprintf>

			//printf("******\n");
			q->cursor = (q->cursor + 1) % MAX_HISTORY_BUFFER_LENGTH;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000896:	1c59      	adds	r1, r3, #1
 8000898:	4b0e      	ldr	r3, [pc, #56]	; (80008d4 <print_history+0x100>)
 800089a:	fb83 2301 	smull	r2, r3, r3, r1
 800089e:	109a      	asrs	r2, r3, #2
 80008a0:	17cb      	asrs	r3, r1, #31
 80008a2:	1ad2      	subs	r2, r2, r3
 80008a4:	4613      	mov	r3, r2
 80008a6:	009b      	lsls	r3, r3, #2
 80008a8:	4413      	add	r3, r2
 80008aa:	005b      	lsls	r3, r3, #1
 80008ac:	1aca      	subs	r2, r1, r3
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while(q->cursor != q->rear){
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80008ba:	687b      	ldr	r3, [r7, #4]
 80008bc:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 80008c0:	429a      	cmp	r2, r3
 80008c2:	d1d6      	bne.n	8000872 <print_history+0x9e>
 80008c4:	e000      	b.n	80008c8 <print_history+0xf4>
		return;
 80008c6:	bf00      	nop
		}

	}
}
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	080078dc 	.word	0x080078dc
 80008d4:	66666667 	.word	0x66666667

080008d8 <CliInit>:
char cmd_buf[MAX_CMD_BUFFER_LENGTH];
char tmp_buf[MAX_CMD_BUFFER_LENGTH];


void CliInit(UART_HandleTypeDef* huart)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	QueueInit(&que);
 80008e0:	4806      	ldr	r0, [pc, #24]	; (80008fc <CliInit+0x24>)
 80008e2:	f7ff fe5f 	bl	80005a4 <QueueInit>
	UartInit(huart);
 80008e6:	6878      	ldr	r0, [r7, #4]
 80008e8:	f000 fb06 	bl	8000ef8 <UartInit>
	CommandInit();
 80008ec:	f000 f8aa 	bl	8000a44 <CommandInit>
	CliDisplayInfo();
 80008f0:	f000 f806 	bl	8000900 <CliDisplayInfo>
}
 80008f4:	bf00      	nop
 80008f6:	3708      	adds	r7, #8
 80008f8:	46bd      	mov	sp, r7
 80008fa:	bd80      	pop	{r7, pc}
 80008fc:	200015ec 	.word	0x200015ec

08000900 <CliDisplayInfo>:


void CliDisplayInfo()
{
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0
	printf("===========================================================================\r\n");
 8000904:	4808      	ldr	r0, [pc, #32]	; (8000928 <CliDisplayInfo+0x28>)
 8000906:	f005 fdb9 	bl	800647c <puts>
	printf("* Created on: 2022-07-15\r\n");
 800090a:	4808      	ldr	r0, [pc, #32]	; (800092c <CliDisplayInfo+0x2c>)
 800090c:	f005 fdb6 	bl	800647c <puts>
	printf("* Author: sangyun\r\n");
 8000910:	4807      	ldr	r0, [pc, #28]	; (8000930 <CliDisplayInfo+0x30>)
 8000912:	f005 fdb3 	bl	800647c <puts>
	printf("* Uart CLI Ver 1.0\r\n");
 8000916:	4807      	ldr	r0, [pc, #28]	; (8000934 <CliDisplayInfo+0x34>)
 8000918:	f005 fdb0 	bl	800647c <puts>
	printf("===========================================================================\r\n");
 800091c:	4802      	ldr	r0, [pc, #8]	; (8000928 <CliDisplayInfo+0x28>)
 800091e:	f005 fdad 	bl	800647c <puts>
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	080078e4 	.word	0x080078e4
 800092c:	08007934 	.word	0x08007934
 8000930:	08007950 	.word	0x08007950
 8000934:	08007964 	.word	0x08007964

08000938 <CliDo>:


void CliDo(UART_HandleTypeDef* huart)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
	memset(cmd_buf, 0x00, MAX_CMD_BUFFER_LENGTH);
 8000940:	2232      	movs	r2, #50	; 0x32
 8000942:	2100      	movs	r1, #0
 8000944:	480d      	ldr	r0, [pc, #52]	; (800097c <CliDo+0x44>)
 8000946:	f005 fc15 	bl	8006174 <memset>

	UartTransmitBuffer(huart, (uint8_t *)"CMD>>", 6);
 800094a:	2206      	movs	r2, #6
 800094c:	490c      	ldr	r1, [pc, #48]	; (8000980 <CliDo+0x48>)
 800094e:	6878      	ldr	r0, [r7, #4]
 8000950:	f000 fb70 	bl	8001034 <UartTransmitBuffer>

	if(UartReceiveBuffer(huart, (uint8_t *)cmd_buf, MAX_CMD_BUFFER_LENGTH) == 0){
 8000954:	2232      	movs	r2, #50	; 0x32
 8000956:	4909      	ldr	r1, [pc, #36]	; (800097c <CliDo+0x44>)
 8000958:	6878      	ldr	r0, [r7, #4]
 800095a:	f000 fafb 	bl	8000f54 <UartReceiveBuffer>
 800095e:	4603      	mov	r3, r0
 8000960:	2b00      	cmp	r3, #0
 8000962:	d007      	beq.n	8000974 <CliDo+0x3c>
		return;
	}
	CLiParseCmdLine(huart, cmd_buf);
 8000964:	4905      	ldr	r1, [pc, #20]	; (800097c <CliDo+0x44>)
 8000966:	6878      	ldr	r0, [r7, #4]
 8000968:	f000 f80c 	bl	8000984 <CLiParseCmdLine>
	HAL_Delay(10);
 800096c:	200a      	movs	r0, #10
 800096e:	f002 f839 	bl	80029e4 <HAL_Delay>
 8000972:	e000      	b.n	8000976 <CliDo+0x3e>
		return;
 8000974:	bf00      	nop

}
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	20000a54 	.word	0x20000a54
 8000980:	08007978 	.word	0x08007978

08000984 <CLiParseCmdLine>:


void CLiParseCmdLine(UART_HandleTypeDef* huart, char* cmd_line)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
 800098c:	6039      	str	r1, [r7, #0]
	static const char *delim = " \f\n\r\t\v";
	char* tok;
	char* next_ptr;
	char *argv[5]= {0,};
 800098e:	f107 0308 	add.w	r3, r7, #8
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]
	uint8_t argc = 0;
 800099e:	2300      	movs	r3, #0
 80009a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

	//char tmp_line[MAX_CMD_BUFFER_LENGTH];
	memset(tmp_buf, 0x00, sizeof(tmp_buf));
 80009a4:	2232      	movs	r2, #50	; 0x32
 80009a6:	2100      	movs	r1, #0
 80009a8:	481c      	ldr	r0, [pc, #112]	; (8000a1c <CLiParseCmdLine+0x98>)
 80009aa:	f005 fbe3 	bl	8006174 <memset>

	memcpy(tmp_buf, cmd_line, strlen(cmd_line));
 80009ae:	6838      	ldr	r0, [r7, #0]
 80009b0:	f7ff fc1e 	bl	80001f0 <strlen>
 80009b4:	4603      	mov	r3, r0
 80009b6:	461a      	mov	r2, r3
 80009b8:	6839      	ldr	r1, [r7, #0]
 80009ba:	4818      	ldr	r0, [pc, #96]	; (8000a1c <CLiParseCmdLine+0x98>)
 80009bc:	f005 fbcc 	bl	8006158 <memcpy>

	tok = strtok_r(tmp_buf, delim, &next_ptr);
 80009c0:	4b17      	ldr	r3, [pc, #92]	; (8000a20 <CLiParseCmdLine+0x9c>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f107 021c 	add.w	r2, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4814      	ldr	r0, [pc, #80]	; (8000a1c <CLiParseCmdLine+0x98>)
 80009cc:	f005 fdf2 	bl	80065b4 <strtok_r>
 80009d0:	6278      	str	r0, [r7, #36]	; 0x24

	while(tok){
 80009d2:	e013      	b.n	80009fc <CLiParseCmdLine+0x78>
		argv[argc++] = tok;
 80009d4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80009d8:	1c5a      	adds	r2, r3, #1
 80009da:	f887 2023 	strb.w	r2, [r7, #35]	; 0x23
 80009de:	009b      	lsls	r3, r3, #2
 80009e0:	3328      	adds	r3, #40	; 0x28
 80009e2:	443b      	add	r3, r7
 80009e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80009e6:	f843 2c20 	str.w	r2, [r3, #-32]
		tok = strtok_r(NULL, delim, &next_ptr);
 80009ea:	4b0d      	ldr	r3, [pc, #52]	; (8000a20 <CLiParseCmdLine+0x9c>)
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	f107 021c 	add.w	r2, r7, #28
 80009f2:	4619      	mov	r1, r3
 80009f4:	2000      	movs	r0, #0
 80009f6:	f005 fddd 	bl	80065b4 <strtok_r>
 80009fa:	6278      	str	r0, [r7, #36]	; 0x24
	while(tok){
 80009fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80009fe:	2b00      	cmp	r3, #0
 8000a00:	d1e8      	bne.n	80009d4 <CLiParseCmdLine+0x50>
	}

	CliMatchCommand(argc, argv);
 8000a02:	f107 0208 	add.w	r2, r7, #8
 8000a06:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000a0a:	4611      	mov	r1, r2
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f000 f809 	bl	8000a24 <CliMatchCommand>
}
 8000a12:	bf00      	nop
 8000a14:	3728      	adds	r7, #40	; 0x28
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000a88 	.word	0x20000a88
 8000a20:	20000000 	.word	0x20000000

08000a24 <CliMatchCommand>:


void CliMatchCommand(uint8_t argc, char* argv[])
{
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b082      	sub	sp, #8
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	4603      	mov	r3, r0
 8000a2c:	6039      	str	r1, [r7, #0]
 8000a2e:	71fb      	strb	r3, [r7, #7]
	CommnadDo(argc, argv);
 8000a30:	79fb      	ldrb	r3, [r7, #7]
 8000a32:	6839      	ldr	r1, [r7, #0]
 8000a34:	4618      	mov	r0, r3
 8000a36:	f000 f865 	bl	8000b04 <CommnadDo>
}
 8000a3a:	bf00      	nop
 8000a3c:	3708      	adds	r7, #8
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	bd80      	pop	{r7, pc}
	...

08000a44 <CommandInit>:
};
CommandSet commandSet[MAX_CMD_NUM];


void CommandInit()
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	b082      	sub	sp, #8
 8000a48:	af00      	add	r7, sp, #0
	for(int i = 0; i< MAX_CMD_NUM; ++i){
 8000a4a:	2300      	movs	r3, #0
 8000a4c:	607b      	str	r3, [r7, #4]
 8000a4e:	e021      	b.n	8000a94 <CommandInit+0x50>
		if(strlen(commands[i]) == 0){
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	2232      	movs	r2, #50	; 0x32
 8000a54:	fb02 f303 	mul.w	r3, r2, r3
 8000a58:	4a20      	ldr	r2, [pc, #128]	; (8000adc <CommandInit+0x98>)
 8000a5a:	4413      	add	r3, r2
 8000a5c:	781b      	ldrb	r3, [r3, #0]
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d01c      	beq.n	8000a9c <CommandInit+0x58>
			break;
		}
		memcpy(commandSet[i].command_name, commands[i], MAX_HISTORY_BUFFER_LENGTH);
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	4613      	mov	r3, r2
 8000a66:	00db      	lsls	r3, r3, #3
 8000a68:	1a9b      	subs	r3, r3, r2
 8000a6a:	00db      	lsls	r3, r3, #3
 8000a6c:	4a1c      	ldr	r2, [pc, #112]	; (8000ae0 <CommandInit+0x9c>)
 8000a6e:	1898      	adds	r0, r3, r2
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2232      	movs	r2, #50	; 0x32
 8000a74:	fb02 f303 	mul.w	r3, r2, r3
 8000a78:	4a18      	ldr	r2, [pc, #96]	; (8000adc <CommandInit+0x98>)
 8000a7a:	4413      	add	r3, r2
 8000a7c:	220a      	movs	r2, #10
 8000a7e:	4619      	mov	r1, r3
 8000a80:	f005 fb6a 	bl	8006158 <memcpy>
		usage++;
 8000a84:	4b17      	ldr	r3, [pc, #92]	; (8000ae4 <CommandInit+0xa0>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	4a16      	ldr	r2, [pc, #88]	; (8000ae4 <CommandInit+0xa0>)
 8000a8c:	6013      	str	r3, [r2, #0]
	for(int i = 0; i< MAX_CMD_NUM; ++i){
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	3301      	adds	r3, #1
 8000a92:	607b      	str	r3, [r7, #4]
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	2b31      	cmp	r3, #49	; 0x31
 8000a98:	ddda      	ble.n	8000a50 <CommandInit+0xc>
 8000a9a:	e000      	b.n	8000a9e <CommandInit+0x5a>
			break;
 8000a9c:	bf00      	nop
	}

	commandSet[0].CommandFuncPtr = CommandHistory;
 8000a9e:	4b10      	ldr	r3, [pc, #64]	; (8000ae0 <CommandInit+0x9c>)
 8000aa0:	4a11      	ldr	r2, [pc, #68]	; (8000ae8 <CommandInit+0xa4>)
 8000aa2:	635a      	str	r2, [r3, #52]	; 0x34
	commandSet[1].CommandFuncPtr = CommandHelp;
 8000aa4:	4b0e      	ldr	r3, [pc, #56]	; (8000ae0 <CommandInit+0x9c>)
 8000aa6:	4a11      	ldr	r2, [pc, #68]	; (8000aec <CommandInit+0xa8>)
 8000aa8:	66da      	str	r2, [r3, #108]	; 0x6c
	commandSet[2].CommandFuncPtr = CommandMd;
 8000aaa:	4b0d      	ldr	r3, [pc, #52]	; (8000ae0 <CommandInit+0x9c>)
 8000aac:	4a10      	ldr	r2, [pc, #64]	; (8000af0 <CommandInit+0xac>)
 8000aae:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	commandSet[3].CommandFuncPtr = CommandLed;
 8000ab2:	4b0b      	ldr	r3, [pc, #44]	; (8000ae0 <CommandInit+0x9c>)
 8000ab4:	4a0f      	ldr	r2, [pc, #60]	; (8000af4 <CommandInit+0xb0>)
 8000ab6:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc
	commandSet[4].CommandFuncPtr = CommandFwDownload;
 8000aba:	4b09      	ldr	r3, [pc, #36]	; (8000ae0 <CommandInit+0x9c>)
 8000abc:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <CommandInit+0xb4>)
 8000abe:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	commandSet[5].CommandFuncPtr = CommandRunApplication;
 8000ac2:	4b07      	ldr	r3, [pc, #28]	; (8000ae0 <CommandInit+0x9c>)
 8000ac4:	4a0d      	ldr	r2, [pc, #52]	; (8000afc <CommandInit+0xb8>)
 8000ac6:	f8c3 214c 	str.w	r2, [r3, #332]	; 0x14c
	commandSet[6].CommandFuncPtr = CommandErase;
 8000aca:	4b05      	ldr	r3, [pc, #20]	; (8000ae0 <CommandInit+0x9c>)
 8000acc:	4a0c      	ldr	r2, [pc, #48]	; (8000b00 <CommandInit+0xbc>)
 8000ace:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184

}
 8000ad2:	bf00      	nop
 8000ad4:	3708      	adds	r7, #8
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	bd80      	pop	{r7, pc}
 8000ada:	bf00      	nop
 8000adc:	20000004 	.word	0x20000004
 8000ae0:	20000ac0 	.word	0x20000ac0
 8000ae4:	20000abc 	.word	0x20000abc
 8000ae8:	08000b75 	.word	0x08000b75
 8000aec:	08000bb5 	.word	0x08000bb5
 8000af0:	08000c11 	.word	0x08000c11
 8000af4:	08000dc5 	.word	0x08000dc5
 8000af8:	08000d3d 	.word	0x08000d3d
 8000afc:	08000d89 	.word	0x08000d89
 8000b00:	08000da5 	.word	0x08000da5

08000b04 <CommnadDo>:


void CommnadDo(uint8_t argc, char* argv[])
{
 8000b04:	b580      	push	{r7, lr}
 8000b06:	b084      	sub	sp, #16
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	4603      	mov	r3, r0
 8000b0c:	6039      	str	r1, [r7, #0]
 8000b0e:	71fb      	strb	r3, [r7, #7]
	for(int i = 0; i < usage; ++i){
 8000b10:	2300      	movs	r3, #0
 8000b12:	60fb      	str	r3, [r7, #12]
 8000b14:	e01f      	b.n	8000b56 <CommnadDo+0x52>
		if(stricmp(argv[0], commandSet[i].command_name) == 0){
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	6818      	ldr	r0, [r3, #0]
 8000b1a:	68fa      	ldr	r2, [r7, #12]
 8000b1c:	4613      	mov	r3, r2
 8000b1e:	00db      	lsls	r3, r3, #3
 8000b20:	1a9b      	subs	r3, r3, r2
 8000b22:	00db      	lsls	r3, r3, #3
 8000b24:	4a11      	ldr	r2, [pc, #68]	; (8000b6c <CommnadDo+0x68>)
 8000b26:	4413      	add	r3, r2
 8000b28:	4619      	mov	r1, r3
 8000b2a:	f005 fcdf 	bl	80064ec <strcasecmp>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d10d      	bne.n	8000b50 <CommnadDo+0x4c>
			commandSet[i].CommandFuncPtr(argc, argv);
 8000b34:	490d      	ldr	r1, [pc, #52]	; (8000b6c <CommnadDo+0x68>)
 8000b36:	68fa      	ldr	r2, [r7, #12]
 8000b38:	4613      	mov	r3, r2
 8000b3a:	00db      	lsls	r3, r3, #3
 8000b3c:	1a9b      	subs	r3, r3, r2
 8000b3e:	00db      	lsls	r3, r3, #3
 8000b40:	440b      	add	r3, r1
 8000b42:	3334      	adds	r3, #52	; 0x34
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	79fa      	ldrb	r2, [r7, #7]
 8000b48:	6839      	ldr	r1, [r7, #0]
 8000b4a:	4610      	mov	r0, r2
 8000b4c:	4798      	blx	r3
			break;
 8000b4e:	e008      	b.n	8000b62 <CommnadDo+0x5e>
	for(int i = 0; i < usage; ++i){
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	3301      	adds	r3, #1
 8000b54:	60fb      	str	r3, [r7, #12]
 8000b56:	4b06      	ldr	r3, [pc, #24]	; (8000b70 <CommnadDo+0x6c>)
 8000b58:	681b      	ldr	r3, [r3, #0]
 8000b5a:	68fa      	ldr	r2, [r7, #12]
 8000b5c:	429a      	cmp	r2, r3
 8000b5e:	dbda      	blt.n	8000b16 <CommnadDo+0x12>
		}
	}
}
 8000b60:	bf00      	nop
 8000b62:	bf00      	nop
 8000b64:	3710      	adds	r7, #16
 8000b66:	46bd      	mov	sp, r7
 8000b68:	bd80      	pop	{r7, pc}
 8000b6a:	bf00      	nop
 8000b6c:	20000ac0 	.word	0x20000ac0
 8000b70:	20000abc 	.word	0x20000abc

08000b74 <CommandHistory>:


void CommandHistory(uint8_t argc, char* argv[])
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b084      	sub	sp, #16
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	4603      	mov	r3, r0
 8000b7c:	6039      	str	r1, [r7, #0]
 8000b7e:	71fb      	strb	r3, [r7, #7]
	if(argc > 2){
 8000b80:	79fb      	ldrb	r3, [r7, #7]
 8000b82:	2b02      	cmp	r3, #2
 8000b84:	d903      	bls.n	8000b8e <CommandHistory+0x1a>
		printf("Usage : history [num]\r\n");
 8000b86:	4809      	ldr	r0, [pc, #36]	; (8000bac <CommandHistory+0x38>)
 8000b88:	f005 fc78 	bl	800647c <puts>
		return;
 8000b8c:	e00a      	b.n	8000ba4 <CommandHistory+0x30>
	}


	int num = atoi(argv[1]);
 8000b8e:	683b      	ldr	r3, [r7, #0]
 8000b90:	3304      	adds	r3, #4
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f005 faa1 	bl	80060dc <atoi>
 8000b9a:	60f8      	str	r0, [r7, #12]
	print_history(&que, num);
 8000b9c:	68f9      	ldr	r1, [r7, #12]
 8000b9e:	4804      	ldr	r0, [pc, #16]	; (8000bb0 <CommandHistory+0x3c>)
 8000ba0:	f7ff fe18 	bl	80007d4 <print_history>
}
 8000ba4:	3710      	adds	r7, #16
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	08007988 	.word	0x08007988
 8000bb0:	200015ec 	.word	0x200015ec

08000bb4 <CommandHelp>:


void CommandHelp(uint8_t argc, char* argv[])
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	4603      	mov	r3, r0
 8000bbc:	6039      	str	r1, [r7, #0]
 8000bbe:	71fb      	strb	r3, [r7, #7]
	printf("=====================================\r\n");
 8000bc0:	480f      	ldr	r0, [pc, #60]	; (8000c00 <CommandHelp+0x4c>)
 8000bc2:	f005 fc5b 	bl	800647c <puts>

	for(int i = 0; i< usage; ++i){
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60fb      	str	r3, [r7, #12]
 8000bca:	e00d      	b.n	8000be8 <CommandHelp+0x34>
		printf("* %s\r\n", commandSet[i].command_name);
 8000bcc:	68fa      	ldr	r2, [r7, #12]
 8000bce:	4613      	mov	r3, r2
 8000bd0:	00db      	lsls	r3, r3, #3
 8000bd2:	1a9b      	subs	r3, r3, r2
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <CommandHelp+0x50>)
 8000bd8:	4413      	add	r3, r2
 8000bda:	4619      	mov	r1, r3
 8000bdc:	480a      	ldr	r0, [pc, #40]	; (8000c08 <CommandHelp+0x54>)
 8000bde:	f005 fbb1 	bl	8006344 <iprintf>
	for(int i = 0; i< usage; ++i){
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	3301      	adds	r3, #1
 8000be6:	60fb      	str	r3, [r7, #12]
 8000be8:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <CommandHelp+0x58>)
 8000bea:	681b      	ldr	r3, [r3, #0]
 8000bec:	68fa      	ldr	r2, [r7, #12]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	dbec      	blt.n	8000bcc <CommandHelp+0x18>
	}

	printf("=====================================\r\n");
 8000bf2:	4803      	ldr	r0, [pc, #12]	; (8000c00 <CommandHelp+0x4c>)
 8000bf4:	f005 fc42 	bl	800647c <puts>

}
 8000bf8:	bf00      	nop
 8000bfa:	3710      	adds	r7, #16
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	bd80      	pop	{r7, pc}
 8000c00:	080079a0 	.word	0x080079a0
 8000c04:	20000ac0 	.word	0x20000ac0
 8000c08:	080079c8 	.word	0x080079c8
 8000c0c:	20000abc 	.word	0x20000abc

08000c10 <CommandMd>:


void CommandMd(uint8_t argc, char* argv[])
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08a      	sub	sp, #40	; 0x28
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	4603      	mov	r3, r0
 8000c18:	6039      	str	r1, [r7, #0]
 8000c1a:	71fb      	strb	r3, [r7, #7]
	int size = 0;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	613b      	str	r3, [r7, #16]
	unsigned int *addr, *cp_addr;
	unsigned char asc[4];

	if (argc != 3){
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	2b03      	cmp	r3, #3
 8000c24:	d003      	beq.n	8000c2e <CommandMd+0x1e>
		printf("Usage : md addr [size] \r\n");
 8000c26:	483f      	ldr	r0, [pc, #252]	; (8000d24 <CommandMd+0x114>)
 8000c28:	f005 fc28 	bl	800647c <puts>
 8000c2c:	e077      	b.n	8000d1e <CommandMd+0x10e>
		return;
	}

	size = (int)strtoul((const char *)argv[2], (char**)NULL, (int)0);
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	3308      	adds	r3, #8
 8000c32:	681b      	ldr	r3, [r3, #0]
 8000c34:	2200      	movs	r2, #0
 8000c36:	2100      	movs	r1, #0
 8000c38:	4618      	mov	r0, r3
 8000c3a:	f005 fdbd 	bl	80067b8 <strtoul>
 8000c3e:	4603      	mov	r3, r0
 8000c40:	613b      	str	r3, [r7, #16]
	addr   = (unsigned int *)strtoul((const char * ) argv[1], (char **)NULL, (int) 0);
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	3304      	adds	r3, #4
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	2200      	movs	r2, #0
 8000c4a:	2100      	movs	r1, #0
 8000c4c:	4618      	mov	r0, r3
 8000c4e:	f005 fdb3 	bl	80067b8 <strtoul>
 8000c52:	4603      	mov	r3, r0
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
	cp_addr = (unsigned int *)addr;
 8000c56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c58:	623b      	str	r3, [r7, #32]

	printf("\r\n");
 8000c5a:	4833      	ldr	r0, [pc, #204]	; (8000d28 <CommandMd+0x118>)
 8000c5c:	f005 fc0e 	bl	800647c <puts>

	for (int idx = 0; idx < size; ++idx){
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]
 8000c64:	e057      	b.n	8000d16 <CommandMd+0x106>
		if((idx%4) == 0){
 8000c66:	69fb      	ldr	r3, [r7, #28]
 8000c68:	f003 0303 	and.w	r3, r3, #3
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d104      	bne.n	8000c7a <CommandMd+0x6a>
			printf(" 0x%08X: ", (unsigned int)addr);
 8000c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	482d      	ldr	r0, [pc, #180]	; (8000d2c <CommandMd+0x11c>)
 8000c76:	f005 fb65 	bl	8006344 <iprintf>
		}
		printf(" 0x%08X", *(addr));
 8000c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c7c:	681b      	ldr	r3, [r3, #0]
 8000c7e:	4619      	mov	r1, r3
 8000c80:	482b      	ldr	r0, [pc, #172]	; (8000d30 <CommandMd+0x120>)
 8000c82:	f005 fb5f 	bl	8006344 <iprintf>


		if ((idx%4) == 3)
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	425a      	negs	r2, r3
 8000c8a:	f003 0303 	and.w	r3, r3, #3
 8000c8e:	f002 0203 	and.w	r2, r2, #3
 8000c92:	bf58      	it	pl
 8000c94:	4253      	negpl	r3, r2
 8000c96:	2b03      	cmp	r3, #3
 8000c98:	d137      	bne.n	8000d0a <CommandMd+0xfa>
		{
		  printf ("  |");
 8000c9a:	4826      	ldr	r0, [pc, #152]	; (8000d34 <CommandMd+0x124>)
 8000c9c:	f005 fb52 	bl	8006344 <iprintf>
		  for (int idx1= 0; idx1< 4; idx1++)
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	61bb      	str	r3, [r7, #24]
 8000ca4:	e02b      	b.n	8000cfe <CommandMd+0xee>
 8000ca6:	6a3b      	ldr	r3, [r7, #32]
 8000ca8:	681b      	ldr	r3, [r3, #0]
		  {
			memcpy((char *)asc, (char *)cp_addr, 4);
 8000caa:	60fb      	str	r3, [r7, #12]
			for (int i = 0; i < 4; ++i)
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
 8000cb0:	e01c      	b.n	8000cec <CommandMd+0xdc>
			{
			  if (asc[i] > 0x1f && asc[i] < 0x7f)
 8000cb2:	f107 020c 	add.w	r2, r7, #12
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	4413      	add	r3, r2
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	2b1f      	cmp	r3, #31
 8000cbe:	d90f      	bls.n	8000ce0 <CommandMd+0xd0>
 8000cc0:	f107 020c 	add.w	r2, r7, #12
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	4413      	add	r3, r2
 8000cc8:	781b      	ldrb	r3, [r3, #0]
 8000cca:	2b7e      	cmp	r3, #126	; 0x7e
 8000ccc:	d808      	bhi.n	8000ce0 <CommandMd+0xd0>
			  {
				printf("%c", asc[i]);
 8000cce:	f107 020c 	add.w	r2, r7, #12
 8000cd2:	697b      	ldr	r3, [r7, #20]
 8000cd4:	4413      	add	r3, r2
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f005 fb4b 	bl	8006374 <putchar>
 8000cde:	e002      	b.n	8000ce6 <CommandMd+0xd6>
			  }
			  else
			  {
				printf(".");
 8000ce0:	202e      	movs	r0, #46	; 0x2e
 8000ce2:	f005 fb47 	bl	8006374 <putchar>
			for (int i = 0; i < 4; ++i)
 8000ce6:	697b      	ldr	r3, [r7, #20]
 8000ce8:	3301      	adds	r3, #1
 8000cea:	617b      	str	r3, [r7, #20]
 8000cec:	697b      	ldr	r3, [r7, #20]
 8000cee:	2b03      	cmp	r3, #3
 8000cf0:	dddf      	ble.n	8000cb2 <CommandMd+0xa2>
			  }
			}
			cp_addr+=1;
 8000cf2:	6a3b      	ldr	r3, [r7, #32]
 8000cf4:	3304      	adds	r3, #4
 8000cf6:	623b      	str	r3, [r7, #32]
		  for (int idx1= 0; idx1< 4; idx1++)
 8000cf8:	69bb      	ldr	r3, [r7, #24]
 8000cfa:	3301      	adds	r3, #1
 8000cfc:	61bb      	str	r3, [r7, #24]
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	2b03      	cmp	r3, #3
 8000d02:	ddd0      	ble.n	8000ca6 <CommandMd+0x96>
		  }
		  printf("|\r\n");
 8000d04:	480c      	ldr	r0, [pc, #48]	; (8000d38 <CommandMd+0x128>)
 8000d06:	f005 fbb9 	bl	800647c <puts>
		}
		addr++;
 8000d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d0c:	3304      	adds	r3, #4
 8000d0e:	627b      	str	r3, [r7, #36]	; 0x24
	for (int idx = 0; idx < size; ++idx){
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	3301      	adds	r3, #1
 8000d14:	61fb      	str	r3, [r7, #28]
 8000d16:	69fa      	ldr	r2, [r7, #28]
 8000d18:	693b      	ldr	r3, [r7, #16]
 8000d1a:	429a      	cmp	r2, r3
 8000d1c:	dba3      	blt.n	8000c66 <CommandMd+0x56>
	}
}
 8000d1e:	3728      	adds	r7, #40	; 0x28
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	080079d0 	.word	0x080079d0
 8000d28:	080079ec 	.word	0x080079ec
 8000d2c:	080079f0 	.word	0x080079f0
 8000d30:	080079fc 	.word	0x080079fc
 8000d34:	08007a04 	.word	0x08007a04
 8000d38:	08007a08 	.word	0x08007a08

08000d3c <CommandFwDownload>:

void CommandFwDownload(uint8_t argc, char* argv[])
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b082      	sub	sp, #8
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	4603      	mov	r3, r0
 8000d44:	6039      	str	r1, [r7, #0]
 8000d46:	71fb      	strb	r3, [r7, #7]
	// TO DO
	printf("BootLoader loacted in FLASH 0x%lx ~ 0x%lx\r\n", BOOTLOADER_ADDRESS, APPLICATION_ADDRESS - 1);
 8000d48:	4a09      	ldr	r2, [pc, #36]	; (8000d70 <CommandFwDownload+0x34>)
 8000d4a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
 8000d4e:	4809      	ldr	r0, [pc, #36]	; (8000d74 <CommandFwDownload+0x38>)
 8000d50:	f005 faf8 	bl	8006344 <iprintf>
	printf("User Application will loacte in FLASH 0x%lx ~ 0x%x\r\n", APPLICATION_ADDRESS, USER_FLASH_END_ADDRESS);
 8000d54:	4a08      	ldr	r2, [pc, #32]	; (8000d78 <CommandFwDownload+0x3c>)
 8000d56:	4909      	ldr	r1, [pc, #36]	; (8000d7c <CommandFwDownload+0x40>)
 8000d58:	4809      	ldr	r0, [pc, #36]	; (8000d80 <CommandFwDownload+0x44>)
 8000d5a:	f005 faf3 	bl	8006344 <iprintf>

	SerialDownload();
 8000d5e:	f001 f803 	bl	8001d68 <SerialDownload>
	UartInit(&huart3);
 8000d62:	4808      	ldr	r0, [pc, #32]	; (8000d84 <CommandFwDownload+0x48>)
 8000d64:	f000 f8c8 	bl	8000ef8 <UartInit>

}
 8000d68:	bf00      	nop
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	0801ffff 	.word	0x0801ffff
 8000d74:	08007a0c 	.word	0x08007a0c
 8000d78:	080fffff 	.word	0x080fffff
 8000d7c:	08020000 	.word	0x08020000
 8000d80:	08007a38 	.word	0x08007a38
 8000d84:	20001a18 	.word	0x20001a18

08000d88 <CommandRunApplication>:


void CommandRunApplication(uint8_t argc, char* argv[])
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b082      	sub	sp, #8
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	4603      	mov	r3, r0
 8000d90:	6039      	str	r1, [r7, #0]
 8000d92:	71fb      	strb	r3, [r7, #7]

	HAL_DeInit();
 8000d94:	f001 fda2 	bl	80028dc <HAL_DeInit>
	RunApplication();
 8000d98:	f001 f84a 	bl	8001e30 <RunApplication>
}
 8000d9c:	bf00      	nop
 8000d9e:	3708      	adds	r7, #8
 8000da0:	46bd      	mov	sp, r7
 8000da2:	bd80      	pop	{r7, pc}

08000da4 <CommandErase>:

void CommandErase(uint8_t argc, char* argv[])
{
 8000da4:	b580      	push	{r7, lr}
 8000da6:	b082      	sub	sp, #8
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	4603      	mov	r3, r0
 8000dac:	6039      	str	r1, [r7, #0]
 8000dae:	71fb      	strb	r3, [r7, #7]
	FLASH_If_Erase(APPLICATION_ADDRESS);
 8000db0:	4803      	ldr	r0, [pc, #12]	; (8000dc0 <CommandErase+0x1c>)
 8000db2:	f000 fd13 	bl	80017dc <FLASH_If_Erase>
}
 8000db6:	bf00      	nop
 8000db8:	3708      	adds	r7, #8
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	08020000 	.word	0x08020000

08000dc4 <CommandLed>:

void CommandLed(uint8_t argc, char* argv[])
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b083      	sub	sp, #12
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	4603      	mov	r3, r0
 8000dcc:	6039      	str	r1, [r7, #0]
 8000dce:	71fb      	strb	r3, [r7, #7]
			printf("Usage : led [led_num] [On/Off]\n");
		}
	}else{
		printf("Usage : led [led_num] [On/Off]\n");
	}*/
}
 8000dd0:	bf00      	nop
 8000dd2:	370c      	adds	r7, #12
 8000dd4:	46bd      	mov	sp, r7
 8000dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dda:	4770      	bx	lr

08000ddc <FindCommands>:



int FindCommands(char* cmd_buff, char* tab_buff)
{
 8000ddc:	b590      	push	{r4, r7, lr}
 8000dde:	b089      	sub	sp, #36	; 0x24
 8000de0:	af00      	add	r7, sp, #0
 8000de2:	6078      	str	r0, [r7, #4]
 8000de4:	6039      	str	r1, [r7, #0]
	int count = 0, last_idx = 0;
 8000de6:	2300      	movs	r3, #0
 8000de8:	61fb      	str	r3, [r7, #28]
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
	int cmd_buff_length = strlen(cmd_buff);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f7ff f9fe 	bl	80001f0 <strlen>
 8000df4:	4603      	mov	r3, r0
 8000df6:	60fb      	str	r3, [r7, #12]

	char* check_list = (char *)malloc(sizeof(char) * usage);
 8000df8:	4b3b      	ldr	r3, [pc, #236]	; (8000ee8 <FindCommands+0x10c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	4618      	mov	r0, r3
 8000dfe:	f005 f99b 	bl	8006138 <malloc>
 8000e02:	4603      	mov	r3, r0
 8000e04:	60bb      	str	r3, [r7, #8]
	memset(check_list, 0x00, sizeof(char) * usage);
 8000e06:	4b38      	ldr	r3, [pc, #224]	; (8000ee8 <FindCommands+0x10c>)
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	461a      	mov	r2, r3
 8000e0c:	2100      	movs	r1, #0
 8000e0e:	68b8      	ldr	r0, [r7, #8]
 8000e10:	f005 f9b0 	bl	8006174 <memset>

	if(cmd_buff_length == 0){
 8000e14:	68fb      	ldr	r3, [r7, #12]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	d101      	bne.n	8000e1e <FindCommands+0x42>
		return 0;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	e060      	b.n	8000ee0 <FindCommands+0x104>
	}

	for(int i = 0; i < usage; ++i){
 8000e1e:	2300      	movs	r3, #0
 8000e20:	617b      	str	r3, [r7, #20]
 8000e22:	e01a      	b.n	8000e5a <FindCommands+0x7e>
		if(strnicmp(cmd_buff, commands[i], cmd_buff_length) == 0){
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	2232      	movs	r2, #50	; 0x32
 8000e28:	fb02 f303 	mul.w	r3, r2, r3
 8000e2c:	4a2f      	ldr	r2, [pc, #188]	; (8000eec <FindCommands+0x110>)
 8000e2e:	4413      	add	r3, r2
 8000e30:	68fa      	ldr	r2, [r7, #12]
 8000e32:	4619      	mov	r1, r3
 8000e34:	6878      	ldr	r0, [r7, #4]
 8000e36:	f005 fb73 	bl	8006520 <strncasecmp>
 8000e3a:	4603      	mov	r3, r0
 8000e3c:	2b00      	cmp	r3, #0
 8000e3e:	d109      	bne.n	8000e54 <FindCommands+0x78>
			count++;
 8000e40:	69fb      	ldr	r3, [r7, #28]
 8000e42:	3301      	adds	r3, #1
 8000e44:	61fb      	str	r3, [r7, #28]
			last_idx = i;
 8000e46:	697b      	ldr	r3, [r7, #20]
 8000e48:	61bb      	str	r3, [r7, #24]
			check_list[i] = 1;
 8000e4a:	697b      	ldr	r3, [r7, #20]
 8000e4c:	68ba      	ldr	r2, [r7, #8]
 8000e4e:	4413      	add	r3, r2
 8000e50:	2201      	movs	r2, #1
 8000e52:	701a      	strb	r2, [r3, #0]
	for(int i = 0; i < usage; ++i){
 8000e54:	697b      	ldr	r3, [r7, #20]
 8000e56:	3301      	adds	r3, #1
 8000e58:	617b      	str	r3, [r7, #20]
 8000e5a:	4b23      	ldr	r3, [pc, #140]	; (8000ee8 <FindCommands+0x10c>)
 8000e5c:	681b      	ldr	r3, [r3, #0]
 8000e5e:	697a      	ldr	r2, [r7, #20]
 8000e60:	429a      	cmp	r2, r3
 8000e62:	dbdf      	blt.n	8000e24 <FindCommands+0x48>
		}
	}

	if(count == 0){
 8000e64:	69fb      	ldr	r3, [r7, #28]
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d036      	beq.n	8000ed8 <FindCommands+0xfc>
		;
	}
	else if (count == 1){
 8000e6a:	69fb      	ldr	r3, [r7, #28]
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d115      	bne.n	8000e9c <FindCommands+0xc0>
		memcpy(tab_buff, commands[last_idx], strlen(commands[last_idx]));
 8000e70:	69bb      	ldr	r3, [r7, #24]
 8000e72:	2232      	movs	r2, #50	; 0x32
 8000e74:	fb02 f303 	mul.w	r3, r2, r3
 8000e78:	4a1c      	ldr	r2, [pc, #112]	; (8000eec <FindCommands+0x110>)
 8000e7a:	189c      	adds	r4, r3, r2
 8000e7c:	69bb      	ldr	r3, [r7, #24]
 8000e7e:	2232      	movs	r2, #50	; 0x32
 8000e80:	fb02 f303 	mul.w	r3, r2, r3
 8000e84:	4a19      	ldr	r2, [pc, #100]	; (8000eec <FindCommands+0x110>)
 8000e86:	4413      	add	r3, r2
 8000e88:	4618      	mov	r0, r3
 8000e8a:	f7ff f9b1 	bl	80001f0 <strlen>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	461a      	mov	r2, r3
 8000e92:	4621      	mov	r1, r4
 8000e94:	6838      	ldr	r0, [r7, #0]
 8000e96:	f005 f95f 	bl	8006158 <memcpy>
 8000e9a:	e01d      	b.n	8000ed8 <FindCommands+0xfc>
	}
	else{
		printf("\r\n");
 8000e9c:	4814      	ldr	r0, [pc, #80]	; (8000ef0 <FindCommands+0x114>)
 8000e9e:	f005 faed 	bl	800647c <puts>
		for(int i = 0; i < usage; ++i){
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	613b      	str	r3, [r7, #16]
 8000ea6:	e012      	b.n	8000ece <FindCommands+0xf2>
			if(check_list[i]){
 8000ea8:	693b      	ldr	r3, [r7, #16]
 8000eaa:	68ba      	ldr	r2, [r7, #8]
 8000eac:	4413      	add	r3, r2
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d009      	beq.n	8000ec8 <FindCommands+0xec>
				printf("* %s\r\n", commands[i]);
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	2232      	movs	r2, #50	; 0x32
 8000eb8:	fb02 f303 	mul.w	r3, r2, r3
 8000ebc:	4a0b      	ldr	r2, [pc, #44]	; (8000eec <FindCommands+0x110>)
 8000ebe:	4413      	add	r3, r2
 8000ec0:	4619      	mov	r1, r3
 8000ec2:	480c      	ldr	r0, [pc, #48]	; (8000ef4 <FindCommands+0x118>)
 8000ec4:	f005 fa3e 	bl	8006344 <iprintf>
		for(int i = 0; i < usage; ++i){
 8000ec8:	693b      	ldr	r3, [r7, #16]
 8000eca:	3301      	adds	r3, #1
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b06      	ldr	r3, [pc, #24]	; (8000ee8 <FindCommands+0x10c>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	693a      	ldr	r2, [r7, #16]
 8000ed4:	429a      	cmp	r2, r3
 8000ed6:	dbe7      	blt.n	8000ea8 <FindCommands+0xcc>
			}
		}
	}

	free(check_list);
 8000ed8:	68b8      	ldr	r0, [r7, #8]
 8000eda:	f005 f935 	bl	8006148 <free>
	return count;
 8000ede:	69fb      	ldr	r3, [r7, #28]
}
 8000ee0:	4618      	mov	r0, r3
 8000ee2:	3724      	adds	r7, #36	; 0x24
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd90      	pop	{r4, r7, pc}
 8000ee8:	20000abc 	.word	0x20000abc
 8000eec:	20000004 	.word	0x20000004
 8000ef0:	080079ec 	.word	0x080079ec
 8000ef4:	080079c8 	.word	0x080079c8

08000ef8 <UartInit>:
uint8_t g_rx_buffer 		= 0;

Queue que;

void UartInit(UART_HandleTypeDef* huart)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
	huart->Instance = USART3;
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	4a12      	ldr	r2, [pc, #72]	; (8000f4c <UartInit+0x54>)
 8000f04:	601a      	str	r2, [r3, #0]
	huart->Init.BaudRate = 115200;
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f0c:	605a      	str	r2, [r3, #4]
	huart->Init.WordLength = UART_WORDLENGTH_8B;
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	2200      	movs	r2, #0
 8000f12:	609a      	str	r2, [r3, #8]
	huart->Init.StopBits = UART_STOPBITS_1;
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	2200      	movs	r2, #0
 8000f18:	60da      	str	r2, [r3, #12]
	huart->Init.Parity = UART_PARITY_NONE;
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	2200      	movs	r2, #0
 8000f1e:	611a      	str	r2, [r3, #16]
	huart->Init.Mode = UART_MODE_TX_RX;
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	220c      	movs	r2, #12
 8000f24:	615a      	str	r2, [r3, #20]
	huart->Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	619a      	str	r2, [r3, #24]
	huart->Init.OverSampling = UART_OVERSAMPLING_16;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	61da      	str	r2, [r3, #28]

	if (HAL_UART_Init(huart) != HAL_OK){
 8000f32:	6878      	ldr	r0, [r7, #4]
 8000f34:	f003 fcb6 	bl	80048a4 <HAL_UART_Init>
	  //Error_Handler();
	}

	HAL_UART_Receive_IT(huart, &g_rx_buffer, 1);
 8000f38:	2201      	movs	r2, #1
 8000f3a:	4905      	ldr	r1, [pc, #20]	; (8000f50 <UartInit+0x58>)
 8000f3c:	6878      	ldr	r0, [r7, #4]
 8000f3e:	f003 fe32 	bl	8004ba6 <HAL_UART_Receive_IT>
}
 8000f42:	bf00      	nop
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	40004800 	.word	0x40004800
 8000f50:	200015e9 	.word	0x200015e9

08000f54 <UartReceiveBuffer>:


int UartReceiveBuffer(UART_HandleTypeDef* huart, uint8_t *buf, uint8_t size)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b086      	sub	sp, #24
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	60f8      	str	r0, [r7, #12]
 8000f5c:	60b9      	str	r1, [r7, #8]
 8000f5e:	4613      	mov	r3, r2
 8000f60:	71fb      	strb	r3, [r7, #7]
	int ret_value = 0;
 8000f62:	2300      	movs	r3, #0
 8000f64:	617b      	str	r3, [r7, #20]

	while(cmd_buff[cmd_buff_length-2] != '\r' && cmd_buff[cmd_buff_length-1] != '\n')
 8000f66:	e003      	b.n	8000f70 <UartReceiveBuffer+0x1c>
	{
		HAL_Delay(10);
 8000f68:	200a      	movs	r0, #10
 8000f6a:	f001 fd3b 	bl	80029e4 <HAL_Delay>
		continue;
 8000f6e:	bf00      	nop
	while(cmd_buff[cmd_buff_length-2] != '\r' && cmd_buff[cmd_buff_length-1] != '\n')
 8000f70:	4b2c      	ldr	r3, [pc, #176]	; (8001024 <UartReceiveBuffer+0xd0>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	3b02      	subs	r3, #2
 8000f76:	4a2c      	ldr	r2, [pc, #176]	; (8001028 <UartReceiveBuffer+0xd4>)
 8000f78:	5cd3      	ldrb	r3, [r2, r3]
 8000f7a:	2b0d      	cmp	r3, #13
 8000f7c:	d006      	beq.n	8000f8c <UartReceiveBuffer+0x38>
 8000f7e:	4b29      	ldr	r3, [pc, #164]	; (8001024 <UartReceiveBuffer+0xd0>)
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	3b01      	subs	r3, #1
 8000f84:	4a28      	ldr	r2, [pc, #160]	; (8001028 <UartReceiveBuffer+0xd4>)
 8000f86:	5cd3      	ldrb	r3, [r2, r3]
 8000f88:	2b0a      	cmp	r3, #10
 8000f8a:	d1ed      	bne.n	8000f68 <UartReceiveBuffer+0x14>
	}

	__HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8000f8c:	68fb      	ldr	r3, [r7, #12]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	68da      	ldr	r2, [r3, #12]
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f022 0220 	bic.w	r2, r2, #32
 8000f9a:	60da      	str	r2, [r3, #12]
	if(size < cmd_buff_length)
 8000f9c:	4b21      	ldr	r3, [pc, #132]	; (8001024 <UartReceiveBuffer+0xd0>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	79fa      	ldrb	r2, [r7, #7]
 8000fa2:	429a      	cmp	r2, r3
 8000fa4:	d202      	bcs.n	8000fac <UartReceiveBuffer+0x58>
		cmd_buff_length = size;
 8000fa6:	4a1f      	ldr	r2, [pc, #124]	; (8001024 <UartReceiveBuffer+0xd0>)
 8000fa8:	79fb      	ldrb	r3, [r7, #7]
 8000faa:	7013      	strb	r3, [r2, #0]

	cmd_buff_length -= 2;
 8000fac:	4b1d      	ldr	r3, [pc, #116]	; (8001024 <UartReceiveBuffer+0xd0>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	3b02      	subs	r3, #2
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b1b      	ldr	r3, [pc, #108]	; (8001024 <UartReceiveBuffer+0xd0>)
 8000fb6:	701a      	strb	r2, [r3, #0]
	memcpy(buf, cmd_buff, cmd_buff_length);
 8000fb8:	4b1a      	ldr	r3, [pc, #104]	; (8001024 <UartReceiveBuffer+0xd0>)
 8000fba:	781b      	ldrb	r3, [r3, #0]
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	491a      	ldr	r1, [pc, #104]	; (8001028 <UartReceiveBuffer+0xd4>)
 8000fc0:	68b8      	ldr	r0, [r7, #8]
 8000fc2:	f005 f8c9 	bl	8006158 <memcpy>
	ret_value = cmd_buff_length;
 8000fc6:	4b17      	ldr	r3, [pc, #92]	; (8001024 <UartReceiveBuffer+0xd0>)
 8000fc8:	781b      	ldrb	r3, [r3, #0]
 8000fca:	617b      	str	r3, [r7, #20]

	if(cmd_buff_length){
 8000fcc:	4b15      	ldr	r3, [pc, #84]	; (8001024 <UartReceiveBuffer+0xd0>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d00c      	beq.n	8000fee <UartReceiveBuffer+0x9a>
		Enqueue(&que, buf, cmd_buff_length);
 8000fd4:	4b13      	ldr	r3, [pc, #76]	; (8001024 <UartReceiveBuffer+0xd0>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	461a      	mov	r2, r3
 8000fda:	68b9      	ldr	r1, [r7, #8]
 8000fdc:	4813      	ldr	r0, [pc, #76]	; (800102c <UartReceiveBuffer+0xd8>)
 8000fde:	f7ff fb35 	bl	800064c <Enqueue>
		que.cursor = que.rear;
 8000fe2:	4b12      	ldr	r3, [pc, #72]	; (800102c <UartReceiveBuffer+0xd8>)
 8000fe4:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 8000fe8:	4a10      	ldr	r2, [pc, #64]	; (800102c <UartReceiveBuffer+0xd8>)
 8000fea:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
	}

	memset(cmd_buff, 0x00, sizeof(cmd_buff));
 8000fee:	2233      	movs	r2, #51	; 0x33
 8000ff0:	2100      	movs	r1, #0
 8000ff2:	480d      	ldr	r0, [pc, #52]	; (8001028 <UartReceiveBuffer+0xd4>)
 8000ff4:	f005 f8be 	bl	8006174 <memset>
	cmd_buff_length = 0;
 8000ff8:	4b0a      	ldr	r3, [pc, #40]	; (8001024 <UartReceiveBuffer+0xd0>)
 8000ffa:	2200      	movs	r2, #0
 8000ffc:	701a      	strb	r2, [r3, #0]

	__HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	68da      	ldr	r2, [r3, #12]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f042 0220 	orr.w	r2, r2, #32
 800100c:	60da      	str	r2, [r3, #12]
	HAL_UART_Receive_IT(huart, &g_rx_buffer, 1);
 800100e:	2201      	movs	r2, #1
 8001010:	4907      	ldr	r1, [pc, #28]	; (8001030 <UartReceiveBuffer+0xdc>)
 8001012:	68f8      	ldr	r0, [r7, #12]
 8001014:	f003 fdc7 	bl	8004ba6 <HAL_UART_Receive_IT>
	return ret_value;
 8001018:	697b      	ldr	r3, [r7, #20]
}
 800101a:	4618      	mov	r0, r3
 800101c:	3718      	adds	r7, #24
 800101e:	46bd      	mov	sp, r7
 8001020:	bd80      	pop	{r7, pc}
 8001022:	bf00      	nop
 8001024:	200015e8 	.word	0x200015e8
 8001028:	200015b0 	.word	0x200015b0
 800102c:	200015ec 	.word	0x200015ec
 8001030:	200015e9 	.word	0x200015e9

08001034 <UartTransmitBuffer>:


int UartTransmitBuffer(UART_HandleTypeDef* huart, uint8_t *buf, uint8_t size){
 8001034:	b580      	push	{r7, lr}
 8001036:	b084      	sub	sp, #16
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	4613      	mov	r3, r2
 8001040:	71fb      	strb	r3, [r7, #7]
	 if(HAL_UART_Transmit(huart, buf, size, 10) != HAL_OK)
 8001042:	79fb      	ldrb	r3, [r7, #7]
 8001044:	b29a      	uxth	r2, r3
 8001046:	230a      	movs	r3, #10
 8001048:	68b9      	ldr	r1, [r7, #8]
 800104a:	68f8      	ldr	r0, [r7, #12]
 800104c:	f003 fc77 	bl	800493e <HAL_UART_Transmit>
 8001050:	4603      	mov	r3, r0
 8001052:	2b00      	cmp	r3, #0
 8001054:	d002      	beq.n	800105c <UartTransmitBuffer+0x28>
	        return -1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	e000      	b.n	800105e <UartTransmitBuffer+0x2a>

	    return 0;
 800105c:	2300      	movs	r3, #0
}
 800105e:	4618      	mov	r0, r3
 8001060:	3710      	adds	r7, #16
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
	...

08001068 <UartWriteCmdBuffer>:


void UartWriteCmdBuffer(UART_HandleTypeDef* huart, int* uart_state)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b084      	sub	sp, #16
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
	char cdata[4], len = 1;
 8001072:	2301      	movs	r3, #1
 8001074:	73fb      	strb	r3, [r7, #15]
	memset(cdata, 0x00, 4);
 8001076:	f107 0308 	add.w	r3, r7, #8
 800107a:	2204      	movs	r2, #4
 800107c:	2100      	movs	r1, #0
 800107e:	4618      	mov	r0, r3
 8001080:	f005 f878 	bl	8006174 <memset>

	if(*uart_state == UART_RX_IDLE){
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	2b00      	cmp	r3, #0
 800108a:	f040 8087 	bne.w	800119c <UartWriteCmdBuffer+0x134>
		switch(g_rx_buffer) {
 800108e:	4b50      	ldr	r3, [pc, #320]	; (80011d0 <UartWriteCmdBuffer+0x168>)
 8001090:	781b      	ldrb	r3, [r3, #0]
 8001092:	2b1b      	cmp	r3, #27
 8001094:	dc30      	bgt.n	80010f8 <UartWriteCmdBuffer+0x90>
 8001096:	2b08      	cmp	r3, #8
 8001098:	db71      	blt.n	800117e <UartWriteCmdBuffer+0x116>
 800109a:	3b08      	subs	r3, #8
 800109c:	2b13      	cmp	r3, #19
 800109e:	d86e      	bhi.n	800117e <UartWriteCmdBuffer+0x116>
 80010a0:	a201      	add	r2, pc, #4	; (adr r2, 80010a8 <UartWriteCmdBuffer+0x40>)
 80010a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010a6:	bf00      	nop
 80010a8:	08001149 	.word	0x08001149
 80010ac:	08001107 	.word	0x08001107
 80010b0:	0800110f 	.word	0x0800110f
 80010b4:	0800117f 	.word	0x0800117f
 80010b8:	0800117f 	.word	0x0800117f
 80010bc:	0800110f 	.word	0x0800110f
 80010c0:	0800117f 	.word	0x0800117f
 80010c4:	0800117f 	.word	0x0800117f
 80010c8:	0800117f 	.word	0x0800117f
 80010cc:	0800117f 	.word	0x0800117f
 80010d0:	0800117f 	.word	0x0800117f
 80010d4:	0800117f 	.word	0x0800117f
 80010d8:	0800117f 	.word	0x0800117f
 80010dc:	0800117f 	.word	0x0800117f
 80010e0:	0800117f 	.word	0x0800117f
 80010e4:	0800117f 	.word	0x0800117f
 80010e8:	0800117f 	.word	0x0800117f
 80010ec:	0800117f 	.word	0x0800117f
 80010f0:	0800117f 	.word	0x0800117f
 80010f4:	080010ff 	.word	0x080010ff
 80010f8:	2b7f      	cmp	r3, #127	; 0x7f
 80010fa:	d025      	beq.n	8001148 <UartWriteCmdBuffer+0xe0>
 80010fc:	e03f      	b.n	800117e <UartWriteCmdBuffer+0x116>
			case CLI_KEY_ESC:
				*uart_state = UART_RX_ESC;
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	2201      	movs	r2, #1
 8001102:	601a      	str	r2, [r3, #0]
				break;
 8001104:	e04f      	b.n	80011a6 <UartWriteCmdBuffer+0x13e>

			case CLI_KEY_HORIZONTAL_TAB:
				*uart_state = UART_RX_TAB;
 8001106:	683b      	ldr	r3, [r7, #0]
 8001108:	2204      	movs	r2, #4
 800110a:	601a      	str	r2, [r3, #0]
				break;
 800110c:	e04b      	b.n	80011a6 <UartWriteCmdBuffer+0x13e>

			case CLI_KEY_CARRIAGE_RETURN:
			case CLI_KEY_LINE_FEED:
				len = 2;
 800110e:	2302      	movs	r3, #2
 8001110:	73fb      	strb	r3, [r7, #15]
				sprintf(cdata, "\r\n");
 8001112:	f107 0308 	add.w	r3, r7, #8
 8001116:	492f      	ldr	r1, [pc, #188]	; (80011d4 <UartWriteCmdBuffer+0x16c>)
 8001118:	4618      	mov	r0, r3
 800111a:	f005 f9c7 	bl	80064ac <siprintf>

				cmd_buff[cmd_buff_length++] = '\r';
 800111e:	4b2e      	ldr	r3, [pc, #184]	; (80011d8 <UartWriteCmdBuffer+0x170>)
 8001120:	781b      	ldrb	r3, [r3, #0]
 8001122:	1c5a      	adds	r2, r3, #1
 8001124:	b2d1      	uxtb	r1, r2
 8001126:	4a2c      	ldr	r2, [pc, #176]	; (80011d8 <UartWriteCmdBuffer+0x170>)
 8001128:	7011      	strb	r1, [r2, #0]
 800112a:	461a      	mov	r2, r3
 800112c:	4b2b      	ldr	r3, [pc, #172]	; (80011dc <UartWriteCmdBuffer+0x174>)
 800112e:	210d      	movs	r1, #13
 8001130:	5499      	strb	r1, [r3, r2]
				cmd_buff[cmd_buff_length++] = '\n';
 8001132:	4b29      	ldr	r3, [pc, #164]	; (80011d8 <UartWriteCmdBuffer+0x170>)
 8001134:	781b      	ldrb	r3, [r3, #0]
 8001136:	1c5a      	adds	r2, r3, #1
 8001138:	b2d1      	uxtb	r1, r2
 800113a:	4a27      	ldr	r2, [pc, #156]	; (80011d8 <UartWriteCmdBuffer+0x170>)
 800113c:	7011      	strb	r1, [r2, #0]
 800113e:	461a      	mov	r2, r3
 8001140:	4b26      	ldr	r3, [pc, #152]	; (80011dc <UartWriteCmdBuffer+0x174>)
 8001142:	210a      	movs	r1, #10
 8001144:	5499      	strb	r1, [r3, r2]
				break;
 8001146:	e02e      	b.n	80011a6 <UartWriteCmdBuffer+0x13e>

			case '\b':
			case CLI_KEY_DELETE:
				if(cmd_buff_length == 0){
 8001148:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <UartWriteCmdBuffer+0x170>)
 800114a:	781b      	ldrb	r3, [r3, #0]
 800114c:	2b00      	cmp	r3, #0
 800114e:	d027      	beq.n	80011a0 <UartWriteCmdBuffer+0x138>
					break;
				}
				len = 3;
 8001150:	2303      	movs	r3, #3
 8001152:	73fb      	strb	r3, [r7, #15]
				sprintf(cdata, "\b \b");
 8001154:	f107 0308 	add.w	r3, r7, #8
 8001158:	4921      	ldr	r1, [pc, #132]	; (80011e0 <UartWriteCmdBuffer+0x178>)
 800115a:	4618      	mov	r0, r3
 800115c:	f005 f9a6 	bl	80064ac <siprintf>

				if(cmd_buff_length > 0)
 8001160:	4b1d      	ldr	r3, [pc, #116]	; (80011d8 <UartWriteCmdBuffer+0x170>)
 8001162:	781b      	ldrb	r3, [r3, #0]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d01d      	beq.n	80011a4 <UartWriteCmdBuffer+0x13c>
					cmd_buff[cmd_buff_length--] = '\0';
 8001168:	4b1b      	ldr	r3, [pc, #108]	; (80011d8 <UartWriteCmdBuffer+0x170>)
 800116a:	781b      	ldrb	r3, [r3, #0]
 800116c:	1e5a      	subs	r2, r3, #1
 800116e:	b2d1      	uxtb	r1, r2
 8001170:	4a19      	ldr	r2, [pc, #100]	; (80011d8 <UartWriteCmdBuffer+0x170>)
 8001172:	7011      	strb	r1, [r2, #0]
 8001174:	461a      	mov	r2, r3
 8001176:	4b19      	ldr	r3, [pc, #100]	; (80011dc <UartWriteCmdBuffer+0x174>)
 8001178:	2100      	movs	r1, #0
 800117a:	5499      	strb	r1, [r3, r2]
				break;
 800117c:	e012      	b.n	80011a4 <UartWriteCmdBuffer+0x13c>

			default:
				cdata[0] = g_rx_buffer;
 800117e:	4b14      	ldr	r3, [pc, #80]	; (80011d0 <UartWriteCmdBuffer+0x168>)
 8001180:	781b      	ldrb	r3, [r3, #0]
 8001182:	723b      	strb	r3, [r7, #8]
				cmd_buff[cmd_buff_length++] = g_rx_buffer;
 8001184:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <UartWriteCmdBuffer+0x170>)
 8001186:	781b      	ldrb	r3, [r3, #0]
 8001188:	1c5a      	adds	r2, r3, #1
 800118a:	b2d1      	uxtb	r1, r2
 800118c:	4a12      	ldr	r2, [pc, #72]	; (80011d8 <UartWriteCmdBuffer+0x170>)
 800118e:	7011      	strb	r1, [r2, #0]
 8001190:	461a      	mov	r2, r3
 8001192:	4b0f      	ldr	r3, [pc, #60]	; (80011d0 <UartWriteCmdBuffer+0x168>)
 8001194:	7819      	ldrb	r1, [r3, #0]
 8001196:	4b11      	ldr	r3, [pc, #68]	; (80011dc <UartWriteCmdBuffer+0x174>)
 8001198:	5499      	strb	r1, [r3, r2]
				break;
 800119a:	e004      	b.n	80011a6 <UartWriteCmdBuffer+0x13e>
		}
	}
 800119c:	bf00      	nop
 800119e:	e002      	b.n	80011a6 <UartWriteCmdBuffer+0x13e>
					break;
 80011a0:	bf00      	nop
 80011a2:	e000      	b.n	80011a6 <UartWriteCmdBuffer+0x13e>
				break;
 80011a4:	bf00      	nop

	UartWriteSpecialKey(huart, uart_state);
 80011a6:	6839      	ldr	r1, [r7, #0]
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f000 f81b 	bl	80011e4 <UartWriteSpecialKey>

	HAL_UART_Transmit(huart, (uint8_t *)cdata, len, 10);
 80011ae:	7bfb      	ldrb	r3, [r7, #15]
 80011b0:	b29a      	uxth	r2, r3
 80011b2:	f107 0108 	add.w	r1, r7, #8
 80011b6:	230a      	movs	r3, #10
 80011b8:	6878      	ldr	r0, [r7, #4]
 80011ba:	f003 fbc0 	bl	800493e <HAL_UART_Transmit>
	HAL_UART_Receive_IT(huart, &g_rx_buffer, 1);
 80011be:	2201      	movs	r2, #1
 80011c0:	4903      	ldr	r1, [pc, #12]	; (80011d0 <UartWriteCmdBuffer+0x168>)
 80011c2:	6878      	ldr	r0, [r7, #4]
 80011c4:	f003 fcef 	bl	8004ba6 <HAL_UART_Receive_IT>
}
 80011c8:	bf00      	nop
 80011ca:	3710      	adds	r7, #16
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	200015e9 	.word	0x200015e9
 80011d4:	08007a70 	.word	0x08007a70
 80011d8:	200015e8 	.word	0x200015e8
 80011dc:	200015b0 	.word	0x200015b0
 80011e0:	08007a74 	.word	0x08007a74

080011e4 <UartWriteSpecialKey>:


void UartWriteSpecialKey(UART_HandleTypeDef* huart, int* uart_state)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
 80011ec:	6039      	str	r1, [r7, #0]

	switch(*uart_state){
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	3b01      	subs	r3, #1
 80011f4:	2b03      	cmp	r3, #3
 80011f6:	d82b      	bhi.n	8001250 <UartWriteSpecialKey+0x6c>
 80011f8:	a201      	add	r2, pc, #4	; (adr r2, 8001200 <UartWriteSpecialKey+0x1c>)
 80011fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011fe:	bf00      	nop
 8001200:	08001211 	.word	0x08001211
 8001204:	08001223 	.word	0x08001223
 8001208:	08001235 	.word	0x08001235
 800120c:	08001243 	.word	0x08001243
		case UART_RX_ESC:
			*uart_state = UART_RX_BRACKET;
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	2202      	movs	r2, #2
 8001214:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(huart, &g_rx_buffer, 1);
 8001216:	2201      	movs	r2, #1
 8001218:	490f      	ldr	r1, [pc, #60]	; (8001258 <UartWriteSpecialKey+0x74>)
 800121a:	6878      	ldr	r0, [r7, #4]
 800121c:	f003 fcc3 	bl	8004ba6 <HAL_UART_Receive_IT>
			break;
 8001220:	e016      	b.n	8001250 <UartWriteSpecialKey+0x6c>

		case UART_RX_BRACKET:
			*uart_state = UART_RX_DIR;
 8001222:	683b      	ldr	r3, [r7, #0]
 8001224:	2203      	movs	r2, #3
 8001226:	601a      	str	r2, [r3, #0]
			HAL_UART_Receive_IT(huart, &g_rx_buffer, 1);
 8001228:	2201      	movs	r2, #1
 800122a:	490b      	ldr	r1, [pc, #44]	; (8001258 <UartWriteSpecialKey+0x74>)
 800122c:	6878      	ldr	r0, [r7, #4]
 800122e:	f003 fcba 	bl	8004ba6 <HAL_UART_Receive_IT>
			break;
 8001232:	e00d      	b.n	8001250 <UartWriteSpecialKey+0x6c>

		case UART_RX_DIR:
			*uart_state = UART_RX_IDLE;
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	2200      	movs	r2, #0
 8001238:	601a      	str	r2, [r3, #0]
			UartWriteDirKey(huart);
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 f80e 	bl	800125c <UartWriteDirKey>
			break;
 8001240:	e006      	b.n	8001250 <UartWriteSpecialKey+0x6c>

		case UART_RX_TAB:
			*uart_state = UART_RX_IDLE;
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
			UartWriteTabKey(huart);
 8001248:	6878      	ldr	r0, [r7, #4]
 800124a:	f000 f851 	bl	80012f0 <UartWriteTabKey>
			break;
 800124e:	bf00      	nop

		default:
			;

	}
}
 8001250:	bf00      	nop
 8001252:	3708      	adds	r7, #8
 8001254:	46bd      	mov	sp, r7
 8001256:	bd80      	pop	{r7, pc}
 8001258:	200015e9 	.word	0x200015e9

0800125c <UartWriteDirKey>:


void UartWriteDirKey(UART_HandleTypeDef* huart)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b082      	sub	sp, #8
 8001260:	af00      	add	r7, sp, #0
 8001262:	6078      	str	r0, [r7, #4]
	if(g_rx_buffer == CLI_KEY_UP){
 8001264:	4b1f      	ldr	r3, [pc, #124]	; (80012e4 <UartWriteDirKey+0x88>)
 8001266:	781b      	ldrb	r3, [r3, #0]
 8001268:	2b41      	cmp	r3, #65	; 0x41
 800126a:	d112      	bne.n	8001292 <UartWriteDirKey+0x36>
		if(que.cursor == que.front){
 800126c:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <UartWriteDirKey+0x8c>)
 800126e:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001272:	4b1d      	ldr	r3, [pc, #116]	; (80012e8 <UartWriteDirKey+0x8c>)
 8001274:	f8d3 31f4 	ldr.w	r3, [r3, #500]	; 0x1f4
 8001278:	429a      	cmp	r2, r3
 800127a:	d02d      	beq.n	80012d8 <UartWriteDirKey+0x7c>
			return;
		}

		UartEraseCmdBuffer(huart);
 800127c:	6878      	ldr	r0, [r7, #4]
 800127e:	f000 f887 	bl	8001390 <UartEraseCmdBuffer>
		move_cursor(&que, UP);
 8001282:	2100      	movs	r1, #0
 8001284:	4818      	ldr	r0, [pc, #96]	; (80012e8 <UartWriteDirKey+0x8c>)
 8001286:	f7ff fa49 	bl	800071c <move_cursor>
		UartWriteHistoryOnCmdBuffer(huart);
 800128a:	6878      	ldr	r0, [r7, #4]
 800128c:	f000 f8c2 	bl	8001414 <UartWriteHistoryOnCmdBuffer>
 8001290:	e025      	b.n	80012de <UartWriteDirKey+0x82>

	}
	else if(g_rx_buffer == CLI_KEY_DOWN){
 8001292:	4b14      	ldr	r3, [pc, #80]	; (80012e4 <UartWriteDirKey+0x88>)
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	2b42      	cmp	r3, #66	; 0x42
 8001298:	d121      	bne.n	80012de <UartWriteDirKey+0x82>
		if(((que.cursor + 1)%MAX_HISTORY_BUFFER_LENGTH) == que.rear){
 800129a:	4b13      	ldr	r3, [pc, #76]	; (80012e8 <UartWriteDirKey+0x8c>)
 800129c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80012a0:	1c59      	adds	r1, r3, #1
 80012a2:	4b12      	ldr	r3, [pc, #72]	; (80012ec <UartWriteDirKey+0x90>)
 80012a4:	fb83 2301 	smull	r2, r3, r3, r1
 80012a8:	109a      	asrs	r2, r3, #2
 80012aa:	17cb      	asrs	r3, r1, #31
 80012ac:	1ad2      	subs	r2, r2, r3
 80012ae:	4613      	mov	r3, r2
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	4413      	add	r3, r2
 80012b4:	005b      	lsls	r3, r3, #1
 80012b6:	1aca      	subs	r2, r1, r3
 80012b8:	4b0b      	ldr	r3, [pc, #44]	; (80012e8 <UartWriteDirKey+0x8c>)
 80012ba:	f8d3 31f8 	ldr.w	r3, [r3, #504]	; 0x1f8
 80012be:	429a      	cmp	r2, r3
 80012c0:	d00c      	beq.n	80012dc <UartWriteDirKey+0x80>
			return;
		}

		UartEraseCmdBuffer(huart);
 80012c2:	6878      	ldr	r0, [r7, #4]
 80012c4:	f000 f864 	bl	8001390 <UartEraseCmdBuffer>
		move_cursor(&que, DOWN);
 80012c8:	2101      	movs	r1, #1
 80012ca:	4807      	ldr	r0, [pc, #28]	; (80012e8 <UartWriteDirKey+0x8c>)
 80012cc:	f7ff fa26 	bl	800071c <move_cursor>
		UartWriteHistoryOnCmdBuffer(huart);
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f000 f89f 	bl	8001414 <UartWriteHistoryOnCmdBuffer>
 80012d6:	e002      	b.n	80012de <UartWriteDirKey+0x82>
			return;
 80012d8:	bf00      	nop
 80012da:	e000      	b.n	80012de <UartWriteDirKey+0x82>
			return;
 80012dc:	bf00      	nop
	}
}
 80012de:	3708      	adds	r7, #8
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200015e9 	.word	0x200015e9
 80012e8:	200015ec 	.word	0x200015ec
 80012ec:	66666667 	.word	0x66666667

080012f0 <UartWriteTabKey>:


void UartWriteTabKey(UART_HandleTypeDef* huart)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b090      	sub	sp, #64	; 0x40
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	char tab_buff[MAX_CMD_BUFFER_LENGTH];
	memset(tab_buff, 0x00, sizeof(tab_buff));
 80012f8:	f107 0308 	add.w	r3, r7, #8
 80012fc:	2232      	movs	r2, #50	; 0x32
 80012fe:	2100      	movs	r1, #0
 8001300:	4618      	mov	r0, r3
 8001302:	f004 ff37 	bl	8006174 <memset>

	int total_commands = FindCommands((char *)cmd_buff, tab_buff);
 8001306:	f107 0308 	add.w	r3, r7, #8
 800130a:	4619      	mov	r1, r3
 800130c:	481e      	ldr	r0, [pc, #120]	; (8001388 <UartWriteTabKey+0x98>)
 800130e:	f7ff fd65 	bl	8000ddc <FindCommands>
 8001312:	63f8      	str	r0, [r7, #60]	; 0x3c

	if(total_commands == 0){
 8001314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001316:	2b00      	cmp	r3, #0
 8001318:	d032      	beq.n	8001380 <UartWriteTabKey+0x90>
		;
	}
	else if(total_commands== 1){
 800131a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800131c:	2b01      	cmp	r3, #1
 800131e:	d11e      	bne.n	800135e <UartWriteTabKey+0x6e>
		UartEraseCmdBuffer(huart);
 8001320:	6878      	ldr	r0, [r7, #4]
 8001322:	f000 f835 	bl	8001390 <UartEraseCmdBuffer>

		cmd_buff_length = strlen(tab_buff);
 8001326:	f107 0308 	add.w	r3, r7, #8
 800132a:	4618      	mov	r0, r3
 800132c:	f7fe ff60 	bl	80001f0 <strlen>
 8001330:	4603      	mov	r3, r0
 8001332:	b2da      	uxtb	r2, r3
 8001334:	4b15      	ldr	r3, [pc, #84]	; (800138c <UartWriteTabKey+0x9c>)
 8001336:	701a      	strb	r2, [r3, #0]
		//HAL_UART_Transmit_IT(huart, (uint8_t *)tab_buff, cmd_buff_length);
		HAL_UART_Transmit(huart, (uint8_t *)tab_buff, cmd_buff_length, 100);
 8001338:	4b14      	ldr	r3, [pc, #80]	; (800138c <UartWriteTabKey+0x9c>)
 800133a:	781b      	ldrb	r3, [r3, #0]
 800133c:	b29a      	uxth	r2, r3
 800133e:	f107 0108 	add.w	r1, r7, #8
 8001342:	2364      	movs	r3, #100	; 0x64
 8001344:	6878      	ldr	r0, [r7, #4]
 8001346:	f003 fafa 	bl	800493e <HAL_UART_Transmit>
		memcpy(cmd_buff, (uint8_t *)tab_buff, cmd_buff_length);
 800134a:	4b10      	ldr	r3, [pc, #64]	; (800138c <UartWriteTabKey+0x9c>)
 800134c:	781b      	ldrb	r3, [r3, #0]
 800134e:	461a      	mov	r2, r3
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	4619      	mov	r1, r3
 8001356:	480c      	ldr	r0, [pc, #48]	; (8001388 <UartWriteTabKey+0x98>)
 8001358:	f004 fefe 	bl	8006158 <memcpy>
		memset(cmd_buff, 0x00, sizeof(cmd_buff));
		cmd_buff_length = 2;
		cmd_buff[0] = '\r';
		cmd_buff[1] = '\n';
	}
}
 800135c:	e010      	b.n	8001380 <UartWriteTabKey+0x90>
		UartEraseCmdBuffer(huart);
 800135e:	6878      	ldr	r0, [r7, #4]
 8001360:	f000 f816 	bl	8001390 <UartEraseCmdBuffer>
		memset(cmd_buff, 0x00, sizeof(cmd_buff));
 8001364:	2233      	movs	r2, #51	; 0x33
 8001366:	2100      	movs	r1, #0
 8001368:	4807      	ldr	r0, [pc, #28]	; (8001388 <UartWriteTabKey+0x98>)
 800136a:	f004 ff03 	bl	8006174 <memset>
		cmd_buff_length = 2;
 800136e:	4b07      	ldr	r3, [pc, #28]	; (800138c <UartWriteTabKey+0x9c>)
 8001370:	2202      	movs	r2, #2
 8001372:	701a      	strb	r2, [r3, #0]
		cmd_buff[0] = '\r';
 8001374:	4b04      	ldr	r3, [pc, #16]	; (8001388 <UartWriteTabKey+0x98>)
 8001376:	220d      	movs	r2, #13
 8001378:	701a      	strb	r2, [r3, #0]
		cmd_buff[1] = '\n';
 800137a:	4b03      	ldr	r3, [pc, #12]	; (8001388 <UartWriteTabKey+0x98>)
 800137c:	220a      	movs	r2, #10
 800137e:	705a      	strb	r2, [r3, #1]
}
 8001380:	bf00      	nop
 8001382:	3740      	adds	r7, #64	; 0x40
 8001384:	46bd      	mov	sp, r7
 8001386:	bd80      	pop	{r7, pc}
 8001388:	200015b0 	.word	0x200015b0
 800138c:	200015e8 	.word	0x200015e8

08001390 <UartEraseCmdBuffer>:


void UartEraseCmdBuffer(UART_HandleTypeDef* huart)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
	char cdata[4];
	int len;

	memset(cdata, 0x00, 4);
 8001398:	f107 0308 	add.w	r3, r7, #8
 800139c:	2204      	movs	r2, #4
 800139e:	2100      	movs	r1, #0
 80013a0:	4618      	mov	r0, r3
 80013a2:	f004 fee7 	bl	8006174 <memset>

	while(cmd_buff_length){
 80013a6:	e024      	b.n	80013f2 <UartEraseCmdBuffer+0x62>
		len = 3;
 80013a8:	2303      	movs	r3, #3
 80013aa:	60fb      	str	r3, [r7, #12]
		sprintf(cdata, "\b \b");
 80013ac:	f107 0308 	add.w	r3, r7, #8
 80013b0:	4914      	ldr	r1, [pc, #80]	; (8001404 <UartEraseCmdBuffer+0x74>)
 80013b2:	4618      	mov	r0, r3
 80013b4:	f005 f87a 	bl	80064ac <siprintf>

		if(cmd_buff_length)
 80013b8:	4b13      	ldr	r3, [pc, #76]	; (8001408 <UartEraseCmdBuffer+0x78>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d00b      	beq.n	80013d8 <UartEraseCmdBuffer+0x48>
			cmd_buff[--cmd_buff_length] = '\0';
 80013c0:	4b11      	ldr	r3, [pc, #68]	; (8001408 <UartEraseCmdBuffer+0x78>)
 80013c2:	781b      	ldrb	r3, [r3, #0]
 80013c4:	3b01      	subs	r3, #1
 80013c6:	b2da      	uxtb	r2, r3
 80013c8:	4b0f      	ldr	r3, [pc, #60]	; (8001408 <UartEraseCmdBuffer+0x78>)
 80013ca:	701a      	strb	r2, [r3, #0]
 80013cc:	4b0e      	ldr	r3, [pc, #56]	; (8001408 <UartEraseCmdBuffer+0x78>)
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	461a      	mov	r2, r3
 80013d2:	4b0e      	ldr	r3, [pc, #56]	; (800140c <UartEraseCmdBuffer+0x7c>)
 80013d4:	2100      	movs	r1, #0
 80013d6:	5499      	strb	r1, [r3, r2]

		HAL_UART_Transmit(huart, (uint8_t *)cdata, len, 10);
 80013d8:	68fb      	ldr	r3, [r7, #12]
 80013da:	b29a      	uxth	r2, r3
 80013dc:	f107 0108 	add.w	r1, r7, #8
 80013e0:	230a      	movs	r3, #10
 80013e2:	6878      	ldr	r0, [r7, #4]
 80013e4:	f003 faab 	bl	800493e <HAL_UART_Transmit>
		HAL_UART_Receive_IT(huart, &g_rx_buffer, 1);
 80013e8:	2201      	movs	r2, #1
 80013ea:	4909      	ldr	r1, [pc, #36]	; (8001410 <UartEraseCmdBuffer+0x80>)
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f003 fbda 	bl	8004ba6 <HAL_UART_Receive_IT>
	while(cmd_buff_length){
 80013f2:	4b05      	ldr	r3, [pc, #20]	; (8001408 <UartEraseCmdBuffer+0x78>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d1d6      	bne.n	80013a8 <UartEraseCmdBuffer+0x18>
	}
}
 80013fa:	bf00      	nop
 80013fc:	bf00      	nop
 80013fe:	3710      	adds	r7, #16
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	08007a74 	.word	0x08007a74
 8001408:	200015e8 	.word	0x200015e8
 800140c:	200015b0 	.word	0x200015b0
 8001410:	200015e9 	.word	0x200015e9

08001414 <UartWriteHistoryOnCmdBuffer>:


void UartWriteHistoryOnCmdBuffer(UART_HandleTypeDef* huart)
{
 8001414:	b580      	push	{r7, lr}
 8001416:	b082      	sub	sp, #8
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
	memset(cmd_buff, 0x00, sizeof(cmd_buff));
 800141c:	2233      	movs	r2, #51	; 0x33
 800141e:	2100      	movs	r1, #0
 8001420:	4819      	ldr	r0, [pc, #100]	; (8001488 <UartWriteHistoryOnCmdBuffer+0x74>)
 8001422:	f004 fea7 	bl	8006174 <memset>
	cmd_buff_length = strlen((const char *)que.history[que.cursor]);
 8001426:	4b19      	ldr	r3, [pc, #100]	; (800148c <UartWriteHistoryOnCmdBuffer+0x78>)
 8001428:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800142c:	2232      	movs	r2, #50	; 0x32
 800142e:	fb02 f303 	mul.w	r3, r2, r3
 8001432:	4a16      	ldr	r2, [pc, #88]	; (800148c <UartWriteHistoryOnCmdBuffer+0x78>)
 8001434:	4413      	add	r3, r2
 8001436:	4618      	mov	r0, r3
 8001438:	f7fe feda 	bl	80001f0 <strlen>
 800143c:	4603      	mov	r3, r0
 800143e:	b2da      	uxtb	r2, r3
 8001440:	4b13      	ldr	r3, [pc, #76]	; (8001490 <UartWriteHistoryOnCmdBuffer+0x7c>)
 8001442:	701a      	strb	r2, [r3, #0]

	HAL_UART_Transmit(huart, (uint8_t *)que.history[que.cursor], cmd_buff_length, 10);
 8001444:	4b11      	ldr	r3, [pc, #68]	; (800148c <UartWriteHistoryOnCmdBuffer+0x78>)
 8001446:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800144a:	2232      	movs	r2, #50	; 0x32
 800144c:	fb02 f303 	mul.w	r3, r2, r3
 8001450:	4a0e      	ldr	r2, [pc, #56]	; (800148c <UartWriteHistoryOnCmdBuffer+0x78>)
 8001452:	1899      	adds	r1, r3, r2
 8001454:	4b0e      	ldr	r3, [pc, #56]	; (8001490 <UartWriteHistoryOnCmdBuffer+0x7c>)
 8001456:	781b      	ldrb	r3, [r3, #0]
 8001458:	b29a      	uxth	r2, r3
 800145a:	230a      	movs	r3, #10
 800145c:	6878      	ldr	r0, [r7, #4]
 800145e:	f003 fa6e 	bl	800493e <HAL_UART_Transmit>
	memcpy(cmd_buff, (uint8_t *)que.history[que.cursor], cmd_buff_length);
 8001462:	4b0a      	ldr	r3, [pc, #40]	; (800148c <UartWriteHistoryOnCmdBuffer+0x78>)
 8001464:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001468:	2232      	movs	r2, #50	; 0x32
 800146a:	fb02 f303 	mul.w	r3, r2, r3
 800146e:	4a07      	ldr	r2, [pc, #28]	; (800148c <UartWriteHistoryOnCmdBuffer+0x78>)
 8001470:	4413      	add	r3, r2
 8001472:	4a07      	ldr	r2, [pc, #28]	; (8001490 <UartWriteHistoryOnCmdBuffer+0x7c>)
 8001474:	7812      	ldrb	r2, [r2, #0]
 8001476:	4619      	mov	r1, r3
 8001478:	4803      	ldr	r0, [pc, #12]	; (8001488 <UartWriteHistoryOnCmdBuffer+0x74>)
 800147a:	f004 fe6d 	bl	8006158 <memcpy>
}
 800147e:	bf00      	nop
 8001480:	3708      	adds	r7, #8
 8001482:	46bd      	mov	sp, r7
 8001484:	bd80      	pop	{r7, pc}
 8001486:	bf00      	nop
 8001488:	200015b0 	.word	0x200015b0
 800148c:	200015ec 	.word	0x200015ec
 8001490:	200015e8 	.word	0x200015e8

08001494 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001494:	b580      	push	{r7, lr}
 8001496:	b082      	sub	sp, #8
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
	if(huart->Instance == USART3){
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a05      	ldr	r2, [pc, #20]	; (80014b8 <HAL_UART_RxCpltCallback+0x24>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d103      	bne.n	80014ae <HAL_UART_RxCpltCallback+0x1a>
		UartWriteCmdBuffer(huart, &uart_state);
 80014a6:	4905      	ldr	r1, [pc, #20]	; (80014bc <HAL_UART_RxCpltCallback+0x28>)
 80014a8:	6878      	ldr	r0, [r7, #4]
 80014aa:	f7ff fddd 	bl	8001068 <UartWriteCmdBuffer>
	}
}
 80014ae:	bf00      	nop
 80014b0:	3708      	adds	r7, #8
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	bf00      	nop
 80014b8:	40004800 	.word	0x40004800
 80014bc:	200015e4 	.word	0x200015e4

080014c0 <Int2Str>:
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 80014c0:	b480      	push	{r7}
 80014c2:	b087      	sub	sp, #28
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
 80014c8:	6039      	str	r1, [r7, #0]
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 80014ca:	4b26      	ldr	r3, [pc, #152]	; (8001564 <Int2Str+0xa4>)
 80014cc:	613b      	str	r3, [r7, #16]
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	2300      	movs	r3, #0
 80014d4:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < 10; i++)
 80014d6:	2300      	movs	r3, #0
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	e038      	b.n	800154e <Int2Str+0x8e>
  {
    p_str[pos++] = (intnum / divider) + 48;
 80014dc:	683a      	ldr	r2, [r7, #0]
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014e4:	b2da      	uxtb	r2, r3
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	1c59      	adds	r1, r3, #1
 80014ea:	60f9      	str	r1, [r7, #12]
 80014ec:	6879      	ldr	r1, [r7, #4]
 80014ee:	440b      	add	r3, r1
 80014f0:	3230      	adds	r2, #48	; 0x30
 80014f2:	b2d2      	uxtb	r2, r2
 80014f4:	701a      	strb	r2, [r3, #0]

    intnum = intnum % divider;
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	693a      	ldr	r2, [r7, #16]
 80014fa:	fbb3 f2f2 	udiv	r2, r3, r2
 80014fe:	6939      	ldr	r1, [r7, #16]
 8001500:	fb01 f202 	mul.w	r2, r1, r2
 8001504:	1a9b      	subs	r3, r3, r2
 8001506:	603b      	str	r3, [r7, #0]
    divider /= 10;
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4a17      	ldr	r2, [pc, #92]	; (8001568 <Int2Str+0xa8>)
 800150c:	fba2 2303 	umull	r2, r3, r2, r3
 8001510:	08db      	lsrs	r3, r3, #3
 8001512:	613b      	str	r3, [r7, #16]
    if ((p_str[pos-1] == '0') & (status == 0))
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	3b01      	subs	r3, #1
 8001518:	687a      	ldr	r2, [r7, #4]
 800151a:	4413      	add	r3, r2
 800151c:	781b      	ldrb	r3, [r3, #0]
 800151e:	2b30      	cmp	r3, #48	; 0x30
 8001520:	bf0c      	ite	eq
 8001522:	2301      	moveq	r3, #1
 8001524:	2300      	movne	r3, #0
 8001526:	b2da      	uxtb	r2, r3
 8001528:	68bb      	ldr	r3, [r7, #8]
 800152a:	2b00      	cmp	r3, #0
 800152c:	bf0c      	ite	eq
 800152e:	2301      	moveq	r3, #1
 8001530:	2300      	movne	r3, #0
 8001532:	b2db      	uxtb	r3, r3
 8001534:	4013      	ands	r3, r2
 8001536:	b2db      	uxtb	r3, r3
 8001538:	2b00      	cmp	r3, #0
 800153a:	d002      	beq.n	8001542 <Int2Str+0x82>
    {
      pos = 0;
 800153c:	2300      	movs	r3, #0
 800153e:	60fb      	str	r3, [r7, #12]
 8001540:	e002      	b.n	8001548 <Int2Str+0x88>
    }
    else
    {
      status++;
 8001542:	68bb      	ldr	r3, [r7, #8]
 8001544:	3301      	adds	r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 10; i++)
 8001548:	697b      	ldr	r3, [r7, #20]
 800154a:	3301      	adds	r3, #1
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	697b      	ldr	r3, [r7, #20]
 8001550:	2b09      	cmp	r3, #9
 8001552:	d9c3      	bls.n	80014dc <Int2Str+0x1c>
    }
  }
}
 8001554:	bf00      	nop
 8001556:	bf00      	nop
 8001558:	371c      	adds	r7, #28
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	3b9aca00 	.word	0x3b9aca00
 8001568:	cccccccd 	.word	0xcccccccd

0800156c <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 800156c:	b480      	push	{r7}
 800156e:	b087      	sub	sp, #28
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	617b      	str	r3, [r7, #20]
 800157a:	2300      	movs	r3, #0
 800157c:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	781b      	ldrb	r3, [r3, #0]
 8001586:	2b30      	cmp	r3, #48	; 0x30
 8001588:	f040 80d7 	bne.w	800173a <Str2Int+0x1ce>
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	3301      	adds	r3, #1
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b78      	cmp	r3, #120	; 0x78
 8001594:	d005      	beq.n	80015a2 <Str2Int+0x36>
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	3301      	adds	r3, #1
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b58      	cmp	r3, #88	; 0x58
 800159e:	f040 80cc 	bne.w	800173a <Str2Int+0x1ce>
  {
    i = 2;
 80015a2:	2302      	movs	r3, #2
 80015a4:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 80015a6:	e057      	b.n	8001658 <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 80015a8:	687a      	ldr	r2, [r7, #4]
 80015aa:	697b      	ldr	r3, [r7, #20]
 80015ac:	4413      	add	r3, r2
 80015ae:	781b      	ldrb	r3, [r3, #0]
 80015b0:	2b40      	cmp	r3, #64	; 0x40
 80015b2:	d905      	bls.n	80015c0 <Str2Int+0x54>
 80015b4:	687a      	ldr	r2, [r7, #4]
 80015b6:	697b      	ldr	r3, [r7, #20]
 80015b8:	4413      	add	r3, r2
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b46      	cmp	r3, #70	; 0x46
 80015be:	d917      	bls.n	80015f0 <Str2Int+0x84>
 80015c0:	687a      	ldr	r2, [r7, #4]
 80015c2:	697b      	ldr	r3, [r7, #20]
 80015c4:	4413      	add	r3, r2
 80015c6:	781b      	ldrb	r3, [r3, #0]
 80015c8:	2b60      	cmp	r3, #96	; 0x60
 80015ca:	d905      	bls.n	80015d8 <Str2Int+0x6c>
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	697b      	ldr	r3, [r7, #20]
 80015d0:	4413      	add	r3, r2
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b66      	cmp	r3, #102	; 0x66
 80015d6:	d90b      	bls.n	80015f0 <Str2Int+0x84>
 80015d8:	687a      	ldr	r2, [r7, #4]
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	4413      	add	r3, r2
 80015de:	781b      	ldrb	r3, [r3, #0]
 80015e0:	2b2f      	cmp	r3, #47	; 0x2f
 80015e2:	d936      	bls.n	8001652 <Str2Int+0xe6>
 80015e4:	687a      	ldr	r2, [r7, #4]
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	4413      	add	r3, r2
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	2b39      	cmp	r3, #57	; 0x39
 80015ee:	d830      	bhi.n	8001652 <Str2Int+0xe6>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	011b      	lsls	r3, r3, #4
 80015f4:	6879      	ldr	r1, [r7, #4]
 80015f6:	697a      	ldr	r2, [r7, #20]
 80015f8:	440a      	add	r2, r1
 80015fa:	7812      	ldrb	r2, [r2, #0]
 80015fc:	2a2f      	cmp	r2, #47	; 0x2f
 80015fe:	d90b      	bls.n	8001618 <Str2Int+0xac>
 8001600:	6879      	ldr	r1, [r7, #4]
 8001602:	697a      	ldr	r2, [r7, #20]
 8001604:	440a      	add	r2, r1
 8001606:	7812      	ldrb	r2, [r2, #0]
 8001608:	2a39      	cmp	r2, #57	; 0x39
 800160a:	d805      	bhi.n	8001618 <Str2Int+0xac>
 800160c:	6879      	ldr	r1, [r7, #4]
 800160e:	697a      	ldr	r2, [r7, #20]
 8001610:	440a      	add	r2, r1
 8001612:	7812      	ldrb	r2, [r2, #0]
 8001614:	3a30      	subs	r2, #48	; 0x30
 8001616:	e016      	b.n	8001646 <Str2Int+0xda>
 8001618:	6879      	ldr	r1, [r7, #4]
 800161a:	697a      	ldr	r2, [r7, #20]
 800161c:	440a      	add	r2, r1
 800161e:	7812      	ldrb	r2, [r2, #0]
 8001620:	2a40      	cmp	r2, #64	; 0x40
 8001622:	d90b      	bls.n	800163c <Str2Int+0xd0>
 8001624:	6879      	ldr	r1, [r7, #4]
 8001626:	697a      	ldr	r2, [r7, #20]
 8001628:	440a      	add	r2, r1
 800162a:	7812      	ldrb	r2, [r2, #0]
 800162c:	2a46      	cmp	r2, #70	; 0x46
 800162e:	d805      	bhi.n	800163c <Str2Int+0xd0>
 8001630:	6879      	ldr	r1, [r7, #4]
 8001632:	697a      	ldr	r2, [r7, #20]
 8001634:	440a      	add	r2, r1
 8001636:	7812      	ldrb	r2, [r2, #0]
 8001638:	3a37      	subs	r2, #55	; 0x37
 800163a:	e004      	b.n	8001646 <Str2Int+0xda>
 800163c:	6879      	ldr	r1, [r7, #4]
 800163e:	697a      	ldr	r2, [r7, #20]
 8001640:	440a      	add	r2, r1
 8001642:	7812      	ldrb	r2, [r2, #0]
 8001644:	3a57      	subs	r2, #87	; 0x57
 8001646:	4413      	add	r3, r2
 8001648:	60fb      	str	r3, [r7, #12]
      {
        /* Return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	3301      	adds	r3, #1
 800164e:	617b      	str	r3, [r7, #20]
 8001650:	e002      	b.n	8001658 <Str2Int+0xec>
        res = 0;
 8001652:	2300      	movs	r3, #0
 8001654:	613b      	str	r3, [r7, #16]
        break;
 8001656:	e008      	b.n	800166a <Str2Int+0xfe>
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	2b0a      	cmp	r3, #10
 800165c:	d805      	bhi.n	800166a <Str2Int+0xfe>
 800165e:	687a      	ldr	r2, [r7, #4]
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	4413      	add	r3, r2
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d19e      	bne.n	80015a8 <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 800166a:	687a      	ldr	r2, [r7, #4]
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	4413      	add	r3, r2
 8001670:	781b      	ldrb	r3, [r3, #0]
 8001672:	2b00      	cmp	r3, #0
 8001674:	d167      	bne.n	8001746 <Str2Int+0x1da>
    {
      *p_intnum = val;
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	68fa      	ldr	r2, [r7, #12]
 800167a:	601a      	str	r2, [r3, #0]
      res = 1;
 800167c:	2301      	movs	r3, #1
 800167e:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 8001680:	e061      	b.n	8001746 <Str2Int+0x1da>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 8001682:	687a      	ldr	r2, [r7, #4]
 8001684:	697b      	ldr	r3, [r7, #20]
 8001686:	4413      	add	r3, r2
 8001688:	781b      	ldrb	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d105      	bne.n	800169a <Str2Int+0x12e>
      {
        *p_intnum = val;
 800168e:	683b      	ldr	r3, [r7, #0]
 8001690:	68fa      	ldr	r2, [r7, #12]
 8001692:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 8001694:	2301      	movs	r3, #1
 8001696:	613b      	str	r3, [r7, #16]
 8001698:	e04c      	b.n	8001734 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 800169a:	687a      	ldr	r2, [r7, #4]
 800169c:	697b      	ldr	r3, [r7, #20]
 800169e:	4413      	add	r3, r2
 80016a0:	781b      	ldrb	r3, [r3, #0]
 80016a2:	2b6b      	cmp	r3, #107	; 0x6b
 80016a4:	d005      	beq.n	80016b2 <Str2Int+0x146>
 80016a6:	687a      	ldr	r2, [r7, #4]
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	4413      	add	r3, r2
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b4b      	cmp	r3, #75	; 0x4b
 80016b0:	d10b      	bne.n	80016ca <Str2Int+0x15e>
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d008      	beq.n	80016ca <Str2Int+0x15e>
      {
        val = val << 10;
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	029b      	lsls	r3, r3, #10
 80016bc:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	68fa      	ldr	r2, [r7, #12]
 80016c2:	601a      	str	r2, [r3, #0]
        res = 1;
 80016c4:	2301      	movs	r3, #1
 80016c6:	613b      	str	r3, [r7, #16]
 80016c8:	e034      	b.n	8001734 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 80016ca:	687a      	ldr	r2, [r7, #4]
 80016cc:	697b      	ldr	r3, [r7, #20]
 80016ce:	4413      	add	r3, r2
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	2b6d      	cmp	r3, #109	; 0x6d
 80016d4:	d005      	beq.n	80016e2 <Str2Int+0x176>
 80016d6:	687a      	ldr	r2, [r7, #4]
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	4413      	add	r3, r2
 80016dc:	781b      	ldrb	r3, [r3, #0]
 80016de:	2b4d      	cmp	r3, #77	; 0x4d
 80016e0:	d10b      	bne.n	80016fa <Str2Int+0x18e>
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d008      	beq.n	80016fa <Str2Int+0x18e>
      {
        val = val << 20;
 80016e8:	68fb      	ldr	r3, [r7, #12]
 80016ea:	051b      	lsls	r3, r3, #20
 80016ec:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	68fa      	ldr	r2, [r7, #12]
 80016f2:	601a      	str	r2, [r3, #0]
        res = 1;
 80016f4:	2301      	movs	r3, #1
 80016f6:	613b      	str	r3, [r7, #16]
 80016f8:	e01c      	b.n	8001734 <Str2Int+0x1c8>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 80016fa:	687a      	ldr	r2, [r7, #4]
 80016fc:	697b      	ldr	r3, [r7, #20]
 80016fe:	4413      	add	r3, r2
 8001700:	781b      	ldrb	r3, [r3, #0]
 8001702:	2b2f      	cmp	r3, #47	; 0x2f
 8001704:	d913      	bls.n	800172e <Str2Int+0x1c2>
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	697b      	ldr	r3, [r7, #20]
 800170a:	4413      	add	r3, r2
 800170c:	781b      	ldrb	r3, [r3, #0]
 800170e:	2b39      	cmp	r3, #57	; 0x39
 8001710:	d80d      	bhi.n	800172e <Str2Int+0x1c2>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 8001712:	68fa      	ldr	r2, [r7, #12]
 8001714:	4613      	mov	r3, r2
 8001716:	009b      	lsls	r3, r3, #2
 8001718:	4413      	add	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4619      	mov	r1, r3
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	4413      	add	r3, r2
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	440b      	add	r3, r1
 8001728:	3b30      	subs	r3, #48	; 0x30
 800172a:	60fb      	str	r3, [r7, #12]
 800172c:	e002      	b.n	8001734 <Str2Int+0x1c8>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 800172e:	2300      	movs	r3, #0
 8001730:	613b      	str	r3, [r7, #16]
        break;
 8001732:	e008      	b.n	8001746 <Str2Int+0x1da>
      }
      i++;
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	3301      	adds	r3, #1
 8001738:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 800173a:	697b      	ldr	r3, [r7, #20]
 800173c:	2b0a      	cmp	r3, #10
 800173e:	d802      	bhi.n	8001746 <Str2Int+0x1da>
 8001740:	693b      	ldr	r3, [r7, #16]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d19d      	bne.n	8001682 <Str2Int+0x116>
    }
  }

  return res;
 8001746:	693b      	ldr	r3, [r7, #16]
}
 8001748:	4618      	mov	r0, r3
 800174a:	371c      	adds	r7, #28
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr

08001754 <Serial_PutString>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */
void Serial_PutString(uint8_t *p_string)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b084      	sub	sp, #16
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  uint16_t length = 0;
 800175c:	2300      	movs	r3, #0
 800175e:	81fb      	strh	r3, [r7, #14]

  while (p_string[length] != '\0')
 8001760:	e002      	b.n	8001768 <Serial_PutString+0x14>
  {
    length++;
 8001762:	89fb      	ldrh	r3, [r7, #14]
 8001764:	3301      	adds	r3, #1
 8001766:	81fb      	strh	r3, [r7, #14]
  while (p_string[length] != '\0')
 8001768:	89fb      	ldrh	r3, [r7, #14]
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	4413      	add	r3, r2
 800176e:	781b      	ldrb	r3, [r3, #0]
 8001770:	2b00      	cmp	r3, #0
 8001772:	d1f6      	bne.n	8001762 <Serial_PutString+0xe>
  }
  HAL_UART_Transmit(&huart3, p_string, length, TX_TIMEOUT);
 8001774:	89fa      	ldrh	r2, [r7, #14]
 8001776:	2364      	movs	r3, #100	; 0x64
 8001778:	6879      	ldr	r1, [r7, #4]
 800177a:	4803      	ldr	r0, [pc, #12]	; (8001788 <Serial_PutString+0x34>)
 800177c:	f003 f8df 	bl	800493e <HAL_UART_Transmit>
}
 8001780:	bf00      	nop
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20001a18 	.word	0x20001a18

0800178c <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte( uint8_t param )
{
 800178c:	b580      	push	{r7, lr}
 800178e:	b082      	sub	sp, #8
 8001790:	af00      	add	r7, sp, #0
 8001792:	4603      	mov	r3, r0
 8001794:	71fb      	strb	r3, [r7, #7]
  /* May be timeouted... */
  if ( huart3.gState == HAL_UART_STATE_TIMEOUT )
 8001796:	4b0a      	ldr	r3, [pc, #40]	; (80017c0 <Serial_PutByte+0x34>)
 8001798:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800179c:	b2db      	uxtb	r3, r3
 800179e:	2ba0      	cmp	r3, #160	; 0xa0
 80017a0:	d103      	bne.n	80017aa <Serial_PutByte+0x1e>
  {
	  huart3.gState = HAL_UART_STATE_READY;
 80017a2:	4b07      	ldr	r3, [pc, #28]	; (80017c0 <Serial_PutByte+0x34>)
 80017a4:	2220      	movs	r2, #32
 80017a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  }
  return HAL_UART_Transmit(&huart3, &param, 1, TX_TIMEOUT);
 80017aa:	1df9      	adds	r1, r7, #7
 80017ac:	2364      	movs	r3, #100	; 0x64
 80017ae:	2201      	movs	r2, #1
 80017b0:	4803      	ldr	r0, [pc, #12]	; (80017c0 <Serial_PutByte+0x34>)
 80017b2:	f003 f8c4 	bl	800493e <HAL_UART_Transmit>
 80017b6:	4603      	mov	r3, r0
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	3708      	adds	r7, #8
 80017bc:	46bd      	mov	sp, r7
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20001a18 	.word	0x20001a18

080017c4 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
  HAL_FLASH_Unlock(); 
 80017c8:	f001 fe50 	bl	800346c <HAL_FLASH_Unlock>

  /* Clear pending flags (if any) */  
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | 
 80017cc:	4b02      	ldr	r3, [pc, #8]	; (80017d8 <FLASH_If_Init+0x14>)
 80017ce:	22f3      	movs	r2, #243	; 0xf3
 80017d0:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR);
}
 80017d2:	bf00      	nop
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	40023c00 	.word	0x40023c00

080017dc <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
uint32_t FLASH_If_Erase(uint32_t StartSector)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b08a      	sub	sp, #40	; 0x28
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t UserStartSector;
  uint32_t SectorError;
  FLASH_EraseInitTypeDef pEraseInit;

  /* Unlock the Flash to enable the flash control register access *************/ 
  FLASH_If_Init();
 80017e4:	f7ff ffee 	bl	80017c4 <FLASH_If_Init>
  
  /* Get the sector where start the user flash area */
  UserStartSector = GetSector(APPLICATION_ADDRESS);
 80017e8:	480e      	ldr	r0, [pc, #56]	; (8001824 <FLASH_If_Erase+0x48>)
 80017ea:	f000 f85d 	bl	80018a8 <GetSector>
 80017ee:	6278      	str	r0, [r7, #36]	; 0x24
  
  pEraseInit.TypeErase = TYPEERASE_SECTORS;
 80017f0:	2300      	movs	r3, #0
 80017f2:	60fb      	str	r3, [r7, #12]
  pEraseInit.Sector = UserStartSector;
 80017f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017f6:	617b      	str	r3, [r7, #20]
  pEraseInit.NbSectors = 6;
 80017f8:	2306      	movs	r3, #6
 80017fa:	61bb      	str	r3, [r7, #24]
  pEraseInit.VoltageRange = VOLTAGE_RANGE_3;
 80017fc:	2302      	movs	r3, #2
 80017fe:	61fb      	str	r3, [r7, #28]
    
  if (HAL_FLASHEx_Erase(&pEraseInit, &SectorError) != HAL_OK)
 8001800:	f107 0220 	add.w	r2, r7, #32
 8001804:	f107 030c 	add.w	r3, r7, #12
 8001808:	4611      	mov	r1, r2
 800180a:	4618      	mov	r0, r3
 800180c:	f001 ff90 	bl	8003730 <HAL_FLASHEx_Erase>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d001      	beq.n	800181a <FLASH_If_Erase+0x3e>
  {
     /* Error occurred while page erase */
     return (1);
 8001816:	2301      	movs	r3, #1
 8001818:	e000      	b.n	800181c <FLASH_If_Erase+0x40>
  }
  
  return (0);
 800181a:	2300      	movs	r3, #0
}
 800181c:	4618      	mov	r0, r3
 800181e:	3728      	adds	r7, #40	; 0x28
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	08020000 	.word	0x08020000

08001828 <FLASH_If_Write>:
  * @retval 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t FlashAddress, uint32_t* Data ,uint32_t DataLength)
{
 8001828:	b5b0      	push	{r4, r5, r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	60f8      	str	r0, [r7, #12]
 8001830:	60b9      	str	r1, [r7, #8]
 8001832:	607a      	str	r2, [r7, #4]
  uint32_t i = 0;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]

  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e024      	b.n	8001888 <FLASH_If_Write+0x60>
  {
    /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
       be done by word */ 
    if (HAL_FLASH_Program(TYPEPROGRAM_WORD, FlashAddress, *(uint32_t*)(Data+i)) == HAL_OK)      
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	009b      	lsls	r3, r3, #2
 8001842:	68ba      	ldr	r2, [r7, #8]
 8001844:	4413      	add	r3, r2
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2200      	movs	r2, #0
 800184a:	461c      	mov	r4, r3
 800184c:	4615      	mov	r5, r2
 800184e:	4622      	mov	r2, r4
 8001850:	462b      	mov	r3, r5
 8001852:	68f9      	ldr	r1, [r7, #12]
 8001854:	2002      	movs	r0, #2
 8001856:	f001 fdb5 	bl	80033c4 <HAL_FLASH_Program>
 800185a:	4603      	mov	r3, r0
 800185c:	2b00      	cmp	r3, #0
 800185e:	d10e      	bne.n	800187e <FLASH_If_Write+0x56>
    {
     /* Check the written value */
      if (*(uint32_t*)FlashAddress != *(uint32_t*)(Data+i))
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	68b9      	ldr	r1, [r7, #8]
 800186a:	440b      	add	r3, r1
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	429a      	cmp	r2, r3
 8001870:	d001      	beq.n	8001876 <FLASH_If_Write+0x4e>
      {
        /* Flash content doesn't match SRAM content */
        return(FLASHIF_WRITINGCTRL_ERROR);
 8001872:	2302      	movs	r3, #2
 8001874:	e011      	b.n	800189a <FLASH_If_Write+0x72>
      }
      /* Increment FLASH destination address */
      FlashAddress += 4;
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	3304      	adds	r3, #4
 800187a:	60fb      	str	r3, [r7, #12]
 800187c:	e001      	b.n	8001882 <FLASH_If_Write+0x5a>
    }
    else
    {
      /* Error occurred while writing data in Flash memory */
      return (FLASHIF_WRITING_ERROR);
 800187e:	2303      	movs	r3, #3
 8001880:	e00b      	b.n	800189a <FLASH_If_Write+0x72>
  for (i = 0; (i < DataLength) && (FlashAddress <= (USER_FLASH_END_ADDRESS-4)); i++)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	3301      	adds	r3, #1
 8001886:	617b      	str	r3, [r7, #20]
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	429a      	cmp	r2, r3
 800188e:	d203      	bcs.n	8001898 <FLASH_If_Write+0x70>
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <FLASH_If_Write+0x7c>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d9d2      	bls.n	800183e <FLASH_If_Write+0x16>
    }
  }

  return (FLASHIF_OK);
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bdb0      	pop	{r4, r5, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	080ffffb 	.word	0x080ffffb

080018a8 <GetSector>:
  * @brief  Gets the sector of a given address
  * @param  Address: Flash address
  * @retval The sector of a given address
  */
static uint32_t GetSector(uint32_t Address)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b085      	sub	sp, #20
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 80018b0:	2300      	movs	r3, #0
 80018b2:	60fb      	str	r3, [r7, #12]
  
  if((Address < ADDR_FLASH_SECTOR_1) && (Address >= ADDR_FLASH_SECTOR_0))
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	4a2a      	ldr	r2, [pc, #168]	; (8001960 <GetSector+0xb8>)
 80018b8:	4293      	cmp	r3, r2
 80018ba:	d206      	bcs.n	80018ca <GetSector+0x22>
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80018c2:	d302      	bcc.n	80018ca <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;  
 80018c4:	2300      	movs	r3, #0
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	e043      	b.n	8001952 <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_2) && (Address >= ADDR_FLASH_SECTOR_1))
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4a25      	ldr	r2, [pc, #148]	; (8001964 <GetSector+0xbc>)
 80018ce:	4293      	cmp	r3, r2
 80018d0:	d806      	bhi.n	80018e0 <GetSector+0x38>
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	4a22      	ldr	r2, [pc, #136]	; (8001960 <GetSector+0xb8>)
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d302      	bcc.n	80018e0 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;  
 80018da:	2301      	movs	r3, #1
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	e038      	b.n	8001952 <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_3) && (Address >= ADDR_FLASH_SECTOR_2))
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	4a21      	ldr	r2, [pc, #132]	; (8001968 <GetSector+0xc0>)
 80018e4:	4293      	cmp	r3, r2
 80018e6:	d206      	bcs.n	80018f6 <GetSector+0x4e>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	4a1e      	ldr	r2, [pc, #120]	; (8001964 <GetSector+0xbc>)
 80018ec:	4293      	cmp	r3, r2
 80018ee:	d902      	bls.n	80018f6 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;  
 80018f0:	2302      	movs	r3, #2
 80018f2:	60fb      	str	r3, [r7, #12]
 80018f4:	e02d      	b.n	8001952 <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_4) && (Address >= ADDR_FLASH_SECTOR_3))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4a1c      	ldr	r2, [pc, #112]	; (800196c <GetSector+0xc4>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d806      	bhi.n	800190c <GetSector+0x64>
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a19      	ldr	r2, [pc, #100]	; (8001968 <GetSector+0xc0>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d302      	bcc.n	800190c <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;  
 8001906:	2303      	movs	r3, #3
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	e022      	b.n	8001952 <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_5) && (Address >= ADDR_FLASH_SECTOR_4))
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a18      	ldr	r2, [pc, #96]	; (8001970 <GetSector+0xc8>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d806      	bhi.n	8001922 <GetSector+0x7a>
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a15      	ldr	r2, [pc, #84]	; (800196c <GetSector+0xc4>)
 8001918:	4293      	cmp	r3, r2
 800191a:	d902      	bls.n	8001922 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;  
 800191c:	2304      	movs	r3, #4
 800191e:	60fb      	str	r3, [r7, #12]
 8001920:	e017      	b.n	8001952 <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_6) && (Address >= ADDR_FLASH_SECTOR_5))
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	4a13      	ldr	r2, [pc, #76]	; (8001974 <GetSector+0xcc>)
 8001926:	4293      	cmp	r3, r2
 8001928:	d806      	bhi.n	8001938 <GetSector+0x90>
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	4a10      	ldr	r2, [pc, #64]	; (8001970 <GetSector+0xc8>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d902      	bls.n	8001938 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;  
 8001932:	2305      	movs	r3, #5
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	e00c      	b.n	8001952 <GetSector+0xaa>
  }
  else if((Address < ADDR_FLASH_SECTOR_7) && (Address >= ADDR_FLASH_SECTOR_6))
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a0f      	ldr	r2, [pc, #60]	; (8001978 <GetSector+0xd0>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d806      	bhi.n	800194e <GetSector+0xa6>
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	4a0c      	ldr	r2, [pc, #48]	; (8001974 <GetSector+0xcc>)
 8001944:	4293      	cmp	r3, r2
 8001946:	d902      	bls.n	800194e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;  
 8001948:	2306      	movs	r3, #6
 800194a:	60fb      	str	r3, [r7, #12]
 800194c:	e001      	b.n	8001952 <GetSector+0xaa>
  }
  else /*(Address < FLASH_END_ADDR) && (Address >= ADDR_FLASH_SECTOR_11))*/
  {
    sector = FLASH_SECTOR_7;  
 800194e:	2307      	movs	r3, #7
 8001950:	60fb      	str	r3, [r7, #12]
  }
  return sector;
 8001952:	68fb      	ldr	r3, [r7, #12]
}
 8001954:	4618      	mov	r0, r3
 8001956:	3714      	adds	r7, #20
 8001958:	46bd      	mov	sp, r7
 800195a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195e:	4770      	bx	lr
 8001960:	08008000 	.word	0x08008000
 8001964:	0800ffff 	.word	0x0800ffff
 8001968:	08018000 	.word	0x08018000
 800196c:	0801ffff 	.word	0x0801ffff
 8001970:	0803ffff 	.word	0x0803ffff
 8001974:	0807ffff 	.word	0x0807ffff
 8001978:	080bffff 	.word	0x080bffff

0800197c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001980:	f000 ff8a 	bl	8002898 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001984:	f000 f814 	bl	80019b0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001988:	f000 f922 	bl	8001bd0 <MX_GPIO_Init>
  MX_ETH_Init();
 800198c:	f000 f87a 	bl	8001a84 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001990:	f000 f8c6 	bl	8001b20 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8001994:	f000 f8ee 	bl	8001b74 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  CliInit(&huart3);
 8001998:	4804      	ldr	r0, [pc, #16]	; (80019ac <main+0x30>)
 800199a:	f7fe ff9d 	bl	80008d8 <CliInit>
  FLASH_If_Init();
 800199e:	f7ff ff11 	bl	80017c4 <FLASH_If_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  CliDo(&huart3);
 80019a2:	4802      	ldr	r0, [pc, #8]	; (80019ac <main+0x30>)
 80019a4:	f7fe ffc8 	bl	8000938 <CliDo>
 80019a8:	e7fb      	b.n	80019a2 <main+0x26>
 80019aa:	bf00      	nop
 80019ac:	20001a18 	.word	0x20001a18

080019b0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b094      	sub	sp, #80	; 0x50
 80019b4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80019b6:	f107 0320 	add.w	r3, r7, #32
 80019ba:	2230      	movs	r2, #48	; 0x30
 80019bc:	2100      	movs	r1, #0
 80019be:	4618      	mov	r0, r3
 80019c0:	f004 fbd8 	bl	8006174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80019c4:	f107 030c 	add.w	r3, r7, #12
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
 80019cc:	605a      	str	r2, [r3, #4]
 80019ce:	609a      	str	r2, [r3, #8]
 80019d0:	60da      	str	r2, [r3, #12]
 80019d2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80019d4:	2300      	movs	r3, #0
 80019d6:	60bb      	str	r3, [r7, #8]
 80019d8:	4b28      	ldr	r3, [pc, #160]	; (8001a7c <SystemClock_Config+0xcc>)
 80019da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019dc:	4a27      	ldr	r2, [pc, #156]	; (8001a7c <SystemClock_Config+0xcc>)
 80019de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019e2:	6413      	str	r3, [r2, #64]	; 0x40
 80019e4:	4b25      	ldr	r3, [pc, #148]	; (8001a7c <SystemClock_Config+0xcc>)
 80019e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ec:	60bb      	str	r3, [r7, #8]
 80019ee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80019f0:	2300      	movs	r3, #0
 80019f2:	607b      	str	r3, [r7, #4]
 80019f4:	4b22      	ldr	r3, [pc, #136]	; (8001a80 <SystemClock_Config+0xd0>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a21      	ldr	r2, [pc, #132]	; (8001a80 <SystemClock_Config+0xd0>)
 80019fa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b1f      	ldr	r3, [pc, #124]	; (8001a80 <SystemClock_Config+0xd0>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001a08:	607b      	str	r3, [r7, #4]
 8001a0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001a0c:	2301      	movs	r3, #1
 8001a0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001a10:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001a14:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a16:	2302      	movs	r3, #2
 8001a18:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a1a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001a1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001a20:	2304      	movs	r3, #4
 8001a22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001a24:	23a8      	movs	r3, #168	; 0xa8
 8001a26:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001a28:	2302      	movs	r3, #2
 8001a2a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001a2c:	2307      	movs	r3, #7
 8001a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a30:	f107 0320 	add.w	r3, r7, #32
 8001a34:	4618      	mov	r0, r3
 8001a36:	f002 fa9d 	bl	8003f74 <HAL_RCC_OscConfig>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d001      	beq.n	8001a44 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001a40:	f000 f98c 	bl	8001d5c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a44:	230f      	movs	r3, #15
 8001a46:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a48:	2302      	movs	r3, #2
 8001a4a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001a50:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001a54:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001a56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001a5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001a5c:	f107 030c 	add.w	r3, r7, #12
 8001a60:	2105      	movs	r1, #5
 8001a62:	4618      	mov	r0, r3
 8001a64:	f002 fcfe 	bl	8004464 <HAL_RCC_ClockConfig>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d001      	beq.n	8001a72 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001a6e:	f000 f975 	bl	8001d5c <Error_Handler>
  }
}
 8001a72:	bf00      	nop
 8001a74:	3750      	adds	r7, #80	; 0x50
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	40023800 	.word	0x40023800
 8001a80:	40007000 	.word	0x40007000

08001a84 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8001a84:	b580      	push	{r7, lr}
 8001a86:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001a88:	4b1f      	ldr	r3, [pc, #124]	; (8001b08 <MX_ETH_Init+0x84>)
 8001a8a:	4a20      	ldr	r2, [pc, #128]	; (8001b0c <MX_ETH_Init+0x88>)
 8001a8c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8001a8e:	4b20      	ldr	r3, [pc, #128]	; (8001b10 <MX_ETH_Init+0x8c>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001a94:	4b1e      	ldr	r3, [pc, #120]	; (8001b10 <MX_ETH_Init+0x8c>)
 8001a96:	2280      	movs	r2, #128	; 0x80
 8001a98:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001a9a:	4b1d      	ldr	r3, [pc, #116]	; (8001b10 <MX_ETH_Init+0x8c>)
 8001a9c:	22e1      	movs	r2, #225	; 0xe1
 8001a9e:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8001aa0:	4b1b      	ldr	r3, [pc, #108]	; (8001b10 <MX_ETH_Init+0x8c>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001aa6:	4b1a      	ldr	r3, [pc, #104]	; (8001b10 <MX_ETH_Init+0x8c>)
 8001aa8:	2200      	movs	r2, #0
 8001aaa:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001aac:	4b18      	ldr	r3, [pc, #96]	; (8001b10 <MX_ETH_Init+0x8c>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <MX_ETH_Init+0x84>)
 8001ab4:	4a16      	ldr	r2, [pc, #88]	; (8001b10 <MX_ETH_Init+0x8c>)
 8001ab6:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8001ab8:	4b13      	ldr	r3, [pc, #76]	; (8001b08 <MX_ETH_Init+0x84>)
 8001aba:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001abe:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001ac0:	4b11      	ldr	r3, [pc, #68]	; (8001b08 <MX_ETH_Init+0x84>)
 8001ac2:	4a14      	ldr	r2, [pc, #80]	; (8001b14 <MX_ETH_Init+0x90>)
 8001ac4:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8001ac6:	4b10      	ldr	r3, [pc, #64]	; (8001b08 <MX_ETH_Init+0x84>)
 8001ac8:	4a13      	ldr	r2, [pc, #76]	; (8001b18 <MX_ETH_Init+0x94>)
 8001aca:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001acc:	4b0e      	ldr	r3, [pc, #56]	; (8001b08 <MX_ETH_Init+0x84>)
 8001ace:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001ad2:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001ad4:	480c      	ldr	r0, [pc, #48]	; (8001b08 <MX_ETH_Init+0x84>)
 8001ad6:	f001 f94d 	bl	8002d74 <HAL_ETH_Init>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d001      	beq.n	8001ae4 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001ae0:	f000 f93c 	bl	8001d5c <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001ae4:	2238      	movs	r2, #56	; 0x38
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	480c      	ldr	r0, [pc, #48]	; (8001b1c <MX_ETH_Init+0x98>)
 8001aea:	f004 fb43 	bl	8006174 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001aee:	4b0b      	ldr	r3, [pc, #44]	; (8001b1c <MX_ETH_Init+0x98>)
 8001af0:	2221      	movs	r2, #33	; 0x21
 8001af2:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001af4:	4b09      	ldr	r3, [pc, #36]	; (8001b1c <MX_ETH_Init+0x98>)
 8001af6:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8001afa:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001afc:	4b07      	ldr	r3, [pc, #28]	; (8001b1c <MX_ETH_Init+0x98>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001b02:	bf00      	nop
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	20001968 	.word	0x20001968
 8001b0c:	40028000 	.word	0x40028000
 8001b10:	20001f68 	.word	0x20001f68
 8001b14:	200018c8 	.word	0x200018c8
 8001b18:	20001828 	.word	0x20001828
 8001b1c:	200017f0 	.word	0x200017f0

08001b20 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b24:	4b11      	ldr	r3, [pc, #68]	; (8001b6c <MX_USART3_UART_Init+0x4c>)
 8001b26:	4a12      	ldr	r2, [pc, #72]	; (8001b70 <MX_USART3_UART_Init+0x50>)
 8001b28:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001b2a:	4b10      	ldr	r3, [pc, #64]	; (8001b6c <MX_USART3_UART_Init+0x4c>)
 8001b2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001b30:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b32:	4b0e      	ldr	r3, [pc, #56]	; (8001b6c <MX_USART3_UART_Init+0x4c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b38:	4b0c      	ldr	r3, [pc, #48]	; (8001b6c <MX_USART3_UART_Init+0x4c>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b3e:	4b0b      	ldr	r3, [pc, #44]	; (8001b6c <MX_USART3_UART_Init+0x4c>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b44:	4b09      	ldr	r3, [pc, #36]	; (8001b6c <MX_USART3_UART_Init+0x4c>)
 8001b46:	220c      	movs	r2, #12
 8001b48:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b4a:	4b08      	ldr	r3, [pc, #32]	; (8001b6c <MX_USART3_UART_Init+0x4c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b50:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <MX_USART3_UART_Init+0x4c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b56:	4805      	ldr	r0, [pc, #20]	; (8001b6c <MX_USART3_UART_Init+0x4c>)
 8001b58:	f002 fea4 	bl	80048a4 <HAL_UART_Init>
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d001      	beq.n	8001b66 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b62:	f000 f8fb 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b66:	bf00      	nop
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	20001a18 	.word	0x20001a18
 8001b70:	40004800 	.word	0x40004800

08001b74 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8001b74:	b580      	push	{r7, lr}
 8001b76:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001b78:	4b14      	ldr	r3, [pc, #80]	; (8001bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b7a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001b7e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8001b80:	4b12      	ldr	r3, [pc, #72]	; (8001bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b82:	2204      	movs	r2, #4
 8001b84:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001b86:	4b11      	ldr	r3, [pc, #68]	; (8001bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b88:	2202      	movs	r2, #2
 8001b8a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001b8c:	4b0f      	ldr	r3, [pc, #60]	; (8001bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001b92:	4b0e      	ldr	r3, [pc, #56]	; (8001bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b94:	2202      	movs	r2, #2
 8001b96:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001b98:	4b0c      	ldr	r3, [pc, #48]	; (8001bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001b9e:	4b0b      	ldr	r3, [pc, #44]	; (8001bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001ba4:	4b09      	ldr	r3, [pc, #36]	; (8001bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ba6:	2200      	movs	r2, #0
 8001ba8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001baa:	4b08      	ldr	r3, [pc, #32]	; (8001bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001bb0:	4b06      	ldr	r3, [pc, #24]	; (8001bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bb2:	2200      	movs	r2, #0
 8001bb4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001bb6:	4805      	ldr	r0, [pc, #20]	; (8001bcc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001bb8:	f002 f8bf 	bl	8003d3a <HAL_PCD_Init>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d001      	beq.n	8001bc6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001bc2:	f000 f8cb 	bl	8001d5c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001bc6:	bf00      	nop
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	20001a5c 	.word	0x20001a5c

08001bd0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b08c      	sub	sp, #48	; 0x30
 8001bd4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bd6:	f107 031c 	add.w	r3, r7, #28
 8001bda:	2200      	movs	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]
 8001bde:	605a      	str	r2, [r3, #4]
 8001be0:	609a      	str	r2, [r3, #8]
 8001be2:	60da      	str	r2, [r3, #12]
 8001be4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
 8001bea:	4b4c      	ldr	r3, [pc, #304]	; (8001d1c <MX_GPIO_Init+0x14c>)
 8001bec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bee:	4a4b      	ldr	r2, [pc, #300]	; (8001d1c <MX_GPIO_Init+0x14c>)
 8001bf0:	f043 0304 	orr.w	r3, r3, #4
 8001bf4:	6313      	str	r3, [r2, #48]	; 0x30
 8001bf6:	4b49      	ldr	r3, [pc, #292]	; (8001d1c <MX_GPIO_Init+0x14c>)
 8001bf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfa:	f003 0304 	and.w	r3, r3, #4
 8001bfe:	61bb      	str	r3, [r7, #24]
 8001c00:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001c02:	2300      	movs	r3, #0
 8001c04:	617b      	str	r3, [r7, #20]
 8001c06:	4b45      	ldr	r3, [pc, #276]	; (8001d1c <MX_GPIO_Init+0x14c>)
 8001c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c0a:	4a44      	ldr	r2, [pc, #272]	; (8001d1c <MX_GPIO_Init+0x14c>)
 8001c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001c10:	6313      	str	r3, [r2, #48]	; 0x30
 8001c12:	4b42      	ldr	r3, [pc, #264]	; (8001d1c <MX_GPIO_Init+0x14c>)
 8001c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c1a:	617b      	str	r3, [r7, #20]
 8001c1c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
 8001c22:	4b3e      	ldr	r3, [pc, #248]	; (8001d1c <MX_GPIO_Init+0x14c>)
 8001c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c26:	4a3d      	ldr	r2, [pc, #244]	; (8001d1c <MX_GPIO_Init+0x14c>)
 8001c28:	f043 0301 	orr.w	r3, r3, #1
 8001c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8001c2e:	4b3b      	ldr	r3, [pc, #236]	; (8001d1c <MX_GPIO_Init+0x14c>)
 8001c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c32:	f003 0301 	and.w	r3, r3, #1
 8001c36:	613b      	str	r3, [r7, #16]
 8001c38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	60fb      	str	r3, [r7, #12]
 8001c3e:	4b37      	ldr	r3, [pc, #220]	; (8001d1c <MX_GPIO_Init+0x14c>)
 8001c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c42:	4a36      	ldr	r2, [pc, #216]	; (8001d1c <MX_GPIO_Init+0x14c>)
 8001c44:	f043 0302 	orr.w	r3, r3, #2
 8001c48:	6313      	str	r3, [r2, #48]	; 0x30
 8001c4a:	4b34      	ldr	r3, [pc, #208]	; (8001d1c <MX_GPIO_Init+0x14c>)
 8001c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c4e:	f003 0302 	and.w	r3, r3, #2
 8001c52:	60fb      	str	r3, [r7, #12]
 8001c54:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c56:	2300      	movs	r3, #0
 8001c58:	60bb      	str	r3, [r7, #8]
 8001c5a:	4b30      	ldr	r3, [pc, #192]	; (8001d1c <MX_GPIO_Init+0x14c>)
 8001c5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c5e:	4a2f      	ldr	r2, [pc, #188]	; (8001d1c <MX_GPIO_Init+0x14c>)
 8001c60:	f043 0308 	orr.w	r3, r3, #8
 8001c64:	6313      	str	r3, [r2, #48]	; 0x30
 8001c66:	4b2d      	ldr	r3, [pc, #180]	; (8001d1c <MX_GPIO_Init+0x14c>)
 8001c68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c6a:	f003 0308 	and.w	r3, r3, #8
 8001c6e:	60bb      	str	r3, [r7, #8]
 8001c70:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001c72:	2300      	movs	r3, #0
 8001c74:	607b      	str	r3, [r7, #4]
 8001c76:	4b29      	ldr	r3, [pc, #164]	; (8001d1c <MX_GPIO_Init+0x14c>)
 8001c78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7a:	4a28      	ldr	r2, [pc, #160]	; (8001d1c <MX_GPIO_Init+0x14c>)
 8001c7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001c80:	6313      	str	r3, [r2, #48]	; 0x30
 8001c82:	4b26      	ldr	r3, [pc, #152]	; (8001d1c <MX_GPIO_Init+0x14c>)
 8001c84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8a:	607b      	str	r3, [r7, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f244 0181 	movw	r1, #16513	; 0x4081
 8001c94:	4822      	ldr	r0, [pc, #136]	; (8001d20 <MX_GPIO_Init+0x150>)
 8001c96:	f002 f837 	bl	8003d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	2140      	movs	r1, #64	; 0x40
 8001c9e:	4821      	ldr	r0, [pc, #132]	; (8001d24 <MX_GPIO_Init+0x154>)
 8001ca0:	f002 f832 	bl	8003d08 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8001ca4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ca8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001caa:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8001cb4:	f107 031c 	add.w	r3, r7, #28
 8001cb8:	4619      	mov	r1, r3
 8001cba:	481b      	ldr	r0, [pc, #108]	; (8001d28 <MX_GPIO_Init+0x158>)
 8001cbc:	f001 fe78 	bl	80039b0 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001cc0:	f244 0381 	movw	r3, #16513	; 0x4081
 8001cc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cd2:	f107 031c 	add.w	r3, r7, #28
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4811      	ldr	r0, [pc, #68]	; (8001d20 <MX_GPIO_Init+0x150>)
 8001cda:	f001 fe69 	bl	80039b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001cde:	2340      	movs	r3, #64	; 0x40
 8001ce0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ce6:	2300      	movs	r3, #0
 8001ce8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001cea:	2300      	movs	r3, #0
 8001cec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001cee:	f107 031c 	add.w	r3, r7, #28
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	480b      	ldr	r0, [pc, #44]	; (8001d24 <MX_GPIO_Init+0x154>)
 8001cf6:	f001 fe5b 	bl	80039b0 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001cfa:	2380      	movs	r3, #128	; 0x80
 8001cfc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d02:	2300      	movs	r3, #0
 8001d04:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001d06:	f107 031c 	add.w	r3, r7, #28
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4805      	ldr	r0, [pc, #20]	; (8001d24 <MX_GPIO_Init+0x154>)
 8001d0e:	f001 fe4f 	bl	80039b0 <HAL_GPIO_Init>

}
 8001d12:	bf00      	nop
 8001d14:	3730      	adds	r7, #48	; 0x30
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}
 8001d1a:	bf00      	nop
 8001d1c:	40023800 	.word	0x40023800
 8001d20:	40020400 	.word	0x40020400
 8001d24:	40021800 	.word	0x40021800
 8001d28:	40020800 	.word	0x40020800

08001d2c <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8001d2c:	b580      	push	{r7, lr}
 8001d2e:	b082      	sub	sp, #8
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
	if(HAL_UART_Transmit(&huart3, (uint8_t *)&ch, 1, 10) != HAL_OK)
 8001d34:	1d39      	adds	r1, r7, #4
 8001d36:	230a      	movs	r3, #10
 8001d38:	2201      	movs	r2, #1
 8001d3a:	4807      	ldr	r0, [pc, #28]	; (8001d58 <__io_putchar+0x2c>)
 8001d3c:	f002 fdff 	bl	800493e <HAL_UART_Transmit>
 8001d40:	4603      	mov	r3, r0
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d002      	beq.n	8001d4c <__io_putchar+0x20>
		return -1;
 8001d46:	f04f 33ff 	mov.w	r3, #4294967295
 8001d4a:	e000      	b.n	8001d4e <__io_putchar+0x22>
	return ch;
 8001d4c:	687b      	ldr	r3, [r7, #4]
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	20001a18 	.word	0x20001a18

08001d5c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d5c:	b480      	push	{r7}
 8001d5e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d60:	b672      	cpsid	i
}
 8001d62:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001d64:	e7fe      	b.n	8001d64 <Error_Handler+0x8>
	...

08001d68 <SerialDownload>:
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void SerialDownload(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b084      	sub	sp, #16
 8001d6c:	af00      	add	r7, sp, #0
  uint8_t number[11] = {0};
 8001d6e:	2300      	movs	r3, #0
 8001d70:	607b      	str	r3, [r7, #4]
 8001d72:	f107 0308 	add.w	r3, r7, #8
 8001d76:	2200      	movs	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
 8001d7a:	f8c3 2003 	str.w	r2, [r3, #3]
  uint32_t size = 0;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	603b      	str	r3, [r7, #0]
  COM_StatusTypeDef result;

  Serial_PutString((uint8_t *)"Waiting for the file to be sent ... (press 'a' to abort)\n\r");
 8001d82:	4821      	ldr	r0, [pc, #132]	; (8001e08 <SerialDownload+0xa0>)
 8001d84:	f7ff fce6 	bl	8001754 <Serial_PutString>
  result = Ymodem_Receive( &size );
 8001d88:	463b      	mov	r3, r7
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	f000 fc30 	bl	80025f0 <Ymodem_Receive>
 8001d90:	4603      	mov	r3, r0
 8001d92:	73fb      	strb	r3, [r7, #15]
  if (result == COM_OK)
 8001d94:	7bfb      	ldrb	r3, [r7, #15]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d119      	bne.n	8001dce <SerialDownload+0x66>
  {
    Serial_PutString((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 8001d9a:	481c      	ldr	r0, [pc, #112]	; (8001e0c <SerialDownload+0xa4>)
 8001d9c:	f7ff fcda 	bl	8001754 <Serial_PutString>
    Serial_PutString(aFileName);
 8001da0:	481b      	ldr	r0, [pc, #108]	; (8001e10 <SerialDownload+0xa8>)
 8001da2:	f7ff fcd7 	bl	8001754 <Serial_PutString>
    Int2Str(number, size);
 8001da6:	683a      	ldr	r2, [r7, #0]
 8001da8:	1d3b      	adds	r3, r7, #4
 8001daa:	4611      	mov	r1, r2
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fb87 	bl	80014c0 <Int2Str>
    Serial_PutString((uint8_t *)"\n\r Size: ");
 8001db2:	4818      	ldr	r0, [pc, #96]	; (8001e14 <SerialDownload+0xac>)
 8001db4:	f7ff fcce 	bl	8001754 <Serial_PutString>
    Serial_PutString(number);
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7ff fcca 	bl	8001754 <Serial_PutString>
    Serial_PutString((uint8_t *)" Bytes\r\n");
 8001dc0:	4815      	ldr	r0, [pc, #84]	; (8001e18 <SerialDownload+0xb0>)
 8001dc2:	f7ff fcc7 	bl	8001754 <Serial_PutString>
    Serial_PutString((uint8_t *)"-------------------\n");
 8001dc6:	4815      	ldr	r0, [pc, #84]	; (8001e1c <SerialDownload+0xb4>)
 8001dc8:	f7ff fcc4 	bl	8001754 <Serial_PutString>
  }
  else
  {
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
  }
}
 8001dcc:	e017      	b.n	8001dfe <SerialDownload+0x96>
  else if (result == COM_LIMIT)
 8001dce:	7bfb      	ldrb	r3, [r7, #15]
 8001dd0:	2b05      	cmp	r3, #5
 8001dd2:	d103      	bne.n	8001ddc <SerialDownload+0x74>
    Serial_PutString((uint8_t *)"\n\n\rThe image size is higher than the allowed space memory!\n\r");
 8001dd4:	4812      	ldr	r0, [pc, #72]	; (8001e20 <SerialDownload+0xb8>)
 8001dd6:	f7ff fcbd 	bl	8001754 <Serial_PutString>
}
 8001dda:	e010      	b.n	8001dfe <SerialDownload+0x96>
  else if (result == COM_DATA)
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	2b04      	cmp	r3, #4
 8001de0:	d103      	bne.n	8001dea <SerialDownload+0x82>
    Serial_PutString((uint8_t *)"\n\n\rVerification failed!\n\r");
 8001de2:	4810      	ldr	r0, [pc, #64]	; (8001e24 <SerialDownload+0xbc>)
 8001de4:	f7ff fcb6 	bl	8001754 <Serial_PutString>
}
 8001de8:	e009      	b.n	8001dfe <SerialDownload+0x96>
  else if (result == COM_ABORT)
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	2b02      	cmp	r3, #2
 8001dee:	d103      	bne.n	8001df8 <SerialDownload+0x90>
    Serial_PutString((uint8_t *)"\r\n\nAborted by user.\n\r");
 8001df0:	480d      	ldr	r0, [pc, #52]	; (8001e28 <SerialDownload+0xc0>)
 8001df2:	f7ff fcaf 	bl	8001754 <Serial_PutString>
}
 8001df6:	e002      	b.n	8001dfe <SerialDownload+0x96>
    Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
 8001df8:	480c      	ldr	r0, [pc, #48]	; (8001e2c <SerialDownload+0xc4>)
 8001dfa:	f7ff fcab 	bl	8001754 <Serial_PutString>
}
 8001dfe:	bf00      	nop
 8001e00:	3710      	adds	r7, #16
 8001e02:	46bd      	mov	sp, r7
 8001e04:	bd80      	pop	{r7, pc}
 8001e06:	bf00      	nop
 8001e08:	08007a78 	.word	0x08007a78
 8001e0c:	08007ab4 	.word	0x08007ab4
 8001e10:	20001f78 	.word	0x20001f78
 8001e14:	08007b08 	.word	0x08007b08
 8001e18:	08007b14 	.word	0x08007b14
 8001e1c:	08007b20 	.word	0x08007b20
 8001e20:	08007b38 	.word	0x08007b38
 8001e24:	08007b78 	.word	0x08007b78
 8001e28:	08007b94 	.word	0x08007b94
 8001e2c:	08007bac 	.word	0x08007bac

08001e30 <RunApplication>:
  * @brief  Download a file via serial port
  * @param  None
  * @retval None
  */
void RunApplication(void)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b082      	sub	sp, #8
 8001e34:	af00      	add	r7, sp, #0
 // Serial_PutString((uint8_t *)"Start program execution......\r\n\n");
  //NVIC_SystemReset();
  //NVIC_DisableIRQ();
  //DNVIC_SetVector()
  SCB->VTOR = APPLICATION_ADDRESS;
 8001e36:	4b0d      	ldr	r3, [pc, #52]	; (8001e6c <RunApplication+0x3c>)
 8001e38:	4a0d      	ldr	r2, [pc, #52]	; (8001e70 <RunApplication+0x40>)
 8001e3a:	609a      	str	r2, [r3, #8]
  /* execute the new program */
  JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + 4);
 8001e3c:	4b0d      	ldr	r3, [pc, #52]	; (8001e74 <RunApplication+0x44>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a0d      	ldr	r2, [pc, #52]	; (8001e78 <RunApplication+0x48>)
 8001e42:	6013      	str	r3, [r2, #0]
  /* Jump to user application */
  JumpToApplication = (pFunction) JumpAddress;
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <RunApplication+0x48>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b0c      	ldr	r3, [pc, #48]	; (8001e7c <RunApplication+0x4c>)
 8001e4c:	601a      	str	r2, [r3, #0]
  /* Initialize user application's Stack Pointer */
  __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8001e4e:	4b08      	ldr	r3, [pc, #32]	; (8001e70 <RunApplication+0x40>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	607b      	str	r3, [r7, #4]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	f383 8808 	msr	MSP, r3
}
 8001e5a:	bf00      	nop
  //SCB->VTOR = APPLICATION_ADDRESS;
  JumpToApplication();
 8001e5c:	4b07      	ldr	r3, [pc, #28]	; (8001e7c <RunApplication+0x4c>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	4798      	blx	r3
}
 8001e62:	bf00      	nop
 8001e64:	3708      	adds	r7, #8
 8001e66:	46bd      	mov	sp, r7
 8001e68:	bd80      	pop	{r7, pc}
 8001e6a:	bf00      	nop
 8001e6c:	e000ed00 	.word	0xe000ed00
 8001e70:	08020000 	.word	0x08020000
 8001e74:	08020004 	.word	0x08020004
 8001e78:	20001f74 	.word	0x20001f74
 8001e7c:	20001f70 	.word	0x20001f70

08001e80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e80:	b480      	push	{r7}
 8001e82:	b083      	sub	sp, #12
 8001e84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e86:	2300      	movs	r3, #0
 8001e88:	607b      	str	r3, [r7, #4]
 8001e8a:	4b10      	ldr	r3, [pc, #64]	; (8001ecc <HAL_MspInit+0x4c>)
 8001e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e8e:	4a0f      	ldr	r2, [pc, #60]	; (8001ecc <HAL_MspInit+0x4c>)
 8001e90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e94:	6453      	str	r3, [r2, #68]	; 0x44
 8001e96:	4b0d      	ldr	r3, [pc, #52]	; (8001ecc <HAL_MspInit+0x4c>)
 8001e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e9e:	607b      	str	r3, [r7, #4]
 8001ea0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	603b      	str	r3, [r7, #0]
 8001ea6:	4b09      	ldr	r3, [pc, #36]	; (8001ecc <HAL_MspInit+0x4c>)
 8001ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eaa:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <HAL_MspInit+0x4c>)
 8001eac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eb0:	6413      	str	r3, [r2, #64]	; 0x40
 8001eb2:	4b06      	ldr	r3, [pc, #24]	; (8001ecc <HAL_MspInit+0x4c>)
 8001eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001eba:	603b      	str	r3, [r7, #0]
 8001ebc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40023800 	.word	0x40023800

08001ed0 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b08e      	sub	sp, #56	; 0x38
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001edc:	2200      	movs	r2, #0
 8001ede:	601a      	str	r2, [r3, #0]
 8001ee0:	605a      	str	r2, [r3, #4]
 8001ee2:	609a      	str	r2, [r3, #8]
 8001ee4:	60da      	str	r2, [r3, #12]
 8001ee6:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a55      	ldr	r2, [pc, #340]	; (8002044 <HAL_ETH_MspInit+0x174>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	f040 80a4 	bne.w	800203c <HAL_ETH_MspInit+0x16c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	623b      	str	r3, [r7, #32]
 8001ef8:	4b53      	ldr	r3, [pc, #332]	; (8002048 <HAL_ETH_MspInit+0x178>)
 8001efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efc:	4a52      	ldr	r2, [pc, #328]	; (8002048 <HAL_ETH_MspInit+0x178>)
 8001efe:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001f02:	6313      	str	r3, [r2, #48]	; 0x30
 8001f04:	4b50      	ldr	r3, [pc, #320]	; (8002048 <HAL_ETH_MspInit+0x178>)
 8001f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f0c:	623b      	str	r3, [r7, #32]
 8001f0e:	6a3b      	ldr	r3, [r7, #32]
 8001f10:	2300      	movs	r3, #0
 8001f12:	61fb      	str	r3, [r7, #28]
 8001f14:	4b4c      	ldr	r3, [pc, #304]	; (8002048 <HAL_ETH_MspInit+0x178>)
 8001f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f18:	4a4b      	ldr	r2, [pc, #300]	; (8002048 <HAL_ETH_MspInit+0x178>)
 8001f1a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001f1e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f20:	4b49      	ldr	r3, [pc, #292]	; (8002048 <HAL_ETH_MspInit+0x178>)
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001f28:	61fb      	str	r3, [r7, #28]
 8001f2a:	69fb      	ldr	r3, [r7, #28]
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61bb      	str	r3, [r7, #24]
 8001f30:	4b45      	ldr	r3, [pc, #276]	; (8002048 <HAL_ETH_MspInit+0x178>)
 8001f32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f34:	4a44      	ldr	r2, [pc, #272]	; (8002048 <HAL_ETH_MspInit+0x178>)
 8001f36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001f3a:	6313      	str	r3, [r2, #48]	; 0x30
 8001f3c:	4b42      	ldr	r3, [pc, #264]	; (8002048 <HAL_ETH_MspInit+0x178>)
 8001f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f40:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001f44:	61bb      	str	r3, [r7, #24]
 8001f46:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f48:	2300      	movs	r3, #0
 8001f4a:	617b      	str	r3, [r7, #20]
 8001f4c:	4b3e      	ldr	r3, [pc, #248]	; (8002048 <HAL_ETH_MspInit+0x178>)
 8001f4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f50:	4a3d      	ldr	r2, [pc, #244]	; (8002048 <HAL_ETH_MspInit+0x178>)
 8001f52:	f043 0304 	orr.w	r3, r3, #4
 8001f56:	6313      	str	r3, [r2, #48]	; 0x30
 8001f58:	4b3b      	ldr	r3, [pc, #236]	; (8002048 <HAL_ETH_MspInit+0x178>)
 8001f5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	617b      	str	r3, [r7, #20]
 8001f62:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]
 8001f68:	4b37      	ldr	r3, [pc, #220]	; (8002048 <HAL_ETH_MspInit+0x178>)
 8001f6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6c:	4a36      	ldr	r2, [pc, #216]	; (8002048 <HAL_ETH_MspInit+0x178>)
 8001f6e:	f043 0301 	orr.w	r3, r3, #1
 8001f72:	6313      	str	r3, [r2, #48]	; 0x30
 8001f74:	4b34      	ldr	r3, [pc, #208]	; (8002048 <HAL_ETH_MspInit+0x178>)
 8001f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f78:	f003 0301 	and.w	r3, r3, #1
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f80:	2300      	movs	r3, #0
 8001f82:	60fb      	str	r3, [r7, #12]
 8001f84:	4b30      	ldr	r3, [pc, #192]	; (8002048 <HAL_ETH_MspInit+0x178>)
 8001f86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f88:	4a2f      	ldr	r2, [pc, #188]	; (8002048 <HAL_ETH_MspInit+0x178>)
 8001f8a:	f043 0302 	orr.w	r3, r3, #2
 8001f8e:	6313      	str	r3, [r2, #48]	; 0x30
 8001f90:	4b2d      	ldr	r3, [pc, #180]	; (8002048 <HAL_ETH_MspInit+0x178>)
 8001f92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	60fb      	str	r3, [r7, #12]
 8001f9a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	4b29      	ldr	r3, [pc, #164]	; (8002048 <HAL_ETH_MspInit+0x178>)
 8001fa2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fa4:	4a28      	ldr	r2, [pc, #160]	; (8002048 <HAL_ETH_MspInit+0x178>)
 8001fa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001faa:	6313      	str	r3, [r2, #48]	; 0x30
 8001fac:	4b26      	ldr	r3, [pc, #152]	; (8002048 <HAL_ETH_MspInit+0x178>)
 8001fae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001fb8:	2332      	movs	r3, #50	; 0x32
 8001fba:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fbc:	2302      	movs	r3, #2
 8001fbe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fc8:	230b      	movs	r3, #11
 8001fca:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fcc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	481e      	ldr	r0, [pc, #120]	; (800204c <HAL_ETH_MspInit+0x17c>)
 8001fd4:	f001 fcec 	bl	80039b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001fd8:	2386      	movs	r3, #134	; 0x86
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fdc:	2302      	movs	r3, #2
 8001fde:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fe0:	2300      	movs	r3, #0
 8001fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fe4:	2303      	movs	r3, #3
 8001fe6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001fe8:	230b      	movs	r3, #11
 8001fea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	4817      	ldr	r0, [pc, #92]	; (8002050 <HAL_ETH_MspInit+0x180>)
 8001ff4:	f001 fcdc 	bl	80039b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001ff8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ffe:	2302      	movs	r3, #2
 8002000:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002002:	2300      	movs	r3, #0
 8002004:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002006:	2303      	movs	r3, #3
 8002008:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800200a:	230b      	movs	r3, #11
 800200c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800200e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002012:	4619      	mov	r1, r3
 8002014:	480f      	ldr	r0, [pc, #60]	; (8002054 <HAL_ETH_MspInit+0x184>)
 8002016:	f001 fccb 	bl	80039b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800201a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002020:	2302      	movs	r3, #2
 8002022:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002024:	2300      	movs	r3, #0
 8002026:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002028:	2303      	movs	r3, #3
 800202a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800202c:	230b      	movs	r3, #11
 800202e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8002030:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002034:	4619      	mov	r1, r3
 8002036:	4808      	ldr	r0, [pc, #32]	; (8002058 <HAL_ETH_MspInit+0x188>)
 8002038:	f001 fcba 	bl	80039b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 800203c:	bf00      	nop
 800203e:	3738      	adds	r7, #56	; 0x38
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}
 8002044:	40028000 	.word	0x40028000
 8002048:	40023800 	.word	0x40023800
 800204c:	40020800 	.word	0x40020800
 8002050:	40020000 	.word	0x40020000
 8002054:	40020400 	.word	0x40020400
 8002058:	40021800 	.word	0x40021800

0800205c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b08a      	sub	sp, #40	; 0x28
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002064:	f107 0314 	add.w	r3, r7, #20
 8002068:	2200      	movs	r2, #0
 800206a:	601a      	str	r2, [r3, #0]
 800206c:	605a      	str	r2, [r3, #4]
 800206e:	609a      	str	r2, [r3, #8]
 8002070:	60da      	str	r2, [r3, #12]
 8002072:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	4a1d      	ldr	r2, [pc, #116]	; (80020f0 <HAL_UART_MspInit+0x94>)
 800207a:	4293      	cmp	r3, r2
 800207c:	d134      	bne.n	80020e8 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	613b      	str	r3, [r7, #16]
 8002082:	4b1c      	ldr	r3, [pc, #112]	; (80020f4 <HAL_UART_MspInit+0x98>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002086:	4a1b      	ldr	r2, [pc, #108]	; (80020f4 <HAL_UART_MspInit+0x98>)
 8002088:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800208c:	6413      	str	r3, [r2, #64]	; 0x40
 800208e:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <HAL_UART_MspInit+0x98>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002092:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002096:	613b      	str	r3, [r7, #16]
 8002098:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	4b15      	ldr	r3, [pc, #84]	; (80020f4 <HAL_UART_MspInit+0x98>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a2:	4a14      	ldr	r2, [pc, #80]	; (80020f4 <HAL_UART_MspInit+0x98>)
 80020a4:	f043 0308 	orr.w	r3, r3, #8
 80020a8:	6313      	str	r3, [r2, #48]	; 0x30
 80020aa:	4b12      	ldr	r3, [pc, #72]	; (80020f4 <HAL_UART_MspInit+0x98>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	60fb      	str	r3, [r7, #12]
 80020b4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80020b6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80020ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020bc:	2302      	movs	r3, #2
 80020be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c0:	2300      	movs	r3, #0
 80020c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80020c4:	2303      	movs	r3, #3
 80020c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80020c8:	2307      	movs	r3, #7
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80020cc:	f107 0314 	add.w	r3, r7, #20
 80020d0:	4619      	mov	r1, r3
 80020d2:	4809      	ldr	r0, [pc, #36]	; (80020f8 <HAL_UART_MspInit+0x9c>)
 80020d4:	f001 fc6c 	bl	80039b0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80020d8:	2200      	movs	r2, #0
 80020da:	2100      	movs	r1, #0
 80020dc:	2027      	movs	r0, #39	; 0x27
 80020de:	f000 fd80 	bl	8002be2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80020e2:	2027      	movs	r0, #39	; 0x27
 80020e4:	f000 fd99 	bl	8002c1a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80020e8:	bf00      	nop
 80020ea:	3728      	adds	r7, #40	; 0x28
 80020ec:	46bd      	mov	sp, r7
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40004800 	.word	0x40004800
 80020f4:	40023800 	.word	0x40023800
 80020f8:	40020c00 	.word	0x40020c00

080020fc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80020fc:	b580      	push	{r7, lr}
 80020fe:	b08a      	sub	sp, #40	; 0x28
 8002100:	af00      	add	r7, sp, #0
 8002102:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002104:	f107 0314 	add.w	r3, r7, #20
 8002108:	2200      	movs	r2, #0
 800210a:	601a      	str	r2, [r3, #0]
 800210c:	605a      	str	r2, [r3, #4]
 800210e:	609a      	str	r2, [r3, #8]
 8002110:	60da      	str	r2, [r3, #12]
 8002112:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800211c:	d13f      	bne.n	800219e <HAL_PCD_MspInit+0xa2>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800211e:	2300      	movs	r3, #0
 8002120:	613b      	str	r3, [r7, #16]
 8002122:	4b21      	ldr	r3, [pc, #132]	; (80021a8 <HAL_PCD_MspInit+0xac>)
 8002124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002126:	4a20      	ldr	r2, [pc, #128]	; (80021a8 <HAL_PCD_MspInit+0xac>)
 8002128:	f043 0301 	orr.w	r3, r3, #1
 800212c:	6313      	str	r3, [r2, #48]	; 0x30
 800212e:	4b1e      	ldr	r3, [pc, #120]	; (80021a8 <HAL_PCD_MspInit+0xac>)
 8002130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002132:	f003 0301 	and.w	r3, r3, #1
 8002136:	613b      	str	r3, [r7, #16]
 8002138:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800213a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800213e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002140:	2302      	movs	r3, #2
 8002142:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002144:	2300      	movs	r3, #0
 8002146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002148:	2303      	movs	r3, #3
 800214a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800214c:	230a      	movs	r3, #10
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002150:	f107 0314 	add.w	r3, r7, #20
 8002154:	4619      	mov	r1, r3
 8002156:	4815      	ldr	r0, [pc, #84]	; (80021ac <HAL_PCD_MspInit+0xb0>)
 8002158:	f001 fc2a 	bl	80039b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800215c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002160:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002162:	2300      	movs	r3, #0
 8002164:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002166:	2300      	movs	r3, #0
 8002168:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800216a:	f107 0314 	add.w	r3, r7, #20
 800216e:	4619      	mov	r1, r3
 8002170:	480e      	ldr	r0, [pc, #56]	; (80021ac <HAL_PCD_MspInit+0xb0>)
 8002172:	f001 fc1d 	bl	80039b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002176:	4b0c      	ldr	r3, [pc, #48]	; (80021a8 <HAL_PCD_MspInit+0xac>)
 8002178:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800217a:	4a0b      	ldr	r2, [pc, #44]	; (80021a8 <HAL_PCD_MspInit+0xac>)
 800217c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002180:	6353      	str	r3, [r2, #52]	; 0x34
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	4b08      	ldr	r3, [pc, #32]	; (80021a8 <HAL_PCD_MspInit+0xac>)
 8002188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800218a:	4a07      	ldr	r2, [pc, #28]	; (80021a8 <HAL_PCD_MspInit+0xac>)
 800218c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002190:	6453      	str	r3, [r2, #68]	; 0x44
 8002192:	4b05      	ldr	r3, [pc, #20]	; (80021a8 <HAL_PCD_MspInit+0xac>)
 8002194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 800219e:	bf00      	nop
 80021a0:	3728      	adds	r7, #40	; 0x28
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}
 80021a6:	bf00      	nop
 80021a8:	40023800 	.word	0x40023800
 80021ac:	40020000 	.word	0x40020000

080021b0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021b4:	e7fe      	b.n	80021b4 <NMI_Handler+0x4>

080021b6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021b6:	b480      	push	{r7}
 80021b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021ba:	e7fe      	b.n	80021ba <HardFault_Handler+0x4>

080021bc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021c0:	e7fe      	b.n	80021c0 <MemManage_Handler+0x4>

080021c2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021c2:	b480      	push	{r7}
 80021c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021c6:	e7fe      	b.n	80021c6 <BusFault_Handler+0x4>

080021c8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021c8:	b480      	push	{r7}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021cc:	e7fe      	b.n	80021cc <UsageFault_Handler+0x4>

080021ce <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021ce:	b480      	push	{r7}
 80021d0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021d2:	bf00      	nop
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021dc:	b480      	push	{r7}
 80021de:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021e0:	bf00      	nop
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr

080021ea <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021ea:	b480      	push	{r7}
 80021ec:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021ee:	bf00      	nop
 80021f0:	46bd      	mov	sp, r7
 80021f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f6:	4770      	bx	lr

080021f8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021f8:	b580      	push	{r7, lr}
 80021fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021fc:	f000 fbd2 	bl	80029a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002200:	bf00      	nop
 8002202:	bd80      	pop	{r7, pc}

08002204 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002208:	4802      	ldr	r0, [pc, #8]	; (8002214 <USART3_IRQHandler+0x10>)
 800220a:	f002 fcfd 	bl	8004c08 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800220e:	bf00      	nop
 8002210:	bd80      	pop	{r7, pc}
 8002212:	bf00      	nop
 8002214:	20001a18 	.word	0x20001a18

08002218 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b086      	sub	sp, #24
 800221c:	af00      	add	r7, sp, #0
 800221e:	60f8      	str	r0, [r7, #12]
 8002220:	60b9      	str	r1, [r7, #8]
 8002222:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002224:	2300      	movs	r3, #0
 8002226:	617b      	str	r3, [r7, #20]
 8002228:	e00a      	b.n	8002240 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800222a:	f3af 8000 	nop.w
 800222e:	4601      	mov	r1, r0
 8002230:	68bb      	ldr	r3, [r7, #8]
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	60ba      	str	r2, [r7, #8]
 8002236:	b2ca      	uxtb	r2, r1
 8002238:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223a:	697b      	ldr	r3, [r7, #20]
 800223c:	3301      	adds	r3, #1
 800223e:	617b      	str	r3, [r7, #20]
 8002240:	697a      	ldr	r2, [r7, #20]
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	429a      	cmp	r2, r3
 8002246:	dbf0      	blt.n	800222a <_read+0x12>
	}

return len;
 8002248:	687b      	ldr	r3, [r7, #4]
}
 800224a:	4618      	mov	r0, r3
 800224c:	3718      	adds	r7, #24
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002252:	b580      	push	{r7, lr}
 8002254:	b086      	sub	sp, #24
 8002256:	af00      	add	r7, sp, #0
 8002258:	60f8      	str	r0, [r7, #12]
 800225a:	60b9      	str	r1, [r7, #8]
 800225c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800225e:	2300      	movs	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	e009      	b.n	8002278 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	1c5a      	adds	r2, r3, #1
 8002268:	60ba      	str	r2, [r7, #8]
 800226a:	781b      	ldrb	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f7ff fd5d 	bl	8001d2c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	3301      	adds	r3, #1
 8002276:	617b      	str	r3, [r7, #20]
 8002278:	697a      	ldr	r2, [r7, #20]
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	429a      	cmp	r2, r3
 800227e:	dbf1      	blt.n	8002264 <_write+0x12>
	}
	return len;
 8002280:	687b      	ldr	r3, [r7, #4]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}

0800228a <_close>:

int _close(int file)
{
 800228a:	b480      	push	{r7}
 800228c:	b083      	sub	sp, #12
 800228e:	af00      	add	r7, sp, #0
 8002290:	6078      	str	r0, [r7, #4]
	return -1;
 8002292:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002296:	4618      	mov	r0, r3
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr

080022a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022a2:	b480      	push	{r7}
 80022a4:	b083      	sub	sp, #12
 80022a6:	af00      	add	r7, sp, #0
 80022a8:	6078      	str	r0, [r7, #4]
 80022aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022b2:	605a      	str	r2, [r3, #4]
	return 0;
 80022b4:	2300      	movs	r3, #0
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	370c      	adds	r7, #12
 80022ba:	46bd      	mov	sp, r7
 80022bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c0:	4770      	bx	lr

080022c2 <_isatty>:

int _isatty(int file)
{
 80022c2:	b480      	push	{r7}
 80022c4:	b083      	sub	sp, #12
 80022c6:	af00      	add	r7, sp, #0
 80022c8:	6078      	str	r0, [r7, #4]
	return 1;
 80022ca:	2301      	movs	r3, #1
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	370c      	adds	r7, #12
 80022d0:	46bd      	mov	sp, r7
 80022d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d6:	4770      	bx	lr

080022d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022d8:	b480      	push	{r7}
 80022da:	b085      	sub	sp, #20
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
	return 0;
 80022e4:	2300      	movs	r3, #0
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	3714      	adds	r7, #20
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
	...

080022f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	b086      	sub	sp, #24
 80022f8:	af00      	add	r7, sp, #0
 80022fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022fc:	4a14      	ldr	r2, [pc, #80]	; (8002350 <_sbrk+0x5c>)
 80022fe:	4b15      	ldr	r3, [pc, #84]	; (8002354 <_sbrk+0x60>)
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002304:	697b      	ldr	r3, [r7, #20]
 8002306:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002308:	4b13      	ldr	r3, [pc, #76]	; (8002358 <_sbrk+0x64>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d102      	bne.n	8002316 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002310:	4b11      	ldr	r3, [pc, #68]	; (8002358 <_sbrk+0x64>)
 8002312:	4a12      	ldr	r2, [pc, #72]	; (800235c <_sbrk+0x68>)
 8002314:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002316:	4b10      	ldr	r3, [pc, #64]	; (8002358 <_sbrk+0x64>)
 8002318:	681a      	ldr	r2, [r3, #0]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	4413      	add	r3, r2
 800231e:	693a      	ldr	r2, [r7, #16]
 8002320:	429a      	cmp	r2, r3
 8002322:	d207      	bcs.n	8002334 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002324:	f003 fede 	bl	80060e4 <__errno>
 8002328:	4603      	mov	r3, r0
 800232a:	220c      	movs	r2, #12
 800232c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800232e:	f04f 33ff 	mov.w	r3, #4294967295
 8002332:	e009      	b.n	8002348 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002334:	4b08      	ldr	r3, [pc, #32]	; (8002358 <_sbrk+0x64>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800233a:	4b07      	ldr	r3, [pc, #28]	; (8002358 <_sbrk+0x64>)
 800233c:	681a      	ldr	r2, [r3, #0]
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	4413      	add	r3, r2
 8002342:	4a05      	ldr	r2, [pc, #20]	; (8002358 <_sbrk+0x64>)
 8002344:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002346:	68fb      	ldr	r3, [r7, #12]
}
 8002348:	4618      	mov	r0, r3
 800234a:	3718      	adds	r7, #24
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	20030000 	.word	0x20030000
 8002354:	00000400 	.word	0x00000400
 8002358:	20001fb8 	.word	0x20001fb8
 800235c:	20002400 	.word	0x20002400

08002360 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002364:	4b06      	ldr	r3, [pc, #24]	; (8002380 <SystemInit+0x20>)
 8002366:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800236a:	4a05      	ldr	r2, [pc, #20]	; (8002380 <SystemInit+0x20>)
 800236c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002370:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002374:	bf00      	nop
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
 800237e:	bf00      	nop
 8002380:	e000ed00 	.word	0xe000ed00

08002384 <ReceivePacket>:
  * @param  timeout
  * @retval HAL_OK: normally return
  *         HAL_BUSY: abort by user
  */
static HAL_StatusTypeDef ReceivePacket(uint8_t *p_data, uint32_t *p_length, uint32_t timeout)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b088      	sub	sp, #32
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
  uint32_t crc;
  uint32_t packet_size = 0;
 8002390:	2300      	movs	r3, #0
 8002392:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint8_t char1;

  *p_length = 0;
 8002394:	68bb      	ldr	r3, [r7, #8]
 8002396:	2200      	movs	r2, #0
 8002398:	601a      	str	r2, [r3, #0]
  huart3.RxState = HAL_UART_STATE_READY;
 800239a:	4b61      	ldr	r3, [pc, #388]	; (8002520 <ReceivePacket+0x19c>)
 800239c:	2220      	movs	r2, #32
 800239e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  status = HAL_UART_Receive(&huart3, &char1, 1, timeout);
 80023a2:	f107 0113 	add.w	r1, r7, #19
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	2201      	movs	r2, #1
 80023aa:	485d      	ldr	r0, [pc, #372]	; (8002520 <ReceivePacket+0x19c>)
 80023ac:	f002 fb59 	bl	8004a62 <HAL_UART_Receive>
 80023b0:	4603      	mov	r3, r0
 80023b2:	76fb      	strb	r3, [r7, #27]

  if (status == HAL_OK)
 80023b4:	7efb      	ldrb	r3, [r7, #27]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	f040 80aa 	bne.w	8002510 <ReceivePacket+0x18c>
  {
    switch (char1)
 80023bc:	7cfb      	ldrb	r3, [r7, #19]
 80023be:	2b61      	cmp	r3, #97	; 0x61
 80023c0:	d059      	beq.n	8002476 <ReceivePacket+0xf2>
 80023c2:	2b61      	cmp	r3, #97	; 0x61
 80023c4:	dc5a      	bgt.n	800247c <ReceivePacket+0xf8>
 80023c6:	2b18      	cmp	r3, #24
 80023c8:	dc38      	bgt.n	800243c <ReceivePacket+0xb8>
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	dd56      	ble.n	800247c <ReceivePacket+0xf8>
 80023ce:	3b01      	subs	r3, #1
 80023d0:	2b17      	cmp	r3, #23
 80023d2:	d853      	bhi.n	800247c <ReceivePacket+0xf8>
 80023d4:	a201      	add	r2, pc, #4	; (adr r2, 80023dc <ReceivePacket+0x58>)
 80023d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023da:	bf00      	nop
 80023dc:	08002443 	.word	0x08002443
 80023e0:	08002449 	.word	0x08002449
 80023e4:	0800247d 	.word	0x0800247d
 80023e8:	08002483 	.word	0x08002483
 80023ec:	0800247d 	.word	0x0800247d
 80023f0:	0800247d 	.word	0x0800247d
 80023f4:	0800247d 	.word	0x0800247d
 80023f8:	0800247d 	.word	0x0800247d
 80023fc:	0800247d 	.word	0x0800247d
 8002400:	0800247d 	.word	0x0800247d
 8002404:	0800247d 	.word	0x0800247d
 8002408:	0800247d 	.word	0x0800247d
 800240c:	0800247d 	.word	0x0800247d
 8002410:	0800247d 	.word	0x0800247d
 8002414:	0800247d 	.word	0x0800247d
 8002418:	0800247d 	.word	0x0800247d
 800241c:	0800247d 	.word	0x0800247d
 8002420:	0800247d 	.word	0x0800247d
 8002424:	0800247d 	.word	0x0800247d
 8002428:	0800247d 	.word	0x0800247d
 800242c:	0800247d 	.word	0x0800247d
 8002430:	0800247d 	.word	0x0800247d
 8002434:	0800247d 	.word	0x0800247d
 8002438:	08002451 	.word	0x08002451
 800243c:	2b41      	cmp	r3, #65	; 0x41
 800243e:	d01a      	beq.n	8002476 <ReceivePacket+0xf2>
 8002440:	e01c      	b.n	800247c <ReceivePacket+0xf8>
    {
      case SOH:
        packet_size = PACKET_SIZE;
 8002442:	2380      	movs	r3, #128	; 0x80
 8002444:	61fb      	str	r3, [r7, #28]
        break;
 8002446:	e01d      	b.n	8002484 <ReceivePacket+0x100>
      case STX:
        packet_size = PACKET_1K_SIZE;
 8002448:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800244c:	61fb      	str	r3, [r7, #28]
        break;
 800244e:	e019      	b.n	8002484 <ReceivePacket+0x100>
      case EOT:
        break;
      case CA:
        if ((HAL_UART_Receive(&huart3, &char1, 1, timeout) == HAL_OK) && (char1 == CA))
 8002450:	f107 0113 	add.w	r1, r7, #19
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2201      	movs	r2, #1
 8002458:	4831      	ldr	r0, [pc, #196]	; (8002520 <ReceivePacket+0x19c>)
 800245a:	f002 fb02 	bl	8004a62 <HAL_UART_Receive>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d105      	bne.n	8002470 <ReceivePacket+0xec>
 8002464:	7cfb      	ldrb	r3, [r7, #19]
 8002466:	2b18      	cmp	r3, #24
 8002468:	d102      	bne.n	8002470 <ReceivePacket+0xec>
        {
          packet_size = 2;
 800246a:	2302      	movs	r3, #2
 800246c:	61fb      	str	r3, [r7, #28]
        }
        else
        {
          status = HAL_ERROR;
        }
        break;
 800246e:	e009      	b.n	8002484 <ReceivePacket+0x100>
          status = HAL_ERROR;
 8002470:	2301      	movs	r3, #1
 8002472:	76fb      	strb	r3, [r7, #27]
        break;
 8002474:	e006      	b.n	8002484 <ReceivePacket+0x100>
      case ABORT1:
      case ABORT2:
        status = HAL_BUSY;
 8002476:	2302      	movs	r3, #2
 8002478:	76fb      	strb	r3, [r7, #27]
        break;
 800247a:	e003      	b.n	8002484 <ReceivePacket+0x100>
      default:
        status = HAL_ERROR;
 800247c:	2301      	movs	r3, #1
 800247e:	76fb      	strb	r3, [r7, #27]
        break;
 8002480:	e000      	b.n	8002484 <ReceivePacket+0x100>
        break;
 8002482:	bf00      	nop
    }
    *p_data = char1;
 8002484:	7cfa      	ldrb	r2, [r7, #19]
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	701a      	strb	r2, [r3, #0]

    if (packet_size >= PACKET_SIZE )
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	2b7f      	cmp	r3, #127	; 0x7f
 800248e:	d93f      	bls.n	8002510 <ReceivePacket+0x18c>
    {
      status = HAL_UART_Receive(&huart3, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	1c99      	adds	r1, r3, #2
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	b29b      	uxth	r3, r3
 8002498:	3304      	adds	r3, #4
 800249a:	b29a      	uxth	r2, r3
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	4820      	ldr	r0, [pc, #128]	; (8002520 <ReceivePacket+0x19c>)
 80024a0:	f002 fadf 	bl	8004a62 <HAL_UART_Receive>
 80024a4:	4603      	mov	r3, r0
 80024a6:	76fb      	strb	r3, [r7, #27]

      /* Simple packet sanity check */
      if (status == HAL_OK )
 80024a8:	7efb      	ldrb	r3, [r7, #27]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d12e      	bne.n	800250c <ReceivePacket+0x188>
      {
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	3302      	adds	r3, #2
 80024b2:	781a      	ldrb	r2, [r3, #0]
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	3303      	adds	r3, #3
 80024b8:	781b      	ldrb	r3, [r3, #0]
 80024ba:	43db      	mvns	r3, r3
 80024bc:	b2db      	uxtb	r3, r3
 80024be:	429a      	cmp	r2, r3
 80024c0:	d004      	beq.n	80024cc <ReceivePacket+0x148>
        {
          packet_size = 0;
 80024c2:	2300      	movs	r3, #0
 80024c4:	61fb      	str	r3, [r7, #28]
          status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	76fb      	strb	r3, [r7, #27]
 80024ca:	e021      	b.n	8002510 <ReceivePacket+0x18c>
        }
        else
        {
          /* Check packet CRC */
          crc = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	3304      	adds	r3, #4
 80024d0:	68fa      	ldr	r2, [r7, #12]
 80024d2:	4413      	add	r3, r2
 80024d4:	781b      	ldrb	r3, [r3, #0]
 80024d6:	021b      	lsls	r3, r3, #8
 80024d8:	617b      	str	r3, [r7, #20]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	3305      	adds	r3, #5
 80024de:	68fa      	ldr	r2, [r7, #12]
 80024e0:	4413      	add	r3, r2
 80024e2:	781b      	ldrb	r3, [r3, #0]
 80024e4:	461a      	mov	r2, r3
 80024e6:	697b      	ldr	r3, [r7, #20]
 80024e8:	4413      	add	r3, r2
 80024ea:	617b      	str	r3, [r7, #20]
          if (Cal_CRC16(&p_data[PACKET_DATA_INDEX], packet_size) != crc )
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	3304      	adds	r3, #4
 80024f0:	69f9      	ldr	r1, [r7, #28]
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 f84a 	bl	800258c <Cal_CRC16>
 80024f8:	4603      	mov	r3, r0
 80024fa:	461a      	mov	r2, r3
 80024fc:	697b      	ldr	r3, [r7, #20]
 80024fe:	4293      	cmp	r3, r2
 8002500:	d006      	beq.n	8002510 <ReceivePacket+0x18c>
          {
            packet_size = 0;
 8002502:	2300      	movs	r3, #0
 8002504:	61fb      	str	r3, [r7, #28]
            status = HAL_ERROR;
 8002506:	2301      	movs	r3, #1
 8002508:	76fb      	strb	r3, [r7, #27]
 800250a:	e001      	b.n	8002510 <ReceivePacket+0x18c>
          }
        }
      }
      else
      {
        packet_size = 0;
 800250c:	2300      	movs	r3, #0
 800250e:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  *p_length = packet_size;
 8002510:	68bb      	ldr	r3, [r7, #8]
 8002512:	69fa      	ldr	r2, [r7, #28]
 8002514:	601a      	str	r2, [r3, #0]
  return status;
 8002516:	7efb      	ldrb	r3, [r7, #27]
}
 8002518:	4618      	mov	r0, r3
 800251a:	3720      	adds	r7, #32
 800251c:	46bd      	mov	sp, r7
 800251e:	bd80      	pop	{r7, pc}
 8002520:	20001a18 	.word	0x20001a18

08002524 <UpdateCRC16>:
  * @param  crc_in input value 
  * @param  input byte
  * @retval None
  */
uint16_t UpdateCRC16(uint16_t crc_in, uint8_t byte)
{
 8002524:	b480      	push	{r7}
 8002526:	b085      	sub	sp, #20
 8002528:	af00      	add	r7, sp, #0
 800252a:	4603      	mov	r3, r0
 800252c:	460a      	mov	r2, r1
 800252e:	80fb      	strh	r3, [r7, #6]
 8002530:	4613      	mov	r3, r2
 8002532:	717b      	strb	r3, [r7, #5]
  uint32_t crc = crc_in;
 8002534:	88fb      	ldrh	r3, [r7, #6]
 8002536:	60fb      	str	r3, [r7, #12]
  uint32_t in = byte | 0x100;
 8002538:	797b      	ldrb	r3, [r7, #5]
 800253a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800253e:	60bb      	str	r3, [r7, #8]

  do
  {
    crc <<= 1;
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	60fb      	str	r3, [r7, #12]
    in <<= 1;
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	005b      	lsls	r3, r3, #1
 800254a:	60bb      	str	r3, [r7, #8]
    if(in & 0x100)
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002552:	2b00      	cmp	r3, #0
 8002554:	d002      	beq.n	800255c <UpdateCRC16+0x38>
      ++crc;
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	3301      	adds	r3, #1
 800255a:	60fb      	str	r3, [r7, #12]
    if(crc & 0x10000)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002562:	2b00      	cmp	r3, #0
 8002564:	d005      	beq.n	8002572 <UpdateCRC16+0x4e>
      crc ^= 0x1021;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f483 5381 	eor.w	r3, r3, #4128	; 0x1020
 800256c:	f083 0301 	eor.w	r3, r3, #1
 8002570:	60fb      	str	r3, [r7, #12]
  }
  
  while(!(in & 0x10000));
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0e1      	beq.n	8002540 <UpdateCRC16+0x1c>

  return crc & 0xffffu;
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	b29b      	uxth	r3, r3
}
 8002580:	4618      	mov	r0, r3
 8002582:	3714      	adds	r7, #20
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <Cal_CRC16>:
  * @param  data
  * @param  length
  * @retval None
  */
uint16_t Cal_CRC16(const uint8_t* p_data, uint32_t size)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b084      	sub	sp, #16
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
 8002594:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 8002596:	2300      	movs	r3, #0
 8002598:	60fb      	str	r3, [r7, #12]
  const uint8_t* dataEnd = p_data+size;
 800259a:	687a      	ldr	r2, [r7, #4]
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	4413      	add	r3, r2
 80025a0:	60bb      	str	r3, [r7, #8]

  while(p_data < dataEnd)
 80025a2:	e00a      	b.n	80025ba <Cal_CRC16+0x2e>
    crc = UpdateCRC16(crc, *p_data++);
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	b298      	uxth	r0, r3
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	1c5a      	adds	r2, r3, #1
 80025ac:	607a      	str	r2, [r7, #4]
 80025ae:	781b      	ldrb	r3, [r3, #0]
 80025b0:	4619      	mov	r1, r3
 80025b2:	f7ff ffb7 	bl	8002524 <UpdateCRC16>
 80025b6:	4603      	mov	r3, r0
 80025b8:	60fb      	str	r3, [r7, #12]
  while(p_data < dataEnd)
 80025ba:	687a      	ldr	r2, [r7, #4]
 80025bc:	68bb      	ldr	r3, [r7, #8]
 80025be:	429a      	cmp	r2, r3
 80025c0:	d3f0      	bcc.n	80025a4 <Cal_CRC16+0x18>
 
  crc = UpdateCRC16(crc, 0);
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	b29b      	uxth	r3, r3
 80025c6:	2100      	movs	r1, #0
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7ff ffab 	bl	8002524 <UpdateCRC16>
 80025ce:	4603      	mov	r3, r0
 80025d0:	60fb      	str	r3, [r7, #12]
  crc = UpdateCRC16(crc, 0);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	b29b      	uxth	r3, r3
 80025d6:	2100      	movs	r1, #0
 80025d8:	4618      	mov	r0, r3
 80025da:	f7ff ffa3 	bl	8002524 <UpdateCRC16>
 80025de:	4603      	mov	r3, r0
 80025e0:	60fb      	str	r3, [r7, #12]

  return crc&0xffffu;
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	b29b      	uxth	r3, r3
}
 80025e6:	4618      	mov	r0, r3
 80025e8:	3710      	adds	r7, #16
 80025ea:	46bd      	mov	sp, r7
 80025ec:	bd80      	pop	{r7, pc}
	...

080025f0 <Ymodem_Receive>:
  * @brief  Receive a file using the ymodem protocol with CRC16.
  * @param  p_size The size of the file.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive ( uint32_t *p_size )
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b092      	sub	sp, #72	; 0x48
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 80025f8:	2300      	movs	r3, #0
 80025fa:	643b      	str	r3, [r7, #64]	; 0x40
 80025fc:	2300      	movs	r3, #0
 80025fe:	63bb      	str	r3, [r7, #56]	; 0x38
 8002600:	2300      	movs	r3, #0
 8002602:	637b      	str	r3, [r7, #52]	; 0x34
 // uint32_t flashdestination;
  uint32_t ramsource, filesize;
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH], tmp, packets_received;
  COM_StatusTypeDef result = COM_OK;
 8002604:	2300      	movs	r3, #0
 8002606:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e

  /* Initialize flashdestination variable */
  flashdestination = APPLICATION_ADDRESS;
 800260a:	4b87      	ldr	r3, [pc, #540]	; (8002828 <Ymodem_Receive+0x238>)
 800260c:	4a87      	ldr	r2, [pc, #540]	; (800282c <Ymodem_Receive+0x23c>)
 800260e:	601a      	str	r2, [r3, #0]

  while ((session_done == 0) && (result == COM_OK))
 8002610:	e0fb      	b.n	800280a <Ymodem_Receive+0x21a>
  {
    packets_received = 0;
 8002612:	2300      	movs	r3, #0
 8002614:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    file_done = 0;
 8002618:	2300      	movs	r3, #0
 800261a:	63fb      	str	r3, [r7, #60]	; 0x3c
    while ((file_done == 0) && (result == COM_OK))
 800261c:	e0ed      	b.n	80027fa <Ymodem_Receive+0x20a>
    {
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT))
 800261e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002622:	f242 7210 	movw	r2, #10000	; 0x2710
 8002626:	4619      	mov	r1, r3
 8002628:	4881      	ldr	r0, [pc, #516]	; (8002830 <Ymodem_Receive+0x240>)
 800262a:	f7ff feab 	bl	8002384 <ReceivePacket>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d003      	beq.n	800263c <Ymodem_Receive+0x4c>
 8002634:	2b02      	cmp	r3, #2
 8002636:	f000 80c2 	beq.w	80027be <Ymodem_Receive+0x1ce>
 800263a:	e0ca      	b.n	80027d2 <Ymodem_Receive+0x1e2>
      {
        case HAL_OK:
          errors = 0;
 800263c:	2300      	movs	r3, #0
 800263e:	63bb      	str	r3, [r7, #56]	; 0x38
          switch (packet_length)
 8002640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002642:	2b00      	cmp	r3, #0
 8002644:	d008      	beq.n	8002658 <Ymodem_Receive+0x68>
 8002646:	2b02      	cmp	r3, #2
 8002648:	d10c      	bne.n	8002664 <Ymodem_Receive+0x74>
          {
            case 2:
              /* Abort by sender */
              Serial_PutByte(ACK);
 800264a:	2006      	movs	r0, #6
 800264c:	f7ff f89e 	bl	800178c <Serial_PutByte>
              result = COM_ABORT;
 8002650:	2302      	movs	r3, #2
 8002652:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
              break;
 8002656:	e0b1      	b.n	80027bc <Ymodem_Receive+0x1cc>
            case 0:
              /* End of transmission */
              Serial_PutByte(ACK);
 8002658:	2006      	movs	r0, #6
 800265a:	f7ff f897 	bl	800178c <Serial_PutByte>
              file_done = 1;
 800265e:	2301      	movs	r3, #1
 8002660:	63fb      	str	r3, [r7, #60]	; 0x3c
              break;
 8002662:	e0ab      	b.n	80027bc <Ymodem_Receive+0x1cc>
            default:
              /* Normal packet */
              if (aPacketData[PACKET_NUMBER_INDEX] != packets_received)
 8002664:	4b72      	ldr	r3, [pc, #456]	; (8002830 <Ymodem_Receive+0x240>)
 8002666:	789b      	ldrb	r3, [r3, #2]
 8002668:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 800266c:	429a      	cmp	r2, r3
 800266e:	d003      	beq.n	8002678 <Ymodem_Receive+0x88>
              {
                Serial_PutByte(NAK);
 8002670:	2015      	movs	r0, #21
 8002672:	f7ff f88b 	bl	800178c <Serial_PutByte>
                  }
                }
                packets_received ++;
                session_begin = 1;
              }
              break;
 8002676:	e0a0      	b.n	80027ba <Ymodem_Receive+0x1ca>
                if (packets_received == 0)
 8002678:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800267c:	2b00      	cmp	r3, #0
 800267e:	d175      	bne.n	800276c <Ymodem_Receive+0x17c>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 8002680:	4b6b      	ldr	r3, [pc, #428]	; (8002830 <Ymodem_Receive+0x240>)
 8002682:	791b      	ldrb	r3, [r3, #4]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d069      	beq.n	800275c <Ymodem_Receive+0x16c>
                    i = 0;
 8002688:	2300      	movs	r3, #0
 800268a:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 800268c:	4b69      	ldr	r3, [pc, #420]	; (8002834 <Ymodem_Receive+0x244>)
 800268e:	633b      	str	r3, [r7, #48]	; 0x30
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 8002690:	e008      	b.n	80026a4 <Ymodem_Receive+0xb4>
                      aFileName[i++] = *file_ptr++;
 8002692:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002694:	1c53      	adds	r3, r2, #1
 8002696:	633b      	str	r3, [r7, #48]	; 0x30
 8002698:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800269a:	1c59      	adds	r1, r3, #1
 800269c:	6479      	str	r1, [r7, #68]	; 0x44
 800269e:	7811      	ldrb	r1, [r2, #0]
 80026a0:	4a65      	ldr	r2, [pc, #404]	; (8002838 <Ymodem_Receive+0x248>)
 80026a2:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 80026a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026a6:	781b      	ldrb	r3, [r3, #0]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d002      	beq.n	80026b2 <Ymodem_Receive+0xc2>
 80026ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ae:	2b3f      	cmp	r3, #63	; 0x3f
 80026b0:	d9ef      	bls.n	8002692 <Ymodem_Receive+0xa2>
                    aFileName[i++] = '\0';
 80026b2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	647a      	str	r2, [r7, #68]	; 0x44
 80026b8:	4a5f      	ldr	r2, [pc, #380]	; (8002838 <Ymodem_Receive+0x248>)
 80026ba:	2100      	movs	r1, #0
 80026bc:	54d1      	strb	r1, [r2, r3]
                    i = 0;
 80026be:	2300      	movs	r3, #0
 80026c0:	647b      	str	r3, [r7, #68]	; 0x44
                    file_ptr ++;
 80026c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026c4:	3301      	adds	r3, #1
 80026c6:	633b      	str	r3, [r7, #48]	; 0x30
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 80026c8:	e00a      	b.n	80026e0 <Ymodem_Receive+0xf0>
                      file_size[i++] = *file_ptr++;
 80026ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80026cc:	1c53      	adds	r3, r2, #1
 80026ce:	633b      	str	r3, [r7, #48]	; 0x30
 80026d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026d2:	1c59      	adds	r1, r3, #1
 80026d4:	6479      	str	r1, [r7, #68]	; 0x44
 80026d6:	7812      	ldrb	r2, [r2, #0]
 80026d8:	3348      	adds	r3, #72	; 0x48
 80026da:	443b      	add	r3, r7
 80026dc:	f803 2c38 	strb.w	r2, [r3, #-56]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 80026e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e2:	781b      	ldrb	r3, [r3, #0]
 80026e4:	2b20      	cmp	r3, #32
 80026e6:	d002      	beq.n	80026ee <Ymodem_Receive+0xfe>
 80026e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026ea:	2b0f      	cmp	r3, #15
 80026ec:	d9ed      	bls.n	80026ca <Ymodem_Receive+0xda>
                    file_size[i++] = '\0';
 80026ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	647a      	str	r2, [r7, #68]	; 0x44
 80026f4:	3348      	adds	r3, #72	; 0x48
 80026f6:	443b      	add	r3, r7
 80026f8:	2200      	movs	r2, #0
 80026fa:	f803 2c38 	strb.w	r2, [r3, #-56]
                    Str2Int(file_size, &filesize);
 80026fe:	f107 0220 	add.w	r2, r7, #32
 8002702:	f107 0310 	add.w	r3, r7, #16
 8002706:	4611      	mov	r1, r2
 8002708:	4618      	mov	r0, r3
 800270a:	f7fe ff2f 	bl	800156c <Str2Int>
                    if (*p_size > (USER_FLASH_SIZE + 1))
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	4a4a      	ldr	r2, [pc, #296]	; (800283c <Ymodem_Receive+0x24c>)
 8002714:	4293      	cmp	r3, r2
 8002716:	d914      	bls.n	8002742 <Ymodem_Receive+0x152>
                      tmp = CA;
 8002718:	2318      	movs	r3, #24
 800271a:	73fb      	strb	r3, [r7, #15]
                      HAL_UART_Transmit(&huart3, &tmp, 1, NAK_TIMEOUT);
 800271c:	f107 010f 	add.w	r1, r7, #15
 8002720:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002724:	2201      	movs	r2, #1
 8002726:	4846      	ldr	r0, [pc, #280]	; (8002840 <Ymodem_Receive+0x250>)
 8002728:	f002 f909 	bl	800493e <HAL_UART_Transmit>
                      HAL_UART_Transmit(&huart3, &tmp, 1, NAK_TIMEOUT);
 800272c:	f107 010f 	add.w	r1, r7, #15
 8002730:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002734:	2201      	movs	r2, #1
 8002736:	4842      	ldr	r0, [pc, #264]	; (8002840 <Ymodem_Receive+0x250>)
 8002738:	f002 f901 	bl	800493e <HAL_UART_Transmit>
                      result = COM_LIMIT;
 800273c:	2305      	movs	r3, #5
 800273e:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                    FLASH_If_Erase(APPLICATION_ADDRESS);
 8002742:	483a      	ldr	r0, [pc, #232]	; (800282c <Ymodem_Receive+0x23c>)
 8002744:	f7ff f84a 	bl	80017dc <FLASH_If_Erase>
                    *p_size = filesize;
 8002748:	6a3a      	ldr	r2, [r7, #32]
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	601a      	str	r2, [r3, #0]
                    Serial_PutByte(ACK);
 800274e:	2006      	movs	r0, #6
 8002750:	f7ff f81c 	bl	800178c <Serial_PutByte>
                    Serial_PutByte(CRC16);
 8002754:	2043      	movs	r0, #67	; 0x43
 8002756:	f7ff f819 	bl	800178c <Serial_PutByte>
 800275a:	e027      	b.n	80027ac <Ymodem_Receive+0x1bc>
                    Serial_PutByte(ACK);
 800275c:	2006      	movs	r0, #6
 800275e:	f7ff f815 	bl	800178c <Serial_PutByte>
                    file_done = 1;
 8002762:	2301      	movs	r3, #1
 8002764:	63fb      	str	r3, [r7, #60]	; 0x3c
                    session_done = 1;
 8002766:	2301      	movs	r3, #1
 8002768:	643b      	str	r3, [r7, #64]	; 0x40
                    break;
 800276a:	e027      	b.n	80027bc <Ymodem_Receive+0x1cc>
                  ramsource = (uint32_t) & aPacketData[PACKET_DATA_INDEX];
 800276c:	4b31      	ldr	r3, [pc, #196]	; (8002834 <Ymodem_Receive+0x244>)
 800276e:	62bb      	str	r3, [r7, #40]	; 0x28
                  if (FLASH_If_Write(flashdestination, (uint32_t*) ramsource, packet_length/4) == FLASHIF_OK)
 8002770:	4b2d      	ldr	r3, [pc, #180]	; (8002828 <Ymodem_Receive+0x238>)
 8002772:	6818      	ldr	r0, [r3, #0]
 8002774:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002778:	089b      	lsrs	r3, r3, #2
 800277a:	461a      	mov	r2, r3
 800277c:	f7ff f854 	bl	8001828 <FLASH_If_Write>
 8002780:	4603      	mov	r3, r0
 8002782:	2b00      	cmp	r3, #0
 8002784:	d109      	bne.n	800279a <Ymodem_Receive+0x1aa>
                    flashdestination += packet_length;
 8002786:	4b28      	ldr	r3, [pc, #160]	; (8002828 <Ymodem_Receive+0x238>)
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278c:	4413      	add	r3, r2
 800278e:	4a26      	ldr	r2, [pc, #152]	; (8002828 <Ymodem_Receive+0x238>)
 8002790:	6013      	str	r3, [r2, #0]
                    Serial_PutByte(ACK);
 8002792:	2006      	movs	r0, #6
 8002794:	f7fe fffa 	bl	800178c <Serial_PutByte>
 8002798:	e008      	b.n	80027ac <Ymodem_Receive+0x1bc>
                    Serial_PutByte(CA);
 800279a:	2018      	movs	r0, #24
 800279c:	f7fe fff6 	bl	800178c <Serial_PutByte>
                    Serial_PutByte(CA);
 80027a0:	2018      	movs	r0, #24
 80027a2:	f7fe fff3 	bl	800178c <Serial_PutByte>
                    result = COM_DATA;
 80027a6:	2304      	movs	r3, #4
 80027a8:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
                packets_received ++;
 80027ac:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80027b0:	3301      	adds	r3, #1
 80027b2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
                session_begin = 1;
 80027b6:	2301      	movs	r3, #1
 80027b8:	637b      	str	r3, [r7, #52]	; 0x34
              break;
 80027ba:	bf00      	nop
          }
          break;
 80027bc:	e01d      	b.n	80027fa <Ymodem_Receive+0x20a>
        case HAL_BUSY: /* Abort actually */
          Serial_PutByte(CA);
 80027be:	2018      	movs	r0, #24
 80027c0:	f7fe ffe4 	bl	800178c <Serial_PutByte>
          Serial_PutByte(CA);
 80027c4:	2018      	movs	r0, #24
 80027c6:	f7fe ffe1 	bl	800178c <Serial_PutByte>
          result = COM_ABORT;
 80027ca:	2302      	movs	r3, #2
 80027cc:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
          break;
 80027d0:	e013      	b.n	80027fa <Ymodem_Receive+0x20a>
        default:
          if (session_begin > 0)
 80027d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d002      	beq.n	80027de <Ymodem_Receive+0x1ee>
          {
            errors ++;
 80027d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027da:	3301      	adds	r3, #1
 80027dc:	63bb      	str	r3, [r7, #56]	; 0x38
          }
          if (errors > MAX_ERRORS)
 80027de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80027e0:	2b05      	cmp	r3, #5
 80027e2:	d906      	bls.n	80027f2 <Ymodem_Receive+0x202>
          {
            /* Abort communication */
            Serial_PutByte(CA);
 80027e4:	2018      	movs	r0, #24
 80027e6:	f7fe ffd1 	bl	800178c <Serial_PutByte>
            Serial_PutByte(CA);
 80027ea:	2018      	movs	r0, #24
 80027ec:	f7fe ffce 	bl	800178c <Serial_PutByte>
 80027f0:	e002      	b.n	80027f8 <Ymodem_Receive+0x208>
          }
          else
          {
            Serial_PutByte(CRC16); /* Ask for a packet */
 80027f2:	2043      	movs	r0, #67	; 0x43
 80027f4:	f7fe ffca 	bl	800178c <Serial_PutByte>
          }
          break;
 80027f8:	bf00      	nop
    while ((file_done == 0) && (result == COM_OK))
 80027fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d104      	bne.n	800280a <Ymodem_Receive+0x21a>
 8002800:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002804:	2b00      	cmp	r3, #0
 8002806:	f43f af0a 	beq.w	800261e <Ymodem_Receive+0x2e>
  while ((session_done == 0) && (result == COM_OK))
 800280a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800280c:	2b00      	cmp	r3, #0
 800280e:	d104      	bne.n	800281a <Ymodem_Receive+0x22a>
 8002810:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8002814:	2b00      	cmp	r3, #0
 8002816:	f43f aefc 	beq.w	8002612 <Ymodem_Receive+0x22>
      }
    }
  }
  return result;
 800281a:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
}
 800281e:	4618      	mov	r0, r3
 8002820:	3748      	adds	r7, #72	; 0x48
 8002822:	46bd      	mov	sp, r7
 8002824:	bd80      	pop	{r7, pc}
 8002826:	bf00      	nop
 8002828:	20001fbc 	.word	0x20001fbc
 800282c:	08020000 	.word	0x08020000
 8002830:	20001fc0 	.word	0x20001fc0
 8002834:	20001fc4 	.word	0x20001fc4
 8002838:	20001f78 	.word	0x20001f78
 800283c:	000e0001 	.word	0x000e0001
 8002840:	20001a18 	.word	0x20001a18

08002844 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002844:	f8df d034 	ldr.w	sp, [pc, #52]	; 800287c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002848:	480d      	ldr	r0, [pc, #52]	; (8002880 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800284a:	490e      	ldr	r1, [pc, #56]	; (8002884 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800284c:	4a0e      	ldr	r2, [pc, #56]	; (8002888 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800284e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002850:	e002      	b.n	8002858 <LoopCopyDataInit>

08002852 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002852:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002854:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002856:	3304      	adds	r3, #4

08002858 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002858:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800285a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800285c:	d3f9      	bcc.n	8002852 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800285e:	4a0b      	ldr	r2, [pc, #44]	; (800288c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002860:	4c0b      	ldr	r4, [pc, #44]	; (8002890 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002862:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002864:	e001      	b.n	800286a <LoopFillZerobss>

08002866 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002866:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002868:	3204      	adds	r2, #4

0800286a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800286a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800286c:	d3fb      	bcc.n	8002866 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800286e:	f7ff fd77 	bl	8002360 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002872:	f003 fc3d 	bl	80060f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002876:	f7ff f881 	bl	800197c <main>
  bx  lr    
 800287a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800287c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8002880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002884:	20000a38 	.word	0x20000a38
  ldr r2, =_sidata
 8002888:	08008274 	.word	0x08008274
  ldr r2, =_sbss
 800288c:	20000a38 	.word	0x20000a38
  ldr r4, =_ebss
 8002890:	200023fc 	.word	0x200023fc

08002894 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002894:	e7fe      	b.n	8002894 <ADC_IRQHandler>
	...

08002898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800289c:	4b0e      	ldr	r3, [pc, #56]	; (80028d8 <HAL_Init+0x40>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a0d      	ldr	r2, [pc, #52]	; (80028d8 <HAL_Init+0x40>)
 80028a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80028a6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028a8:	4b0b      	ldr	r3, [pc, #44]	; (80028d8 <HAL_Init+0x40>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0a      	ldr	r2, [pc, #40]	; (80028d8 <HAL_Init+0x40>)
 80028ae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80028b2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80028b4:	4b08      	ldr	r3, [pc, #32]	; (80028d8 <HAL_Init+0x40>)
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	4a07      	ldr	r2, [pc, #28]	; (80028d8 <HAL_Init+0x40>)
 80028ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80028be:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028c0:	2003      	movs	r0, #3
 80028c2:	f000 f983 	bl	8002bcc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028c6:	2000      	movs	r0, #0
 80028c8:	f000 f83c 	bl	8002944 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028cc:	f7ff fad8 	bl	8001e80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028d0:	2300      	movs	r3, #0
}
 80028d2:	4618      	mov	r0, r3
 80028d4:	bd80      	pop	{r7, pc}
 80028d6:	bf00      	nop
 80028d8:	40023c00 	.word	0x40023c00

080028dc <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 80028e0:	4b13      	ldr	r3, [pc, #76]	; (8002930 <HAL_DeInit+0x54>)
 80028e2:	f04f 32ff 	mov.w	r2, #4294967295
 80028e6:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 80028e8:	4b11      	ldr	r3, [pc, #68]	; (8002930 <HAL_DeInit+0x54>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 80028ee:	4b10      	ldr	r3, [pc, #64]	; (8002930 <HAL_DeInit+0x54>)
 80028f0:	f04f 32ff 	mov.w	r2, #4294967295
 80028f4:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 80028f6:	4b0e      	ldr	r3, [pc, #56]	; (8002930 <HAL_DeInit+0x54>)
 80028f8:	2200      	movs	r2, #0
 80028fa:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 80028fc:	4b0c      	ldr	r3, [pc, #48]	; (8002930 <HAL_DeInit+0x54>)
 80028fe:	f04f 32ff 	mov.w	r2, #4294967295
 8002902:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8002904:	4b0a      	ldr	r3, [pc, #40]	; (8002930 <HAL_DeInit+0x54>)
 8002906:	2200      	movs	r2, #0
 8002908:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 800290a:	4b09      	ldr	r3, [pc, #36]	; (8002930 <HAL_DeInit+0x54>)
 800290c:	f04f 32ff 	mov.w	r2, #4294967295
 8002910:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8002912:	4b07      	ldr	r3, [pc, #28]	; (8002930 <HAL_DeInit+0x54>)
 8002914:	2200      	movs	r2, #0
 8002916:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8002918:	4b05      	ldr	r3, [pc, #20]	; (8002930 <HAL_DeInit+0x54>)
 800291a:	f04f 32ff 	mov.w	r2, #4294967295
 800291e:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8002920:	4b03      	ldr	r3, [pc, #12]	; (8002930 <HAL_DeInit+0x54>)
 8002922:	2200      	movs	r2, #0
 8002924:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8002926:	f000 f805 	bl	8002934 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40023800 	.word	0x40023800

08002934 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8002934:	b480      	push	{r7}
 8002936:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b082      	sub	sp, #8
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800294c:	4b12      	ldr	r3, [pc, #72]	; (8002998 <HAL_InitTick+0x54>)
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	4b12      	ldr	r3, [pc, #72]	; (800299c <HAL_InitTick+0x58>)
 8002952:	781b      	ldrb	r3, [r3, #0]
 8002954:	4619      	mov	r1, r3
 8002956:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800295a:	fbb3 f3f1 	udiv	r3, r3, r1
 800295e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002962:	4618      	mov	r0, r3
 8002964:	f000 f967 	bl	8002c36 <HAL_SYSTICK_Config>
 8002968:	4603      	mov	r3, r0
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e00e      	b.n	8002990 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	2b0f      	cmp	r3, #15
 8002976:	d80a      	bhi.n	800298e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002978:	2200      	movs	r2, #0
 800297a:	6879      	ldr	r1, [r7, #4]
 800297c:	f04f 30ff 	mov.w	r0, #4294967295
 8002980:	f000 f92f 	bl	8002be2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002984:	4a06      	ldr	r2, [pc, #24]	; (80029a0 <HAL_InitTick+0x5c>)
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800298a:	2300      	movs	r3, #0
 800298c:	e000      	b.n	8002990 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
}
 8002990:	4618      	mov	r0, r3
 8002992:	3708      	adds	r7, #8
 8002994:	46bd      	mov	sp, r7
 8002996:	bd80      	pop	{r7, pc}
 8002998:	200009c8 	.word	0x200009c8
 800299c:	200009d0 	.word	0x200009d0
 80029a0:	200009cc 	.word	0x200009cc

080029a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029a8:	4b06      	ldr	r3, [pc, #24]	; (80029c4 <HAL_IncTick+0x20>)
 80029aa:	781b      	ldrb	r3, [r3, #0]
 80029ac:	461a      	mov	r2, r3
 80029ae:	4b06      	ldr	r3, [pc, #24]	; (80029c8 <HAL_IncTick+0x24>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4413      	add	r3, r2
 80029b4:	4a04      	ldr	r2, [pc, #16]	; (80029c8 <HAL_IncTick+0x24>)
 80029b6:	6013      	str	r3, [r2, #0]
}
 80029b8:	bf00      	nop
 80029ba:	46bd      	mov	sp, r7
 80029bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c0:	4770      	bx	lr
 80029c2:	bf00      	nop
 80029c4:	200009d0 	.word	0x200009d0
 80029c8:	200023c8 	.word	0x200023c8

080029cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029cc:	b480      	push	{r7}
 80029ce:	af00      	add	r7, sp, #0
  return uwTick;
 80029d0:	4b03      	ldr	r3, [pc, #12]	; (80029e0 <HAL_GetTick+0x14>)
 80029d2:	681b      	ldr	r3, [r3, #0]
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr
 80029de:	bf00      	nop
 80029e0:	200023c8 	.word	0x200023c8

080029e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b084      	sub	sp, #16
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029ec:	f7ff ffee 	bl	80029cc <HAL_GetTick>
 80029f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fc:	d005      	beq.n	8002a0a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029fe:	4b0a      	ldr	r3, [pc, #40]	; (8002a28 <HAL_Delay+0x44>)
 8002a00:	781b      	ldrb	r3, [r3, #0]
 8002a02:	461a      	mov	r2, r3
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	4413      	add	r3, r2
 8002a08:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a0a:	bf00      	nop
 8002a0c:	f7ff ffde 	bl	80029cc <HAL_GetTick>
 8002a10:	4602      	mov	r2, r0
 8002a12:	68bb      	ldr	r3, [r7, #8]
 8002a14:	1ad3      	subs	r3, r2, r3
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	429a      	cmp	r2, r3
 8002a1a:	d8f7      	bhi.n	8002a0c <HAL_Delay+0x28>
  {
  }
}
 8002a1c:	bf00      	nop
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
 8002a26:	bf00      	nop
 8002a28:	200009d0 	.word	0x200009d0

08002a2c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	f003 0307 	and.w	r3, r3, #7
 8002a3a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a3c:	4b0c      	ldr	r3, [pc, #48]	; (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a3e:	68db      	ldr	r3, [r3, #12]
 8002a40:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a42:	68ba      	ldr	r2, [r7, #8]
 8002a44:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a48:	4013      	ands	r3, r2
 8002a4a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a4c:	68fb      	ldr	r3, [r7, #12]
 8002a4e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a54:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a58:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a5c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a5e:	4a04      	ldr	r2, [pc, #16]	; (8002a70 <__NVIC_SetPriorityGrouping+0x44>)
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	60d3      	str	r3, [r2, #12]
}
 8002a64:	bf00      	nop
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	e000ed00 	.word	0xe000ed00

08002a74 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a74:	b480      	push	{r7}
 8002a76:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a78:	4b04      	ldr	r3, [pc, #16]	; (8002a8c <__NVIC_GetPriorityGrouping+0x18>)
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	0a1b      	lsrs	r3, r3, #8
 8002a7e:	f003 0307 	and.w	r3, r3, #7
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr
 8002a8c:	e000ed00 	.word	0xe000ed00

08002a90 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	4603      	mov	r3, r0
 8002a98:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	db0b      	blt.n	8002aba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aa2:	79fb      	ldrb	r3, [r7, #7]
 8002aa4:	f003 021f 	and.w	r2, r3, #31
 8002aa8:	4907      	ldr	r1, [pc, #28]	; (8002ac8 <__NVIC_EnableIRQ+0x38>)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	095b      	lsrs	r3, r3, #5
 8002ab0:	2001      	movs	r0, #1
 8002ab2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ab6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002aba:	bf00      	nop
 8002abc:	370c      	adds	r7, #12
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	e000e100 	.word	0xe000e100

08002acc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b083      	sub	sp, #12
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	4603      	mov	r3, r0
 8002ad4:	6039      	str	r1, [r7, #0]
 8002ad6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	db0a      	blt.n	8002af6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ae0:	683b      	ldr	r3, [r7, #0]
 8002ae2:	b2da      	uxtb	r2, r3
 8002ae4:	490c      	ldr	r1, [pc, #48]	; (8002b18 <__NVIC_SetPriority+0x4c>)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	0112      	lsls	r2, r2, #4
 8002aec:	b2d2      	uxtb	r2, r2
 8002aee:	440b      	add	r3, r1
 8002af0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002af4:	e00a      	b.n	8002b0c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	4908      	ldr	r1, [pc, #32]	; (8002b1c <__NVIC_SetPriority+0x50>)
 8002afc:	79fb      	ldrb	r3, [r7, #7]
 8002afe:	f003 030f 	and.w	r3, r3, #15
 8002b02:	3b04      	subs	r3, #4
 8002b04:	0112      	lsls	r2, r2, #4
 8002b06:	b2d2      	uxtb	r2, r2
 8002b08:	440b      	add	r3, r1
 8002b0a:	761a      	strb	r2, [r3, #24]
}
 8002b0c:	bf00      	nop
 8002b0e:	370c      	adds	r7, #12
 8002b10:	46bd      	mov	sp, r7
 8002b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b16:	4770      	bx	lr
 8002b18:	e000e100 	.word	0xe000e100
 8002b1c:	e000ed00 	.word	0xe000ed00

08002b20 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b089      	sub	sp, #36	; 0x24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	f003 0307 	and.w	r3, r3, #7
 8002b32:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b34:	69fb      	ldr	r3, [r7, #28]
 8002b36:	f1c3 0307 	rsb	r3, r3, #7
 8002b3a:	2b04      	cmp	r3, #4
 8002b3c:	bf28      	it	cs
 8002b3e:	2304      	movcs	r3, #4
 8002b40:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b42:	69fb      	ldr	r3, [r7, #28]
 8002b44:	3304      	adds	r3, #4
 8002b46:	2b06      	cmp	r3, #6
 8002b48:	d902      	bls.n	8002b50 <NVIC_EncodePriority+0x30>
 8002b4a:	69fb      	ldr	r3, [r7, #28]
 8002b4c:	3b03      	subs	r3, #3
 8002b4e:	e000      	b.n	8002b52 <NVIC_EncodePriority+0x32>
 8002b50:	2300      	movs	r3, #0
 8002b52:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b54:	f04f 32ff 	mov.w	r2, #4294967295
 8002b58:	69bb      	ldr	r3, [r7, #24]
 8002b5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b5e:	43da      	mvns	r2, r3
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	401a      	ands	r2, r3
 8002b64:	697b      	ldr	r3, [r7, #20]
 8002b66:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b68:	f04f 31ff 	mov.w	r1, #4294967295
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8002b72:	43d9      	mvns	r1, r3
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b78:	4313      	orrs	r3, r2
         );
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3724      	adds	r7, #36	; 0x24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b84:	4770      	bx	lr
	...

08002b88 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b082      	sub	sp, #8
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	3b01      	subs	r3, #1
 8002b94:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002b98:	d301      	bcc.n	8002b9e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b9a:	2301      	movs	r3, #1
 8002b9c:	e00f      	b.n	8002bbe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b9e:	4a0a      	ldr	r2, [pc, #40]	; (8002bc8 <SysTick_Config+0x40>)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	3b01      	subs	r3, #1
 8002ba4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ba6:	210f      	movs	r1, #15
 8002ba8:	f04f 30ff 	mov.w	r0, #4294967295
 8002bac:	f7ff ff8e 	bl	8002acc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bb0:	4b05      	ldr	r3, [pc, #20]	; (8002bc8 <SysTick_Config+0x40>)
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bb6:	4b04      	ldr	r3, [pc, #16]	; (8002bc8 <SysTick_Config+0x40>)
 8002bb8:	2207      	movs	r2, #7
 8002bba:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	3708      	adds	r7, #8
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	bd80      	pop	{r7, pc}
 8002bc6:	bf00      	nop
 8002bc8:	e000e010 	.word	0xe000e010

08002bcc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b082      	sub	sp, #8
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bd4:	6878      	ldr	r0, [r7, #4]
 8002bd6:	f7ff ff29 	bl	8002a2c <__NVIC_SetPriorityGrouping>
}
 8002bda:	bf00      	nop
 8002bdc:	3708      	adds	r7, #8
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}

08002be2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002be2:	b580      	push	{r7, lr}
 8002be4:	b086      	sub	sp, #24
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	4603      	mov	r3, r0
 8002bea:	60b9      	str	r1, [r7, #8]
 8002bec:	607a      	str	r2, [r7, #4]
 8002bee:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bf4:	f7ff ff3e 	bl	8002a74 <__NVIC_GetPriorityGrouping>
 8002bf8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002bfa:	687a      	ldr	r2, [r7, #4]
 8002bfc:	68b9      	ldr	r1, [r7, #8]
 8002bfe:	6978      	ldr	r0, [r7, #20]
 8002c00:	f7ff ff8e 	bl	8002b20 <NVIC_EncodePriority>
 8002c04:	4602      	mov	r2, r0
 8002c06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c0a:	4611      	mov	r1, r2
 8002c0c:	4618      	mov	r0, r3
 8002c0e:	f7ff ff5d 	bl	8002acc <__NVIC_SetPriority>
}
 8002c12:	bf00      	nop
 8002c14:	3718      	adds	r7, #24
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	4603      	mov	r3, r0
 8002c22:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c28:	4618      	mov	r0, r3
 8002c2a:	f7ff ff31 	bl	8002a90 <__NVIC_EnableIRQ>
}
 8002c2e:	bf00      	nop
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b082      	sub	sp, #8
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff ffa2 	bl	8002b88 <SysTick_Config>
 8002c44:	4603      	mov	r3, r0
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c4e:	b580      	push	{r7, lr}
 8002c50:	b084      	sub	sp, #16
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c5a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c5c:	f7ff feb6 	bl	80029cc <HAL_GetTick>
 8002c60:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d008      	beq.n	8002c80 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2280      	movs	r2, #128	; 0x80
 8002c72:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2200      	movs	r2, #0
 8002c78:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e052      	b.n	8002d26 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	681a      	ldr	r2, [r3, #0]
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	f022 0216 	bic.w	r2, r2, #22
 8002c8e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	695a      	ldr	r2, [r3, #20]
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002c9e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d103      	bne.n	8002cb0 <HAL_DMA_Abort+0x62>
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d007      	beq.n	8002cc0 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	681a      	ldr	r2, [r3, #0]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 0208 	bic.w	r2, r2, #8
 8002cbe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681a      	ldr	r2, [r3, #0]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f022 0201 	bic.w	r2, r2, #1
 8002cce:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cd0:	e013      	b.n	8002cfa <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cd2:	f7ff fe7b 	bl	80029cc <HAL_GetTick>
 8002cd6:	4602      	mov	r2, r0
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	1ad3      	subs	r3, r2, r3
 8002cdc:	2b05      	cmp	r3, #5
 8002cde:	d90c      	bls.n	8002cfa <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2220      	movs	r2, #32
 8002ce4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2203      	movs	r2, #3
 8002cea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e015      	b.n	8002d26 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f003 0301 	and.w	r3, r3, #1
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d1e4      	bne.n	8002cd2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d0c:	223f      	movs	r2, #63	; 0x3f
 8002d0e:	409a      	lsls	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	2201      	movs	r2, #1
 8002d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002d24:	2300      	movs	r3, #0
}
 8002d26:	4618      	mov	r0, r3
 8002d28:	3710      	adds	r7, #16
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bd80      	pop	{r7, pc}

08002d2e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002d3c:	b2db      	uxtb	r3, r3
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d004      	beq.n	8002d4c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2280      	movs	r2, #128	; 0x80
 8002d46:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e00c      	b.n	8002d66 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2205      	movs	r2, #5
 8002d50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	681a      	ldr	r2, [r3, #0]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f022 0201 	bic.w	r2, r2, #1
 8002d62:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b084      	sub	sp, #16
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d101      	bne.n	8002d86 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002d82:	2301      	movs	r3, #1
 8002d84:	e06c      	b.n	8002e60 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d106      	bne.n	8002d9e <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2223      	movs	r2, #35	; 0x23
 8002d94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff f899 	bl	8001ed0 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d9e:	2300      	movs	r3, #0
 8002da0:	60bb      	str	r3, [r7, #8]
 8002da2:	4b31      	ldr	r3, [pc, #196]	; (8002e68 <HAL_ETH_Init+0xf4>)
 8002da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002da6:	4a30      	ldr	r2, [pc, #192]	; (8002e68 <HAL_ETH_Init+0xf4>)
 8002da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002dac:	6453      	str	r3, [r2, #68]	; 0x44
 8002dae:	4b2e      	ldr	r3, [pc, #184]	; (8002e68 <HAL_ETH_Init+0xf4>)
 8002db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002db6:	60bb      	str	r3, [r7, #8]
 8002db8:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002dba:	4b2c      	ldr	r3, [pc, #176]	; (8002e6c <HAL_ETH_Init+0xf8>)
 8002dbc:	685b      	ldr	r3, [r3, #4]
 8002dbe:	4a2b      	ldr	r2, [pc, #172]	; (8002e6c <HAL_ETH_Init+0xf8>)
 8002dc0:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002dc4:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8002dc6:	4b29      	ldr	r3, [pc, #164]	; (8002e6c <HAL_ETH_Init+0xf8>)
 8002dc8:	685a      	ldr	r2, [r3, #4]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	4927      	ldr	r1, [pc, #156]	; (8002e6c <HAL_ETH_Init+0xf8>)
 8002dd0:	4313      	orrs	r3, r2
 8002dd2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8002dd4:	4b25      	ldr	r3, [pc, #148]	; (8002e6c <HAL_ETH_Init+0xf8>)
 8002dd6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	687a      	ldr	r2, [r7, #4]
 8002de4:	6812      	ldr	r2, [r2, #0]
 8002de6:	f043 0301 	orr.w	r3, r3, #1
 8002dea:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002dee:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002df0:	f7ff fdec 	bl	80029cc <HAL_GetTick>
 8002df4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002df6:	e011      	b.n	8002e1c <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002df8:	f7ff fde8 	bl	80029cc <HAL_GetTick>
 8002dfc:	4602      	mov	r2, r0
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	1ad3      	subs	r3, r2, r3
 8002e02:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002e06:	d909      	bls.n	8002e1c <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	2204      	movs	r2, #4
 8002e0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	22e0      	movs	r2, #224	; 0xe0
 8002e14:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002e18:	2301      	movs	r3, #1
 8002e1a:	e021      	b.n	8002e60 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 0301 	and.w	r3, r3, #1
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d1e4      	bne.n	8002df8 <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002e2e:	6878      	ldr	r0, [r7, #4]
 8002e30:	f000 f958 	bl	80030e4 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f9ff 	bl	8003238 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002e3a:	6878      	ldr	r0, [r7, #4]
 8002e3c:	f000 fa55 	bl	80032ea <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	461a      	mov	r2, r3
 8002e46:	2100      	movs	r1, #0
 8002e48:	6878      	ldr	r0, [r7, #4]
 8002e4a:	f000 f9bd 	bl	80031c8 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2200      	movs	r2, #0
 8002e52:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	2210      	movs	r2, #16
 8002e5a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	3710      	adds	r7, #16
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bd80      	pop	{r7, pc}
 8002e68:	40023800 	.word	0x40023800
 8002e6c:	40013800 	.word	0x40013800

08002e70 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002e70:	b580      	push	{r7, lr}
 8002e72:	b084      	sub	sp, #16
 8002e74:	af00      	add	r7, sp, #0
 8002e76:	6078      	str	r0, [r7, #4]
 8002e78:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002e82:	68fa      	ldr	r2, [r7, #12]
 8002e84:	4b51      	ldr	r3, [pc, #324]	; (8002fcc <ETH_SetMACConfig+0x15c>)
 8002e86:	4013      	ands	r3, r2
 8002e88:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	7c1b      	ldrb	r3, [r3, #16]
 8002e8e:	2b00      	cmp	r3, #0
 8002e90:	d102      	bne.n	8002e98 <ETH_SetMACConfig+0x28>
 8002e92:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8002e96:	e000      	b.n	8002e9a <ETH_SetMACConfig+0x2a>
 8002e98:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	7c5b      	ldrb	r3, [r3, #17]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d102      	bne.n	8002ea8 <ETH_SetMACConfig+0x38>
 8002ea2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002ea6:	e000      	b.n	8002eaa <ETH_SetMACConfig+0x3a>
 8002ea8:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002eaa:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002eb0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	7fdb      	ldrb	r3, [r3, #31]
 8002eb6:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002eb8:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002ebe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ec0:	683a      	ldr	r2, [r7, #0]
 8002ec2:	7f92      	ldrb	r2, [r2, #30]
 8002ec4:	2a00      	cmp	r2, #0
 8002ec6:	d102      	bne.n	8002ece <ETH_SetMACConfig+0x5e>
 8002ec8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002ecc:	e000      	b.n	8002ed0 <ETH_SetMACConfig+0x60>
 8002ece:	2200      	movs	r2, #0
                        macconf->Speed |
 8002ed0:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	7f1b      	ldrb	r3, [r3, #28]
 8002ed6:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002ed8:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002ede:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	791b      	ldrb	r3, [r3, #4]
 8002ee4:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8002ee6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002ee8:	683a      	ldr	r2, [r7, #0]
 8002eea:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002eee:	2a00      	cmp	r2, #0
 8002ef0:	d102      	bne.n	8002ef8 <ETH_SetMACConfig+0x88>
 8002ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ef6:	e000      	b.n	8002efa <ETH_SetMACConfig+0x8a>
 8002ef8:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002efa:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	7bdb      	ldrb	r3, [r3, #15]
 8002f00:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002f02:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002f08:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002f10:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002f12:	4313      	orrs	r3, r2
 8002f14:	68fa      	ldr	r2, [r7, #12]
 8002f16:	4313      	orrs	r3, r2
 8002f18:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	68fa      	ldr	r2, [r7, #12]
 8002f20:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002f2a:	2001      	movs	r0, #1
 8002f2c:	f7ff fd5a 	bl	80029e4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	68fa      	ldr	r2, [r7, #12]
 8002f36:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	699b      	ldr	r3, [r3, #24]
 8002f3e:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002f40:	68fa      	ldr	r2, [r7, #12]
 8002f42:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002f46:	4013      	ands	r3, r2
 8002f48:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f4a:	683b      	ldr	r3, [r7, #0]
 8002f4c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f4e:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f50:	683a      	ldr	r2, [r7, #0]
 8002f52:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002f56:	2a00      	cmp	r2, #0
 8002f58:	d101      	bne.n	8002f5e <ETH_SetMACConfig+0xee>
 8002f5a:	2280      	movs	r2, #128	; 0x80
 8002f5c:	e000      	b.n	8002f60 <ETH_SetMACConfig+0xf0>
 8002f5e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f60:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002f66:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f68:	683a      	ldr	r2, [r7, #0]
 8002f6a:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002f6e:	2a01      	cmp	r2, #1
 8002f70:	d101      	bne.n	8002f76 <ETH_SetMACConfig+0x106>
 8002f72:	2208      	movs	r2, #8
 8002f74:	e000      	b.n	8002f78 <ETH_SetMACConfig+0x108>
 8002f76:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002f78:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002f7a:	683a      	ldr	r2, [r7, #0]
 8002f7c:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002f80:	2a01      	cmp	r2, #1
 8002f82:	d101      	bne.n	8002f88 <ETH_SetMACConfig+0x118>
 8002f84:	2204      	movs	r2, #4
 8002f86:	e000      	b.n	8002f8a <ETH_SetMACConfig+0x11a>
 8002f88:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002f8a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002f8c:	683a      	ldr	r2, [r7, #0]
 8002f8e:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002f92:	2a01      	cmp	r2, #1
 8002f94:	d101      	bne.n	8002f9a <ETH_SetMACConfig+0x12a>
 8002f96:	2202      	movs	r2, #2
 8002f98:	e000      	b.n	8002f9c <ETH_SetMACConfig+0x12c>
 8002f9a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002f9c:	4313      	orrs	r3, r2
 8002f9e:	68fa      	ldr	r2, [r7, #12]
 8002fa0:	4313      	orrs	r3, r2
 8002fa2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	68fa      	ldr	r2, [r7, #12]
 8002faa:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	699b      	ldr	r3, [r3, #24]
 8002fb2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002fb4:	2001      	movs	r0, #1
 8002fb6:	f7ff fd15 	bl	80029e4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	68fa      	ldr	r2, [r7, #12]
 8002fc0:	619a      	str	r2, [r3, #24]
}
 8002fc2:	bf00      	nop
 8002fc4:	3710      	adds	r7, #16
 8002fc6:	46bd      	mov	sp, r7
 8002fc8:	bd80      	pop	{r7, pc}
 8002fca:	bf00      	nop
 8002fcc:	ff20810f 	.word	0xff20810f

08002fd0 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b084      	sub	sp, #16
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
 8002fd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002fe2:	699b      	ldr	r3, [r3, #24]
 8002fe4:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4b3d      	ldr	r3, [pc, #244]	; (80030e0 <ETH_SetDMAConfig+0x110>)
 8002fea:	4013      	ands	r3, r2
 8002fec:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	7b1b      	ldrb	r3, [r3, #12]
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d102      	bne.n	8002ffc <ETH_SetDMAConfig+0x2c>
 8002ff6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002ffa:	e000      	b.n	8002ffe <ETH_SetDMAConfig+0x2e>
 8002ffc:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002ffe:	683b      	ldr	r3, [r7, #0]
 8003000:	7b5b      	ldrb	r3, [r3, #13]
 8003002:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003004:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	7f52      	ldrb	r2, [r2, #29]
 800300a:	2a00      	cmp	r2, #0
 800300c:	d102      	bne.n	8003014 <ETH_SetDMAConfig+0x44>
 800300e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003012:	e000      	b.n	8003016 <ETH_SetDMAConfig+0x46>
 8003014:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8003016:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	7b9b      	ldrb	r3, [r3, #14]
 800301c:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800301e:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8003024:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	7f1b      	ldrb	r3, [r3, #28]
 800302a:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 800302c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800302e:	683b      	ldr	r3, [r7, #0]
 8003030:	7f9b      	ldrb	r3, [r3, #30]
 8003032:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8003034:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8003036:	683b      	ldr	r3, [r7, #0]
 8003038:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800303a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003042:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8003044:	4313      	orrs	r3, r2
 8003046:	68fa      	ldr	r2, [r7, #12]
 8003048:	4313      	orrs	r3, r2
 800304a:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003054:	461a      	mov	r2, r3
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003062:	699b      	ldr	r3, [r3, #24]
 8003064:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8003066:	2001      	movs	r0, #1
 8003068:	f7ff fcbc 	bl	80029e4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8003074:	461a      	mov	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	791b      	ldrb	r3, [r3, #4]
 800307e:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8003080:	683b      	ldr	r3, [r7, #0]
 8003082:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8003084:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800308a:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8003090:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003098:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800309a:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030a0:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80030a2:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80030a8:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80030aa:	687a      	ldr	r2, [r7, #4]
 80030ac:	6812      	ldr	r2, [r2, #0]
 80030ae:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80030b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80030b6:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80030c4:	2001      	movs	r0, #1
 80030c6:	f7ff fc8d 	bl	80029e4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80030d2:	461a      	mov	r2, r3
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	6013      	str	r3, [r2, #0]
}
 80030d8:	bf00      	nop
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}
 80030e0:	f8de3f23 	.word	0xf8de3f23

080030e4 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80030e4:	b580      	push	{r7, lr}
 80030e6:	b0a6      	sub	sp, #152	; 0x98
 80030e8:	af00      	add	r7, sp, #0
 80030ea:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80030ec:	2301      	movs	r3, #1
 80030ee:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80030f2:	2301      	movs	r3, #1
 80030f4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80030f8:	2300      	movs	r3, #0
 80030fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80030fc:	2300      	movs	r3, #0
 80030fe:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8003102:	2301      	movs	r3, #1
 8003104:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8003108:	2300      	movs	r3, #0
 800310a:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 800310e:	2301      	movs	r3, #1
 8003110:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8003114:	2300      	movs	r3, #0
 8003116:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800311a:	2300      	movs	r3, #0
 800311c:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8003120:	2300      	movs	r3, #0
 8003122:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8003124:	2300      	movs	r3, #0
 8003126:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800312a:	2300      	movs	r3, #0
 800312c:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 800312e:	2300      	movs	r3, #0
 8003130:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8003134:	2300      	movs	r3, #0
 8003136:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800313a:	2300      	movs	r3, #0
 800313c:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8003140:	2300      	movs	r3, #0
 8003142:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8003146:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800314a:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800314c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8003150:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8003152:	2300      	movs	r3, #0
 8003154:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8003158:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800315c:	4619      	mov	r1, r3
 800315e:	6878      	ldr	r0, [r7, #4]
 8003160:	f7ff fe86 	bl	8002e70 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8003164:	2301      	movs	r3, #1
 8003166:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8003168:	2301      	movs	r3, #1
 800316a:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 800316c:	2301      	movs	r3, #1
 800316e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8003172:	2301      	movs	r3, #1
 8003174:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8003176:	2300      	movs	r3, #0
 8003178:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800317a:	2300      	movs	r3, #0
 800317c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8003180:	2300      	movs	r3, #0
 8003182:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8003186:	2300      	movs	r3, #0
 8003188:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800318a:	2301      	movs	r3, #1
 800318c:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8003190:	2301      	movs	r3, #1
 8003192:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8003194:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003198:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800319a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800319e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80031a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80031a4:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80031a6:	2301      	movs	r3, #1
 80031a8:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80031b0:	2300      	movs	r3, #0
 80031b2:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80031b4:	f107 0308 	add.w	r3, r7, #8
 80031b8:	4619      	mov	r1, r3
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f7ff ff08 	bl	8002fd0 <ETH_SetDMAConfig>
}
 80031c0:	bf00      	nop
 80031c2:	3798      	adds	r7, #152	; 0x98
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b087      	sub	sp, #28
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	60f8      	str	r0, [r7, #12]
 80031d0:	60b9      	str	r1, [r7, #8]
 80031d2:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	3305      	adds	r3, #5
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	021b      	lsls	r3, r3, #8
 80031dc:	687a      	ldr	r2, [r7, #4]
 80031de:	3204      	adds	r2, #4
 80031e0:	7812      	ldrb	r2, [r2, #0]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80031e6:	68ba      	ldr	r2, [r7, #8]
 80031e8:	4b11      	ldr	r3, [pc, #68]	; (8003230 <ETH_MACAddressConfig+0x68>)
 80031ea:	4413      	add	r3, r2
 80031ec:	461a      	mov	r2, r3
 80031ee:	697b      	ldr	r3, [r7, #20]
 80031f0:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	3303      	adds	r3, #3
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	061a      	lsls	r2, r3, #24
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	3302      	adds	r3, #2
 80031fe:	781b      	ldrb	r3, [r3, #0]
 8003200:	041b      	lsls	r3, r3, #16
 8003202:	431a      	orrs	r2, r3
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	3301      	adds	r3, #1
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	021b      	lsls	r3, r3, #8
 800320c:	4313      	orrs	r3, r2
 800320e:	687a      	ldr	r2, [r7, #4]
 8003210:	7812      	ldrb	r2, [r2, #0]
 8003212:	4313      	orrs	r3, r2
 8003214:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8003216:	68ba      	ldr	r2, [r7, #8]
 8003218:	4b06      	ldr	r3, [pc, #24]	; (8003234 <ETH_MACAddressConfig+0x6c>)
 800321a:	4413      	add	r3, r2
 800321c:	461a      	mov	r2, r3
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	6013      	str	r3, [r2, #0]
}
 8003222:	bf00      	nop
 8003224:	371c      	adds	r7, #28
 8003226:	46bd      	mov	sp, r7
 8003228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322c:	4770      	bx	lr
 800322e:	bf00      	nop
 8003230:	40028040 	.word	0x40028040
 8003234:	40028044 	.word	0x40028044

08003238 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8003238:	b480      	push	{r7}
 800323a:	b085      	sub	sp, #20
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8003240:	2300      	movs	r3, #0
 8003242:	60fb      	str	r3, [r7, #12]
 8003244:	e03e      	b.n	80032c4 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	68d9      	ldr	r1, [r3, #12]
 800324a:	68fa      	ldr	r2, [r7, #12]
 800324c:	4613      	mov	r3, r2
 800324e:	009b      	lsls	r3, r3, #2
 8003250:	4413      	add	r3, r2
 8003252:	00db      	lsls	r3, r3, #3
 8003254:	440b      	add	r3, r1
 8003256:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8003258:	68bb      	ldr	r3, [r7, #8]
 800325a:	2200      	movs	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	2200      	movs	r2, #0
 8003262:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	2200      	movs	r2, #0
 8003268:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800326a:	68bb      	ldr	r3, [r7, #8]
 800326c:	2200      	movs	r2, #0
 800326e:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8003270:	68b9      	ldr	r1, [r7, #8]
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	68fa      	ldr	r2, [r7, #12]
 8003276:	3206      	adds	r2, #6
 8003278:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 800327c:	68bb      	ldr	r3, [r7, #8]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003284:	68bb      	ldr	r3, [r7, #8]
 8003286:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	2b02      	cmp	r3, #2
 800328c:	d80c      	bhi.n	80032a8 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	68d9      	ldr	r1, [r3, #12]
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	1c5a      	adds	r2, r3, #1
 8003296:	4613      	mov	r3, r2
 8003298:	009b      	lsls	r3, r3, #2
 800329a:	4413      	add	r3, r2
 800329c:	00db      	lsls	r3, r3, #3
 800329e:	440b      	add	r3, r1
 80032a0:	461a      	mov	r2, r3
 80032a2:	68bb      	ldr	r3, [r7, #8]
 80032a4:	60da      	str	r2, [r3, #12]
 80032a6:	e004      	b.n	80032b2 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	461a      	mov	r2, r3
 80032ae:	68bb      	ldr	r3, [r7, #8]
 80032b0:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80032b2:	68bb      	ldr	r3, [r7, #8]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80032ba:	68bb      	ldr	r3, [r7, #8]
 80032bc:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80032be:	68fb      	ldr	r3, [r7, #12]
 80032c0:	3301      	adds	r3, #1
 80032c2:	60fb      	str	r3, [r7, #12]
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b03      	cmp	r3, #3
 80032c8:	d9bd      	bls.n	8003246 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	2200      	movs	r2, #0
 80032ce:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68da      	ldr	r2, [r3, #12]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80032dc:	611a      	str	r2, [r3, #16]
}
 80032de:	bf00      	nop
 80032e0:	3714      	adds	r7, #20
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b085      	sub	sp, #20
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80032f2:	2300      	movs	r3, #0
 80032f4:	60fb      	str	r3, [r7, #12]
 80032f6:	e046      	b.n	8003386 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6919      	ldr	r1, [r3, #16]
 80032fc:	68fa      	ldr	r2, [r7, #12]
 80032fe:	4613      	mov	r3, r2
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	4413      	add	r3, r2
 8003304:	00db      	lsls	r3, r3, #3
 8003306:	440b      	add	r3, r1
 8003308:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	2200      	movs	r2, #0
 800330e:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	2200      	movs	r2, #0
 8003314:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8003316:	68bb      	ldr	r3, [r7, #8]
 8003318:	2200      	movs	r2, #0
 800331a:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 800331c:	68bb      	ldr	r3, [r7, #8]
 800331e:	2200      	movs	r2, #0
 8003320:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	2200      	movs	r2, #0
 8003326:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8003328:	68bb      	ldr	r3, [r7, #8]
 800332a:	2200      	movs	r2, #0
 800332c:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 800332e:	68bb      	ldr	r3, [r7, #8]
 8003330:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8003334:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	f244 52f8 	movw	r2, #17912	; 0x45f8
 800333c:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	685b      	ldr	r3, [r3, #4]
 8003342:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003346:	68bb      	ldr	r3, [r7, #8]
 8003348:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800334a:	68b9      	ldr	r1, [r7, #8]
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	68fa      	ldr	r2, [r7, #12]
 8003350:	3212      	adds	r2, #18
 8003352:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	2b02      	cmp	r3, #2
 800335a:	d80c      	bhi.n	8003376 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6919      	ldr	r1, [r3, #16]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	1c5a      	adds	r2, r3, #1
 8003364:	4613      	mov	r3, r2
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	00db      	lsls	r3, r3, #3
 800336c:	440b      	add	r3, r1
 800336e:	461a      	mov	r2, r3
 8003370:	68bb      	ldr	r3, [r7, #8]
 8003372:	60da      	str	r2, [r3, #12]
 8003374:	e004      	b.n	8003380 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	461a      	mov	r2, r3
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	3301      	adds	r3, #1
 8003384:	60fb      	str	r3, [r7, #12]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2b03      	cmp	r3, #3
 800338a:	d9b5      	bls.n	80032f8 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2200      	movs	r2, #0
 8003390:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	2200      	movs	r2, #0
 8003396:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691a      	ldr	r2, [r3, #16]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80033b6:	60da      	str	r2, [r3, #12]
}
 80033b8:	bf00      	nop
 80033ba:	3714      	adds	r7, #20
 80033bc:	46bd      	mov	sp, r7
 80033be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c2:	4770      	bx	lr

080033c4 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	60f8      	str	r0, [r7, #12]
 80033cc:	60b9      	str	r1, [r7, #8]
 80033ce:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80033d6:	4b23      	ldr	r3, [pc, #140]	; (8003464 <HAL_FLASH_Program+0xa0>)
 80033d8:	7e1b      	ldrb	r3, [r3, #24]
 80033da:	2b01      	cmp	r3, #1
 80033dc:	d101      	bne.n	80033e2 <HAL_FLASH_Program+0x1e>
 80033de:	2302      	movs	r3, #2
 80033e0:	e03b      	b.n	800345a <HAL_FLASH_Program+0x96>
 80033e2:	4b20      	ldr	r3, [pc, #128]	; (8003464 <HAL_FLASH_Program+0xa0>)
 80033e4:	2201      	movs	r2, #1
 80033e6:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80033e8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80033ec:	f000 f860 	bl	80034b0 <FLASH_WaitForLastOperation>
 80033f0:	4603      	mov	r3, r0
 80033f2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80033f4:	7dfb      	ldrb	r3, [r7, #23]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d12b      	bne.n	8003452 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d105      	bne.n	800340c <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8003400:	783b      	ldrb	r3, [r7, #0]
 8003402:	4619      	mov	r1, r3
 8003404:	68b8      	ldr	r0, [r7, #8]
 8003406:	f000 f90b 	bl	8003620 <FLASH_Program_Byte>
 800340a:	e016      	b.n	800343a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	2b01      	cmp	r3, #1
 8003410:	d105      	bne.n	800341e <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8003412:	883b      	ldrh	r3, [r7, #0]
 8003414:	4619      	mov	r1, r3
 8003416:	68b8      	ldr	r0, [r7, #8]
 8003418:	f000 f8de 	bl	80035d8 <FLASH_Program_HalfWord>
 800341c:	e00d      	b.n	800343a <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	2b02      	cmp	r3, #2
 8003422:	d105      	bne.n	8003430 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8003424:	683b      	ldr	r3, [r7, #0]
 8003426:	4619      	mov	r1, r3
 8003428:	68b8      	ldr	r0, [r7, #8]
 800342a:	f000 f8b3 	bl	8003594 <FLASH_Program_Word>
 800342e:	e004      	b.n	800343a <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8003430:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003434:	68b8      	ldr	r0, [r7, #8]
 8003436:	f000 f87b 	bl	8003530 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800343a:	f24c 3050 	movw	r0, #50000	; 0xc350
 800343e:	f000 f837 	bl	80034b0 <FLASH_WaitForLastOperation>
 8003442:	4603      	mov	r3, r0
 8003444:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8003446:	4b08      	ldr	r3, [pc, #32]	; (8003468 <HAL_FLASH_Program+0xa4>)
 8003448:	691b      	ldr	r3, [r3, #16]
 800344a:	4a07      	ldr	r2, [pc, #28]	; (8003468 <HAL_FLASH_Program+0xa4>)
 800344c:	f023 0301 	bic.w	r3, r3, #1
 8003450:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8003452:	4b04      	ldr	r3, [pc, #16]	; (8003464 <HAL_FLASH_Program+0xa0>)
 8003454:	2200      	movs	r2, #0
 8003456:	761a      	strb	r2, [r3, #24]
  
  return status;
 8003458:	7dfb      	ldrb	r3, [r7, #23]
}
 800345a:	4618      	mov	r0, r3
 800345c:	3718      	adds	r7, #24
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	200023cc 	.word	0x200023cc
 8003468:	40023c00 	.word	0x40023c00

0800346c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8003472:	2300      	movs	r3, #0
 8003474:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8003476:	4b0b      	ldr	r3, [pc, #44]	; (80034a4 <HAL_FLASH_Unlock+0x38>)
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	2b00      	cmp	r3, #0
 800347c:	da0b      	bge.n	8003496 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800347e:	4b09      	ldr	r3, [pc, #36]	; (80034a4 <HAL_FLASH_Unlock+0x38>)
 8003480:	4a09      	ldr	r2, [pc, #36]	; (80034a8 <HAL_FLASH_Unlock+0x3c>)
 8003482:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8003484:	4b07      	ldr	r3, [pc, #28]	; (80034a4 <HAL_FLASH_Unlock+0x38>)
 8003486:	4a09      	ldr	r2, [pc, #36]	; (80034ac <HAL_FLASH_Unlock+0x40>)
 8003488:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800348a:	4b06      	ldr	r3, [pc, #24]	; (80034a4 <HAL_FLASH_Unlock+0x38>)
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	da01      	bge.n	8003496 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003496:	79fb      	ldrb	r3, [r7, #7]
}
 8003498:	4618      	mov	r0, r3
 800349a:	370c      	adds	r7, #12
 800349c:	46bd      	mov	sp, r7
 800349e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a2:	4770      	bx	lr
 80034a4:	40023c00 	.word	0x40023c00
 80034a8:	45670123 	.word	0x45670123
 80034ac:	cdef89ab 	.word	0xcdef89ab

080034b0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b084      	sub	sp, #16
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034b8:	2300      	movs	r3, #0
 80034ba:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80034bc:	4b1a      	ldr	r3, [pc, #104]	; (8003528 <FLASH_WaitForLastOperation+0x78>)
 80034be:	2200      	movs	r2, #0
 80034c0:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 80034c2:	f7ff fa83 	bl	80029cc <HAL_GetTick>
 80034c6:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80034c8:	e010      	b.n	80034ec <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034d0:	d00c      	beq.n	80034ec <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d007      	beq.n	80034e8 <FLASH_WaitForLastOperation+0x38>
 80034d8:	f7ff fa78 	bl	80029cc <HAL_GetTick>
 80034dc:	4602      	mov	r2, r0
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	1ad3      	subs	r3, r2, r3
 80034e2:	687a      	ldr	r2, [r7, #4]
 80034e4:	429a      	cmp	r2, r3
 80034e6:	d201      	bcs.n	80034ec <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80034e8:	2303      	movs	r3, #3
 80034ea:	e019      	b.n	8003520 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80034ec:	4b0f      	ldr	r3, [pc, #60]	; (800352c <FLASH_WaitForLastOperation+0x7c>)
 80034ee:	68db      	ldr	r3, [r3, #12]
 80034f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e8      	bne.n	80034ca <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <FLASH_WaitForLastOperation+0x7c>)
 80034fa:	68db      	ldr	r3, [r3, #12]
 80034fc:	f003 0301 	and.w	r3, r3, #1
 8003500:	2b00      	cmp	r3, #0
 8003502:	d002      	beq.n	800350a <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <FLASH_WaitForLastOperation+0x7c>)
 8003506:	2201      	movs	r2, #1
 8003508:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800350a:	4b08      	ldr	r3, [pc, #32]	; (800352c <FLASH_WaitForLastOperation+0x7c>)
 800350c:	68db      	ldr	r3, [r3, #12]
 800350e:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d003      	beq.n	800351e <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8003516:	f000 f8a5 	bl	8003664 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800351a:	2301      	movs	r3, #1
 800351c:	e000      	b.n	8003520 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 800351e:	2300      	movs	r3, #0
  
}  
 8003520:	4618      	mov	r0, r3
 8003522:	3710      	adds	r7, #16
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	200023cc 	.word	0x200023cc
 800352c:	40023c00 	.word	0x40023c00

08003530 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8003530:	b480      	push	{r7}
 8003532:	b085      	sub	sp, #20
 8003534:	af00      	add	r7, sp, #0
 8003536:	60f8      	str	r0, [r7, #12]
 8003538:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800353c:	4b14      	ldr	r3, [pc, #80]	; (8003590 <FLASH_Program_DoubleWord+0x60>)
 800353e:	691b      	ldr	r3, [r3, #16]
 8003540:	4a13      	ldr	r2, [pc, #76]	; (8003590 <FLASH_Program_DoubleWord+0x60>)
 8003542:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003546:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8003548:	4b11      	ldr	r3, [pc, #68]	; (8003590 <FLASH_Program_DoubleWord+0x60>)
 800354a:	691b      	ldr	r3, [r3, #16]
 800354c:	4a10      	ldr	r2, [pc, #64]	; (8003590 <FLASH_Program_DoubleWord+0x60>)
 800354e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8003552:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003554:	4b0e      	ldr	r3, [pc, #56]	; (8003590 <FLASH_Program_DoubleWord+0x60>)
 8003556:	691b      	ldr	r3, [r3, #16]
 8003558:	4a0d      	ldr	r2, [pc, #52]	; (8003590 <FLASH_Program_DoubleWord+0x60>)
 800355a:	f043 0301 	orr.w	r3, r3, #1
 800355e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	683a      	ldr	r2, [r7, #0]
 8003564:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8003566:	f3bf 8f6f 	isb	sy
}
 800356a:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800356c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003570:	f04f 0200 	mov.w	r2, #0
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	000a      	movs	r2, r1
 800357a:	2300      	movs	r3, #0
 800357c:	68f9      	ldr	r1, [r7, #12]
 800357e:	3104      	adds	r1, #4
 8003580:	4613      	mov	r3, r2
 8003582:	600b      	str	r3, [r1, #0]
}
 8003584:	bf00      	nop
 8003586:	3714      	adds	r7, #20
 8003588:	46bd      	mov	sp, r7
 800358a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358e:	4770      	bx	lr
 8003590:	40023c00 	.word	0x40023c00

08003594 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800359e:	4b0d      	ldr	r3, [pc, #52]	; (80035d4 <FLASH_Program_Word+0x40>)
 80035a0:	691b      	ldr	r3, [r3, #16]
 80035a2:	4a0c      	ldr	r2, [pc, #48]	; (80035d4 <FLASH_Program_Word+0x40>)
 80035a4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035a8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 80035aa:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <FLASH_Program_Word+0x40>)
 80035ac:	691b      	ldr	r3, [r3, #16]
 80035ae:	4a09      	ldr	r2, [pc, #36]	; (80035d4 <FLASH_Program_Word+0x40>)
 80035b0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80035b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80035b6:	4b07      	ldr	r3, [pc, #28]	; (80035d4 <FLASH_Program_Word+0x40>)
 80035b8:	691b      	ldr	r3, [r3, #16]
 80035ba:	4a06      	ldr	r2, [pc, #24]	; (80035d4 <FLASH_Program_Word+0x40>)
 80035bc:	f043 0301 	orr.w	r3, r3, #1
 80035c0:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	683a      	ldr	r2, [r7, #0]
 80035c6:	601a      	str	r2, [r3, #0]
}
 80035c8:	bf00      	nop
 80035ca:	370c      	adds	r7, #12
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr
 80035d4:	40023c00 	.word	0x40023c00

080035d8 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80035d8:	b480      	push	{r7}
 80035da:	b083      	sub	sp, #12
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
 80035e0:	460b      	mov	r3, r1
 80035e2:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80035e4:	4b0d      	ldr	r3, [pc, #52]	; (800361c <FLASH_Program_HalfWord+0x44>)
 80035e6:	691b      	ldr	r3, [r3, #16]
 80035e8:	4a0c      	ldr	r2, [pc, #48]	; (800361c <FLASH_Program_HalfWord+0x44>)
 80035ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80035f0:	4b0a      	ldr	r3, [pc, #40]	; (800361c <FLASH_Program_HalfWord+0x44>)
 80035f2:	691b      	ldr	r3, [r3, #16]
 80035f4:	4a09      	ldr	r2, [pc, #36]	; (800361c <FLASH_Program_HalfWord+0x44>)
 80035f6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80035fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80035fc:	4b07      	ldr	r3, [pc, #28]	; (800361c <FLASH_Program_HalfWord+0x44>)
 80035fe:	691b      	ldr	r3, [r3, #16]
 8003600:	4a06      	ldr	r2, [pc, #24]	; (800361c <FLASH_Program_HalfWord+0x44>)
 8003602:	f043 0301 	orr.w	r3, r3, #1
 8003606:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	887a      	ldrh	r2, [r7, #2]
 800360c:	801a      	strh	r2, [r3, #0]
}
 800360e:	bf00      	nop
 8003610:	370c      	adds	r7, #12
 8003612:	46bd      	mov	sp, r7
 8003614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003618:	4770      	bx	lr
 800361a:	bf00      	nop
 800361c:	40023c00 	.word	0x40023c00

08003620 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	460b      	mov	r3, r1
 800362a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800362c:	4b0c      	ldr	r3, [pc, #48]	; (8003660 <FLASH_Program_Byte+0x40>)
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	4a0b      	ldr	r2, [pc, #44]	; (8003660 <FLASH_Program_Byte+0x40>)
 8003632:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003636:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8003638:	4b09      	ldr	r3, [pc, #36]	; (8003660 <FLASH_Program_Byte+0x40>)
 800363a:	4a09      	ldr	r2, [pc, #36]	; (8003660 <FLASH_Program_Byte+0x40>)
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8003640:	4b07      	ldr	r3, [pc, #28]	; (8003660 <FLASH_Program_Byte+0x40>)
 8003642:	691b      	ldr	r3, [r3, #16]
 8003644:	4a06      	ldr	r2, [pc, #24]	; (8003660 <FLASH_Program_Byte+0x40>)
 8003646:	f043 0301 	orr.w	r3, r3, #1
 800364a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	78fa      	ldrb	r2, [r7, #3]
 8003650:	701a      	strb	r2, [r3, #0]
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr
 800365e:	bf00      	nop
 8003660:	40023c00 	.word	0x40023c00

08003664 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8003664:	b480      	push	{r7}
 8003666:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8003668:	4b2f      	ldr	r3, [pc, #188]	; (8003728 <FLASH_SetErrorCode+0xc4>)
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	f003 0310 	and.w	r3, r3, #16
 8003670:	2b00      	cmp	r3, #0
 8003672:	d008      	beq.n	8003686 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8003674:	4b2d      	ldr	r3, [pc, #180]	; (800372c <FLASH_SetErrorCode+0xc8>)
 8003676:	69db      	ldr	r3, [r3, #28]
 8003678:	f043 0310 	orr.w	r3, r3, #16
 800367c:	4a2b      	ldr	r2, [pc, #172]	; (800372c <FLASH_SetErrorCode+0xc8>)
 800367e:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8003680:	4b29      	ldr	r3, [pc, #164]	; (8003728 <FLASH_SetErrorCode+0xc4>)
 8003682:	2210      	movs	r2, #16
 8003684:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8003686:	4b28      	ldr	r3, [pc, #160]	; (8003728 <FLASH_SetErrorCode+0xc4>)
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	2b00      	cmp	r3, #0
 8003690:	d008      	beq.n	80036a4 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8003692:	4b26      	ldr	r3, [pc, #152]	; (800372c <FLASH_SetErrorCode+0xc8>)
 8003694:	69db      	ldr	r3, [r3, #28]
 8003696:	f043 0308 	orr.w	r3, r3, #8
 800369a:	4a24      	ldr	r2, [pc, #144]	; (800372c <FLASH_SetErrorCode+0xc8>)
 800369c:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800369e:	4b22      	ldr	r3, [pc, #136]	; (8003728 <FLASH_SetErrorCode+0xc4>)
 80036a0:	2220      	movs	r2, #32
 80036a2:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80036a4:	4b20      	ldr	r3, [pc, #128]	; (8003728 <FLASH_SetErrorCode+0xc4>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d008      	beq.n	80036c2 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80036b0:	4b1e      	ldr	r3, [pc, #120]	; (800372c <FLASH_SetErrorCode+0xc8>)
 80036b2:	69db      	ldr	r3, [r3, #28]
 80036b4:	f043 0304 	orr.w	r3, r3, #4
 80036b8:	4a1c      	ldr	r2, [pc, #112]	; (800372c <FLASH_SetErrorCode+0xc8>)
 80036ba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80036bc:	4b1a      	ldr	r3, [pc, #104]	; (8003728 <FLASH_SetErrorCode+0xc4>)
 80036be:	2240      	movs	r2, #64	; 0x40
 80036c0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80036c2:	4b19      	ldr	r3, [pc, #100]	; (8003728 <FLASH_SetErrorCode+0xc4>)
 80036c4:	68db      	ldr	r3, [r3, #12]
 80036c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d008      	beq.n	80036e0 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80036ce:	4b17      	ldr	r3, [pc, #92]	; (800372c <FLASH_SetErrorCode+0xc8>)
 80036d0:	69db      	ldr	r3, [r3, #28]
 80036d2:	f043 0302 	orr.w	r3, r3, #2
 80036d6:	4a15      	ldr	r2, [pc, #84]	; (800372c <FLASH_SetErrorCode+0xc8>)
 80036d8:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80036da:	4b13      	ldr	r3, [pc, #76]	; (8003728 <FLASH_SetErrorCode+0xc4>)
 80036dc:	2280      	movs	r2, #128	; 0x80
 80036de:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80036e0:	4b11      	ldr	r3, [pc, #68]	; (8003728 <FLASH_SetErrorCode+0xc4>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d009      	beq.n	8003700 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80036ec:	4b0f      	ldr	r3, [pc, #60]	; (800372c <FLASH_SetErrorCode+0xc8>)
 80036ee:	69db      	ldr	r3, [r3, #28]
 80036f0:	f043 0301 	orr.w	r3, r3, #1
 80036f4:	4a0d      	ldr	r2, [pc, #52]	; (800372c <FLASH_SetErrorCode+0xc8>)
 80036f6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80036f8:	4b0b      	ldr	r3, [pc, #44]	; (8003728 <FLASH_SetErrorCode+0xc4>)
 80036fa:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036fe:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8003700:	4b09      	ldr	r3, [pc, #36]	; (8003728 <FLASH_SetErrorCode+0xc4>)
 8003702:	68db      	ldr	r3, [r3, #12]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d008      	beq.n	800371e <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800370c:	4b07      	ldr	r3, [pc, #28]	; (800372c <FLASH_SetErrorCode+0xc8>)
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	f043 0320 	orr.w	r3, r3, #32
 8003714:	4a05      	ldr	r2, [pc, #20]	; (800372c <FLASH_SetErrorCode+0xc8>)
 8003716:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8003718:	4b03      	ldr	r3, [pc, #12]	; (8003728 <FLASH_SetErrorCode+0xc4>)
 800371a:	2202      	movs	r2, #2
 800371c:	60da      	str	r2, [r3, #12]
  }
}
 800371e:	bf00      	nop
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr
 8003728:	40023c00 	.word	0x40023c00
 800372c:	200023cc 	.word	0x200023cc

08003730 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
 8003738:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 800373e:	2300      	movs	r3, #0
 8003740:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003742:	4b32      	ldr	r3, [pc, #200]	; (800380c <HAL_FLASHEx_Erase+0xdc>)
 8003744:	7e1b      	ldrb	r3, [r3, #24]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d101      	bne.n	800374e <HAL_FLASHEx_Erase+0x1e>
 800374a:	2302      	movs	r3, #2
 800374c:	e05a      	b.n	8003804 <HAL_FLASHEx_Erase+0xd4>
 800374e:	4b2f      	ldr	r3, [pc, #188]	; (800380c <HAL_FLASHEx_Erase+0xdc>)
 8003750:	2201      	movs	r2, #1
 8003752:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003754:	f24c 3050 	movw	r0, #50000	; 0xc350
 8003758:	f7ff feaa 	bl	80034b0 <FLASH_WaitForLastOperation>
 800375c:	4603      	mov	r3, r0
 800375e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003760:	7bfb      	ldrb	r3, [r7, #15]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d14a      	bne.n	80037fc <HAL_FLASHEx_Erase+0xcc>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	f04f 32ff 	mov.w	r2, #4294967295
 800376c:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	2b01      	cmp	r3, #1
 8003774:	d117      	bne.n	80037a6 <HAL_FLASHEx_Erase+0x76>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	691b      	ldr	r3, [r3, #16]
 800377a:	b2da      	uxtb	r2, r3
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	685b      	ldr	r3, [r3, #4]
 8003780:	4619      	mov	r1, r3
 8003782:	4610      	mov	r0, r2
 8003784:	f000 f846 	bl	8003814 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003788:	f24c 3050 	movw	r0, #50000	; 0xc350
 800378c:	f7ff fe90 	bl	80034b0 <FLASH_WaitForLastOperation>
 8003790:	4603      	mov	r3, r0
 8003792:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8003794:	4b1e      	ldr	r3, [pc, #120]	; (8003810 <HAL_FLASHEx_Erase+0xe0>)
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	4a1d      	ldr	r2, [pc, #116]	; (8003810 <HAL_FLASHEx_Erase+0xe0>)
 800379a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800379e:	f023 0304 	bic.w	r3, r3, #4
 80037a2:	6113      	str	r3, [r2, #16]
 80037a4:	e028      	b.n	80037f8 <HAL_FLASHEx_Erase+0xc8>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	689b      	ldr	r3, [r3, #8]
 80037aa:	60bb      	str	r3, [r7, #8]
 80037ac:	e01c      	b.n	80037e8 <HAL_FLASHEx_Erase+0xb8>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	691b      	ldr	r3, [r3, #16]
 80037b2:	b2db      	uxtb	r3, r3
 80037b4:	4619      	mov	r1, r3
 80037b6:	68b8      	ldr	r0, [r7, #8]
 80037b8:	f000 f866 	bl	8003888 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80037bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80037c0:	f7ff fe76 	bl	80034b0 <FLASH_WaitForLastOperation>
 80037c4:	4603      	mov	r3, r0
 80037c6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80037c8:	4b11      	ldr	r3, [pc, #68]	; (8003810 <HAL_FLASHEx_Erase+0xe0>)
 80037ca:	691b      	ldr	r3, [r3, #16]
 80037cc:	4a10      	ldr	r2, [pc, #64]	; (8003810 <HAL_FLASHEx_Erase+0xe0>)
 80037ce:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80037d2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80037d4:	7bfb      	ldrb	r3, [r7, #15]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <HAL_FLASHEx_Erase+0xb2>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	68ba      	ldr	r2, [r7, #8]
 80037de:	601a      	str	r2, [r3, #0]
          break;
 80037e0:	e00a      	b.n	80037f8 <HAL_FLASHEx_Erase+0xc8>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80037e2:	68bb      	ldr	r3, [r7, #8]
 80037e4:	3301      	adds	r3, #1
 80037e6:	60bb      	str	r3, [r7, #8]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	68da      	ldr	r2, [r3, #12]
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	689b      	ldr	r3, [r3, #8]
 80037f0:	4413      	add	r3, r2
 80037f2:	68ba      	ldr	r2, [r7, #8]
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d3da      	bcc.n	80037ae <HAL_FLASHEx_Erase+0x7e>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80037f8:	f000 f894 	bl	8003924 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80037fc:	4b03      	ldr	r3, [pc, #12]	; (800380c <HAL_FLASHEx_Erase+0xdc>)
 80037fe:	2200      	movs	r2, #0
 8003800:	761a      	strb	r2, [r3, #24]

  return status;
 8003802:	7bfb      	ldrb	r3, [r7, #15]
}
 8003804:	4618      	mov	r0, r3
 8003806:	3710      	adds	r7, #16
 8003808:	46bd      	mov	sp, r7
 800380a:	bd80      	pop	{r7, pc}
 800380c:	200023cc 	.word	0x200023cc
 8003810:	40023c00 	.word	0x40023c00

08003814 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8003814:	b480      	push	{r7}
 8003816:	b083      	sub	sp, #12
 8003818:	af00      	add	r7, sp, #0
 800381a:	4603      	mov	r3, r0
 800381c:	6039      	str	r1, [r7, #0]
 800381e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* if the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8003820:	4b18      	ldr	r3, [pc, #96]	; (8003884 <FLASH_MassErase+0x70>)
 8003822:	691b      	ldr	r3, [r3, #16]
 8003824:	4a17      	ldr	r2, [pc, #92]	; (8003884 <FLASH_MassErase+0x70>)
 8003826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800382a:	6113      	str	r3, [r2, #16]

  if (Banks == FLASH_BANK_BOTH)
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	2b03      	cmp	r3, #3
 8003830:	d108      	bne.n	8003844 <FLASH_MassErase+0x30>
  {
    /* bank1 & bank2 will be erased*/
    FLASH->CR |= FLASH_MER_BIT;
 8003832:	4b14      	ldr	r3, [pc, #80]	; (8003884 <FLASH_MassErase+0x70>)
 8003834:	691b      	ldr	r3, [r3, #16]
 8003836:	4a13      	ldr	r2, [pc, #76]	; (8003884 <FLASH_MassErase+0x70>)
 8003838:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800383c:	f043 0304 	orr.w	r3, r3, #4
 8003840:	6113      	str	r3, [r2, #16]
 8003842:	e00f      	b.n	8003864 <FLASH_MassErase+0x50>
  }
  else if (Banks == FLASH_BANK_1)
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	2b01      	cmp	r3, #1
 8003848:	d106      	bne.n	8003858 <FLASH_MassErase+0x44>
  {
    /*Only bank1 will be erased*/
    FLASH->CR |= FLASH_CR_MER1;
 800384a:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <FLASH_MassErase+0x70>)
 800384c:	691b      	ldr	r3, [r3, #16]
 800384e:	4a0d      	ldr	r2, [pc, #52]	; (8003884 <FLASH_MassErase+0x70>)
 8003850:	f043 0304 	orr.w	r3, r3, #4
 8003854:	6113      	str	r3, [r2, #16]
 8003856:	e005      	b.n	8003864 <FLASH_MassErase+0x50>
  }
  else
  {
    /*Only bank2 will be erased*/
    FLASH->CR |= FLASH_CR_MER2;
 8003858:	4b0a      	ldr	r3, [pc, #40]	; (8003884 <FLASH_MassErase+0x70>)
 800385a:	691b      	ldr	r3, [r3, #16]
 800385c:	4a09      	ldr	r2, [pc, #36]	; (8003884 <FLASH_MassErase+0x70>)
 800385e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003862:	6113      	str	r3, [r2, #16]
  }
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8003864:	4b07      	ldr	r3, [pc, #28]	; (8003884 <FLASH_MassErase+0x70>)
 8003866:	691a      	ldr	r2, [r3, #16]
 8003868:	79fb      	ldrb	r3, [r7, #7]
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	4313      	orrs	r3, r2
 800386e:	4a05      	ldr	r2, [pc, #20]	; (8003884 <FLASH_MassErase+0x70>)
 8003870:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003874:	6113      	str	r3, [r2, #16]
}
 8003876:	bf00      	nop
 8003878:	370c      	adds	r7, #12
 800387a:	46bd      	mov	sp, r7
 800387c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003880:	4770      	bx	lr
 8003882:	bf00      	nop
 8003884:	40023c00 	.word	0x40023c00

08003888 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8003888:	b480      	push	{r7}
 800388a:	b085      	sub	sp, #20
 800388c:	af00      	add	r7, sp, #0
 800388e:	6078      	str	r0, [r7, #4]
 8003890:	460b      	mov	r3, r1
 8003892:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8003894:	2300      	movs	r3, #0
 8003896:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8003898:	78fb      	ldrb	r3, [r7, #3]
 800389a:	2b00      	cmp	r3, #0
 800389c:	d102      	bne.n	80038a4 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800389e:	2300      	movs	r3, #0
 80038a0:	60fb      	str	r3, [r7, #12]
 80038a2:	e010      	b.n	80038c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80038a4:	78fb      	ldrb	r3, [r7, #3]
 80038a6:	2b01      	cmp	r3, #1
 80038a8:	d103      	bne.n	80038b2 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80038aa:	f44f 7380 	mov.w	r3, #256	; 0x100
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	e009      	b.n	80038c6 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80038b2:	78fb      	ldrb	r3, [r7, #3]
 80038b4:	2b02      	cmp	r3, #2
 80038b6:	d103      	bne.n	80038c0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80038b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80038bc:	60fb      	str	r3, [r7, #12]
 80038be:	e002      	b.n	80038c6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80038c0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038c4:	60fb      	str	r3, [r7, #12]
  }

  /* Need to add offset of 4 when sector higher than FLASH_SECTOR_11 */
  if (Sector > FLASH_SECTOR_11)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	2b0b      	cmp	r3, #11
 80038ca:	d902      	bls.n	80038d2 <FLASH_Erase_Sector+0x4a>
  {
    Sector += 4U;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	3304      	adds	r3, #4
 80038d0:	607b      	str	r3, [r7, #4]
  }
  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80038d2:	4b13      	ldr	r3, [pc, #76]	; (8003920 <FLASH_Erase_Sector+0x98>)
 80038d4:	691b      	ldr	r3, [r3, #16]
 80038d6:	4a12      	ldr	r2, [pc, #72]	; (8003920 <FLASH_Erase_Sector+0x98>)
 80038d8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80038dc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80038de:	4b10      	ldr	r3, [pc, #64]	; (8003920 <FLASH_Erase_Sector+0x98>)
 80038e0:	691a      	ldr	r2, [r3, #16]
 80038e2:	490f      	ldr	r1, [pc, #60]	; (8003920 <FLASH_Erase_Sector+0x98>)
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	4313      	orrs	r3, r2
 80038e8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80038ea:	4b0d      	ldr	r3, [pc, #52]	; (8003920 <FLASH_Erase_Sector+0x98>)
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	4a0c      	ldr	r2, [pc, #48]	; (8003920 <FLASH_Erase_Sector+0x98>)
 80038f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80038f4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80038f6:	4b0a      	ldr	r3, [pc, #40]	; (8003920 <FLASH_Erase_Sector+0x98>)
 80038f8:	691a      	ldr	r2, [r3, #16]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	00db      	lsls	r3, r3, #3
 80038fe:	4313      	orrs	r3, r2
 8003900:	4a07      	ldr	r2, [pc, #28]	; (8003920 <FLASH_Erase_Sector+0x98>)
 8003902:	f043 0302 	orr.w	r3, r3, #2
 8003906:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8003908:	4b05      	ldr	r3, [pc, #20]	; (8003920 <FLASH_Erase_Sector+0x98>)
 800390a:	691b      	ldr	r3, [r3, #16]
 800390c:	4a04      	ldr	r2, [pc, #16]	; (8003920 <FLASH_Erase_Sector+0x98>)
 800390e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003912:	6113      	str	r3, [r2, #16]
}
 8003914:	bf00      	nop
 8003916:	3714      	adds	r7, #20
 8003918:	46bd      	mov	sp, r7
 800391a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391e:	4770      	bx	lr
 8003920:	40023c00 	.word	0x40023c00

08003924 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8003924:	b480      	push	{r7}
 8003926:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8003928:	4b20      	ldr	r3, [pc, #128]	; (80039ac <FLASH_FlushCaches+0x88>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003930:	2b00      	cmp	r3, #0
 8003932:	d017      	beq.n	8003964 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8003934:	4b1d      	ldr	r3, [pc, #116]	; (80039ac <FLASH_FlushCaches+0x88>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a1c      	ldr	r2, [pc, #112]	; (80039ac <FLASH_FlushCaches+0x88>)
 800393a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800393e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8003940:	4b1a      	ldr	r3, [pc, #104]	; (80039ac <FLASH_FlushCaches+0x88>)
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	4a19      	ldr	r2, [pc, #100]	; (80039ac <FLASH_FlushCaches+0x88>)
 8003946:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800394a:	6013      	str	r3, [r2, #0]
 800394c:	4b17      	ldr	r3, [pc, #92]	; (80039ac <FLASH_FlushCaches+0x88>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	4a16      	ldr	r2, [pc, #88]	; (80039ac <FLASH_FlushCaches+0x88>)
 8003952:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003956:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003958:	4b14      	ldr	r3, [pc, #80]	; (80039ac <FLASH_FlushCaches+0x88>)
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	4a13      	ldr	r2, [pc, #76]	; (80039ac <FLASH_FlushCaches+0x88>)
 800395e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003962:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8003964:	4b11      	ldr	r3, [pc, #68]	; (80039ac <FLASH_FlushCaches+0x88>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800396c:	2b00      	cmp	r3, #0
 800396e:	d017      	beq.n	80039a0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8003970:	4b0e      	ldr	r3, [pc, #56]	; (80039ac <FLASH_FlushCaches+0x88>)
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	4a0d      	ldr	r2, [pc, #52]	; (80039ac <FLASH_FlushCaches+0x88>)
 8003976:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800397a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800397c:	4b0b      	ldr	r3, [pc, #44]	; (80039ac <FLASH_FlushCaches+0x88>)
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	4a0a      	ldr	r2, [pc, #40]	; (80039ac <FLASH_FlushCaches+0x88>)
 8003982:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003986:	6013      	str	r3, [r2, #0]
 8003988:	4b08      	ldr	r3, [pc, #32]	; (80039ac <FLASH_FlushCaches+0x88>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a07      	ldr	r2, [pc, #28]	; (80039ac <FLASH_FlushCaches+0x88>)
 800398e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003992:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8003994:	4b05      	ldr	r3, [pc, #20]	; (80039ac <FLASH_FlushCaches+0x88>)
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a04      	ldr	r2, [pc, #16]	; (80039ac <FLASH_FlushCaches+0x88>)
 800399a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800399e:	6013      	str	r3, [r2, #0]
  }
}
 80039a0:	bf00      	nop
 80039a2:	46bd      	mov	sp, r7
 80039a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a8:	4770      	bx	lr
 80039aa:	bf00      	nop
 80039ac:	40023c00 	.word	0x40023c00

080039b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80039b0:	b480      	push	{r7}
 80039b2:	b089      	sub	sp, #36	; 0x24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80039c2:	2300      	movs	r3, #0
 80039c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80039c6:	2300      	movs	r3, #0
 80039c8:	61fb      	str	r3, [r7, #28]
 80039ca:	e177      	b.n	8003cbc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80039cc:	2201      	movs	r2, #1
 80039ce:	69fb      	ldr	r3, [r7, #28]
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	4013      	ands	r3, r2
 80039de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80039e0:	693a      	ldr	r2, [r7, #16]
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	429a      	cmp	r2, r3
 80039e6:	f040 8166 	bne.w	8003cb6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f003 0303 	and.w	r3, r3, #3
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d005      	beq.n	8003a02 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	d130      	bne.n	8003a64 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	689b      	ldr	r3, [r3, #8]
 8003a06:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	005b      	lsls	r3, r3, #1
 8003a0c:	2203      	movs	r2, #3
 8003a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a12:	43db      	mvns	r3, r3
 8003a14:	69ba      	ldr	r2, [r7, #24]
 8003a16:	4013      	ands	r3, r2
 8003a18:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	68da      	ldr	r2, [r3, #12]
 8003a1e:	69fb      	ldr	r3, [r7, #28]
 8003a20:	005b      	lsls	r3, r3, #1
 8003a22:	fa02 f303 	lsl.w	r3, r2, r3
 8003a26:	69ba      	ldr	r2, [r7, #24]
 8003a28:	4313      	orrs	r3, r2
 8003a2a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	69ba      	ldr	r2, [r7, #24]
 8003a30:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003a38:	2201      	movs	r2, #1
 8003a3a:	69fb      	ldr	r3, [r7, #28]
 8003a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a40:	43db      	mvns	r3, r3
 8003a42:	69ba      	ldr	r2, [r7, #24]
 8003a44:	4013      	ands	r3, r2
 8003a46:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	091b      	lsrs	r3, r3, #4
 8003a4e:	f003 0201 	and.w	r2, r3, #1
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	fa02 f303 	lsl.w	r3, r2, r3
 8003a58:	69ba      	ldr	r2, [r7, #24]
 8003a5a:	4313      	orrs	r3, r2
 8003a5c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	69ba      	ldr	r2, [r7, #24]
 8003a62:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	685b      	ldr	r3, [r3, #4]
 8003a68:	f003 0303 	and.w	r3, r3, #3
 8003a6c:	2b03      	cmp	r3, #3
 8003a6e:	d017      	beq.n	8003aa0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003a76:	69fb      	ldr	r3, [r7, #28]
 8003a78:	005b      	lsls	r3, r3, #1
 8003a7a:	2203      	movs	r2, #3
 8003a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8003a80:	43db      	mvns	r3, r3
 8003a82:	69ba      	ldr	r2, [r7, #24]
 8003a84:	4013      	ands	r3, r2
 8003a86:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	689a      	ldr	r2, [r3, #8]
 8003a8c:	69fb      	ldr	r3, [r7, #28]
 8003a8e:	005b      	lsls	r3, r3, #1
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	69ba      	ldr	r2, [r7, #24]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	69ba      	ldr	r2, [r7, #24]
 8003a9e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	685b      	ldr	r3, [r3, #4]
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	2b02      	cmp	r3, #2
 8003aaa:	d123      	bne.n	8003af4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003aac:	69fb      	ldr	r3, [r7, #28]
 8003aae:	08da      	lsrs	r2, r3, #3
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	3208      	adds	r2, #8
 8003ab4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	f003 0307 	and.w	r3, r3, #7
 8003ac0:	009b      	lsls	r3, r3, #2
 8003ac2:	220f      	movs	r2, #15
 8003ac4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ac8:	43db      	mvns	r3, r3
 8003aca:	69ba      	ldr	r2, [r7, #24]
 8003acc:	4013      	ands	r3, r2
 8003ace:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	691a      	ldr	r2, [r3, #16]
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	f003 0307 	and.w	r3, r3, #7
 8003ada:	009b      	lsls	r3, r3, #2
 8003adc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ae0:	69ba      	ldr	r2, [r7, #24]
 8003ae2:	4313      	orrs	r3, r2
 8003ae4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003ae6:	69fb      	ldr	r3, [r7, #28]
 8003ae8:	08da      	lsrs	r2, r3, #3
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	3208      	adds	r2, #8
 8003aee:	69b9      	ldr	r1, [r7, #24]
 8003af0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003afa:	69fb      	ldr	r3, [r7, #28]
 8003afc:	005b      	lsls	r3, r3, #1
 8003afe:	2203      	movs	r2, #3
 8003b00:	fa02 f303 	lsl.w	r3, r2, r3
 8003b04:	43db      	mvns	r3, r3
 8003b06:	69ba      	ldr	r2, [r7, #24]
 8003b08:	4013      	ands	r3, r2
 8003b0a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	685b      	ldr	r3, [r3, #4]
 8003b10:	f003 0203 	and.w	r2, r3, #3
 8003b14:	69fb      	ldr	r3, [r7, #28]
 8003b16:	005b      	lsls	r3, r3, #1
 8003b18:	fa02 f303 	lsl.w	r3, r2, r3
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69ba      	ldr	r2, [r7, #24]
 8003b26:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	685b      	ldr	r3, [r3, #4]
 8003b2c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	f000 80c0 	beq.w	8003cb6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b36:	2300      	movs	r3, #0
 8003b38:	60fb      	str	r3, [r7, #12]
 8003b3a:	4b66      	ldr	r3, [pc, #408]	; (8003cd4 <HAL_GPIO_Init+0x324>)
 8003b3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b3e:	4a65      	ldr	r2, [pc, #404]	; (8003cd4 <HAL_GPIO_Init+0x324>)
 8003b40:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b44:	6453      	str	r3, [r2, #68]	; 0x44
 8003b46:	4b63      	ldr	r3, [pc, #396]	; (8003cd4 <HAL_GPIO_Init+0x324>)
 8003b48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b4e:	60fb      	str	r3, [r7, #12]
 8003b50:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003b52:	4a61      	ldr	r2, [pc, #388]	; (8003cd8 <HAL_GPIO_Init+0x328>)
 8003b54:	69fb      	ldr	r3, [r7, #28]
 8003b56:	089b      	lsrs	r3, r3, #2
 8003b58:	3302      	adds	r3, #2
 8003b5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003b60:	69fb      	ldr	r3, [r7, #28]
 8003b62:	f003 0303 	and.w	r3, r3, #3
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	220f      	movs	r2, #15
 8003b6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003b6e:	43db      	mvns	r3, r3
 8003b70:	69ba      	ldr	r2, [r7, #24]
 8003b72:	4013      	ands	r3, r2
 8003b74:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a58      	ldr	r2, [pc, #352]	; (8003cdc <HAL_GPIO_Init+0x32c>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d037      	beq.n	8003bee <HAL_GPIO_Init+0x23e>
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	4a57      	ldr	r2, [pc, #348]	; (8003ce0 <HAL_GPIO_Init+0x330>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d031      	beq.n	8003bea <HAL_GPIO_Init+0x23a>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	4a56      	ldr	r2, [pc, #344]	; (8003ce4 <HAL_GPIO_Init+0x334>)
 8003b8a:	4293      	cmp	r3, r2
 8003b8c:	d02b      	beq.n	8003be6 <HAL_GPIO_Init+0x236>
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	4a55      	ldr	r2, [pc, #340]	; (8003ce8 <HAL_GPIO_Init+0x338>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d025      	beq.n	8003be2 <HAL_GPIO_Init+0x232>
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	4a54      	ldr	r2, [pc, #336]	; (8003cec <HAL_GPIO_Init+0x33c>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d01f      	beq.n	8003bde <HAL_GPIO_Init+0x22e>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	4a53      	ldr	r2, [pc, #332]	; (8003cf0 <HAL_GPIO_Init+0x340>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d019      	beq.n	8003bda <HAL_GPIO_Init+0x22a>
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4a52      	ldr	r2, [pc, #328]	; (8003cf4 <HAL_GPIO_Init+0x344>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d013      	beq.n	8003bd6 <HAL_GPIO_Init+0x226>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	4a51      	ldr	r2, [pc, #324]	; (8003cf8 <HAL_GPIO_Init+0x348>)
 8003bb2:	4293      	cmp	r3, r2
 8003bb4:	d00d      	beq.n	8003bd2 <HAL_GPIO_Init+0x222>
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	4a50      	ldr	r2, [pc, #320]	; (8003cfc <HAL_GPIO_Init+0x34c>)
 8003bba:	4293      	cmp	r3, r2
 8003bbc:	d007      	beq.n	8003bce <HAL_GPIO_Init+0x21e>
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	4a4f      	ldr	r2, [pc, #316]	; (8003d00 <HAL_GPIO_Init+0x350>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d101      	bne.n	8003bca <HAL_GPIO_Init+0x21a>
 8003bc6:	2309      	movs	r3, #9
 8003bc8:	e012      	b.n	8003bf0 <HAL_GPIO_Init+0x240>
 8003bca:	230a      	movs	r3, #10
 8003bcc:	e010      	b.n	8003bf0 <HAL_GPIO_Init+0x240>
 8003bce:	2308      	movs	r3, #8
 8003bd0:	e00e      	b.n	8003bf0 <HAL_GPIO_Init+0x240>
 8003bd2:	2307      	movs	r3, #7
 8003bd4:	e00c      	b.n	8003bf0 <HAL_GPIO_Init+0x240>
 8003bd6:	2306      	movs	r3, #6
 8003bd8:	e00a      	b.n	8003bf0 <HAL_GPIO_Init+0x240>
 8003bda:	2305      	movs	r3, #5
 8003bdc:	e008      	b.n	8003bf0 <HAL_GPIO_Init+0x240>
 8003bde:	2304      	movs	r3, #4
 8003be0:	e006      	b.n	8003bf0 <HAL_GPIO_Init+0x240>
 8003be2:	2303      	movs	r3, #3
 8003be4:	e004      	b.n	8003bf0 <HAL_GPIO_Init+0x240>
 8003be6:	2302      	movs	r3, #2
 8003be8:	e002      	b.n	8003bf0 <HAL_GPIO_Init+0x240>
 8003bea:	2301      	movs	r3, #1
 8003bec:	e000      	b.n	8003bf0 <HAL_GPIO_Init+0x240>
 8003bee:	2300      	movs	r3, #0
 8003bf0:	69fa      	ldr	r2, [r7, #28]
 8003bf2:	f002 0203 	and.w	r2, r2, #3
 8003bf6:	0092      	lsls	r2, r2, #2
 8003bf8:	4093      	lsls	r3, r2
 8003bfa:	69ba      	ldr	r2, [r7, #24]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003c00:	4935      	ldr	r1, [pc, #212]	; (8003cd8 <HAL_GPIO_Init+0x328>)
 8003c02:	69fb      	ldr	r3, [r7, #28]
 8003c04:	089b      	lsrs	r3, r3, #2
 8003c06:	3302      	adds	r3, #2
 8003c08:	69ba      	ldr	r2, [r7, #24]
 8003c0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003c0e:	4b3d      	ldr	r3, [pc, #244]	; (8003d04 <HAL_GPIO_Init+0x354>)
 8003c10:	689b      	ldr	r3, [r3, #8]
 8003c12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	43db      	mvns	r3, r3
 8003c18:	69ba      	ldr	r2, [r7, #24]
 8003c1a:	4013      	ands	r3, r2
 8003c1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003c1e:	683b      	ldr	r3, [r7, #0]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d003      	beq.n	8003c32 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003c2a:	69ba      	ldr	r2, [r7, #24]
 8003c2c:	693b      	ldr	r3, [r7, #16]
 8003c2e:	4313      	orrs	r3, r2
 8003c30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003c32:	4a34      	ldr	r2, [pc, #208]	; (8003d04 <HAL_GPIO_Init+0x354>)
 8003c34:	69bb      	ldr	r3, [r7, #24]
 8003c36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003c38:	4b32      	ldr	r3, [pc, #200]	; (8003d04 <HAL_GPIO_Init+0x354>)
 8003c3a:	68db      	ldr	r3, [r3, #12]
 8003c3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c3e:	693b      	ldr	r3, [r7, #16]
 8003c40:	43db      	mvns	r3, r3
 8003c42:	69ba      	ldr	r2, [r7, #24]
 8003c44:	4013      	ands	r3, r2
 8003c46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003c54:	69ba      	ldr	r2, [r7, #24]
 8003c56:	693b      	ldr	r3, [r7, #16]
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003c5c:	4a29      	ldr	r2, [pc, #164]	; (8003d04 <HAL_GPIO_Init+0x354>)
 8003c5e:	69bb      	ldr	r3, [r7, #24]
 8003c60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003c62:	4b28      	ldr	r3, [pc, #160]	; (8003d04 <HAL_GPIO_Init+0x354>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	43db      	mvns	r3, r3
 8003c6c:	69ba      	ldr	r2, [r7, #24]
 8003c6e:	4013      	ands	r3, r2
 8003c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	685b      	ldr	r3, [r3, #4]
 8003c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d003      	beq.n	8003c86 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003c7e:	69ba      	ldr	r2, [r7, #24]
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	4313      	orrs	r3, r2
 8003c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003c86:	4a1f      	ldr	r2, [pc, #124]	; (8003d04 <HAL_GPIO_Init+0x354>)
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003c8c:	4b1d      	ldr	r3, [pc, #116]	; (8003d04 <HAL_GPIO_Init+0x354>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	43db      	mvns	r3, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d003      	beq.n	8003cb0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003ca8:	69ba      	ldr	r2, [r7, #24]
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	4313      	orrs	r3, r2
 8003cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003cb0:	4a14      	ldr	r2, [pc, #80]	; (8003d04 <HAL_GPIO_Init+0x354>)
 8003cb2:	69bb      	ldr	r3, [r7, #24]
 8003cb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003cb6:	69fb      	ldr	r3, [r7, #28]
 8003cb8:	3301      	adds	r3, #1
 8003cba:	61fb      	str	r3, [r7, #28]
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	2b0f      	cmp	r3, #15
 8003cc0:	f67f ae84 	bls.w	80039cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003cc4:	bf00      	nop
 8003cc6:	bf00      	nop
 8003cc8:	3724      	adds	r7, #36	; 0x24
 8003cca:	46bd      	mov	sp, r7
 8003ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd0:	4770      	bx	lr
 8003cd2:	bf00      	nop
 8003cd4:	40023800 	.word	0x40023800
 8003cd8:	40013800 	.word	0x40013800
 8003cdc:	40020000 	.word	0x40020000
 8003ce0:	40020400 	.word	0x40020400
 8003ce4:	40020800 	.word	0x40020800
 8003ce8:	40020c00 	.word	0x40020c00
 8003cec:	40021000 	.word	0x40021000
 8003cf0:	40021400 	.word	0x40021400
 8003cf4:	40021800 	.word	0x40021800
 8003cf8:	40021c00 	.word	0x40021c00
 8003cfc:	40022000 	.word	0x40022000
 8003d00:	40022400 	.word	0x40022400
 8003d04:	40013c00 	.word	0x40013c00

08003d08 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	460b      	mov	r3, r1
 8003d12:	807b      	strh	r3, [r7, #2]
 8003d14:	4613      	mov	r3, r2
 8003d16:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003d18:	787b      	ldrb	r3, [r7, #1]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d003      	beq.n	8003d26 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003d1e:	887a      	ldrh	r2, [r7, #2]
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003d24:	e003      	b.n	8003d2e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003d26:	887b      	ldrh	r3, [r7, #2]
 8003d28:	041a      	lsls	r2, r3, #16
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	619a      	str	r2, [r3, #24]
}
 8003d2e:	bf00      	nop
 8003d30:	370c      	adds	r7, #12
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003d3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003d3c:	b08f      	sub	sp, #60	; 0x3c
 8003d3e:	af0a      	add	r7, sp, #40	; 0x28
 8003d40:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d101      	bne.n	8003d4c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003d48:	2301      	movs	r3, #1
 8003d4a:	e10f      	b.n	8003f6c <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d106      	bne.n	8003d6c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2200      	movs	r2, #0
 8003d62:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8003d66:	6878      	ldr	r0, [r7, #4]
 8003d68:	f7fe f9c8 	bl	80020fc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2203      	movs	r2, #3
 8003d70:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d102      	bne.n	8003d86 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f001 ff05 	bl	8005b9a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	603b      	str	r3, [r7, #0]
 8003d96:	687e      	ldr	r6, [r7, #4]
 8003d98:	466d      	mov	r5, sp
 8003d9a:	f106 0410 	add.w	r4, r6, #16
 8003d9e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003da0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003da2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003da4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003da6:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003daa:	e885 0003 	stmia.w	r5, {r0, r1}
 8003dae:	1d33      	adds	r3, r6, #4
 8003db0:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003db2:	6838      	ldr	r0, [r7, #0]
 8003db4:	f001 fe90 	bl	8005ad8 <USB_CoreInit>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d005      	beq.n	8003dca <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2202      	movs	r2, #2
 8003dc2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e0d0      	b.n	8003f6c <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	2100      	movs	r1, #0
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	f001 fef3 	bl	8005bbc <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	73fb      	strb	r3, [r7, #15]
 8003dda:	e04a      	b.n	8003e72 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003ddc:	7bfa      	ldrb	r2, [r7, #15]
 8003dde:	6879      	ldr	r1, [r7, #4]
 8003de0:	4613      	mov	r3, r2
 8003de2:	00db      	lsls	r3, r3, #3
 8003de4:	4413      	add	r3, r2
 8003de6:	009b      	lsls	r3, r3, #2
 8003de8:	440b      	add	r3, r1
 8003dea:	333d      	adds	r3, #61	; 0x3d
 8003dec:	2201      	movs	r2, #1
 8003dee:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003df0:	7bfa      	ldrb	r2, [r7, #15]
 8003df2:	6879      	ldr	r1, [r7, #4]
 8003df4:	4613      	mov	r3, r2
 8003df6:	00db      	lsls	r3, r3, #3
 8003df8:	4413      	add	r3, r2
 8003dfa:	009b      	lsls	r3, r3, #2
 8003dfc:	440b      	add	r3, r1
 8003dfe:	333c      	adds	r3, #60	; 0x3c
 8003e00:	7bfa      	ldrb	r2, [r7, #15]
 8003e02:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8003e04:	7bfa      	ldrb	r2, [r7, #15]
 8003e06:	7bfb      	ldrb	r3, [r7, #15]
 8003e08:	b298      	uxth	r0, r3
 8003e0a:	6879      	ldr	r1, [r7, #4]
 8003e0c:	4613      	mov	r3, r2
 8003e0e:	00db      	lsls	r3, r3, #3
 8003e10:	4413      	add	r3, r2
 8003e12:	009b      	lsls	r3, r3, #2
 8003e14:	440b      	add	r3, r1
 8003e16:	3344      	adds	r3, #68	; 0x44
 8003e18:	4602      	mov	r2, r0
 8003e1a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003e1c:	7bfa      	ldrb	r2, [r7, #15]
 8003e1e:	6879      	ldr	r1, [r7, #4]
 8003e20:	4613      	mov	r3, r2
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	4413      	add	r3, r2
 8003e26:	009b      	lsls	r3, r3, #2
 8003e28:	440b      	add	r3, r1
 8003e2a:	3340      	adds	r3, #64	; 0x40
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003e30:	7bfa      	ldrb	r2, [r7, #15]
 8003e32:	6879      	ldr	r1, [r7, #4]
 8003e34:	4613      	mov	r3, r2
 8003e36:	00db      	lsls	r3, r3, #3
 8003e38:	4413      	add	r3, r2
 8003e3a:	009b      	lsls	r3, r3, #2
 8003e3c:	440b      	add	r3, r1
 8003e3e:	3348      	adds	r3, #72	; 0x48
 8003e40:	2200      	movs	r2, #0
 8003e42:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8003e44:	7bfa      	ldrb	r2, [r7, #15]
 8003e46:	6879      	ldr	r1, [r7, #4]
 8003e48:	4613      	mov	r3, r2
 8003e4a:	00db      	lsls	r3, r3, #3
 8003e4c:	4413      	add	r3, r2
 8003e4e:	009b      	lsls	r3, r3, #2
 8003e50:	440b      	add	r3, r1
 8003e52:	334c      	adds	r3, #76	; 0x4c
 8003e54:	2200      	movs	r2, #0
 8003e56:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8003e58:	7bfa      	ldrb	r2, [r7, #15]
 8003e5a:	6879      	ldr	r1, [r7, #4]
 8003e5c:	4613      	mov	r3, r2
 8003e5e:	00db      	lsls	r3, r3, #3
 8003e60:	4413      	add	r3, r2
 8003e62:	009b      	lsls	r3, r3, #2
 8003e64:	440b      	add	r3, r1
 8003e66:	3354      	adds	r3, #84	; 0x54
 8003e68:	2200      	movs	r2, #0
 8003e6a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e6c:	7bfb      	ldrb	r3, [r7, #15]
 8003e6e:	3301      	adds	r3, #1
 8003e70:	73fb      	strb	r3, [r7, #15]
 8003e72:	7bfa      	ldrb	r2, [r7, #15]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	685b      	ldr	r3, [r3, #4]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d3af      	bcc.n	8003ddc <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	73fb      	strb	r3, [r7, #15]
 8003e80:	e044      	b.n	8003f0c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8003e82:	7bfa      	ldrb	r2, [r7, #15]
 8003e84:	6879      	ldr	r1, [r7, #4]
 8003e86:	4613      	mov	r3, r2
 8003e88:	00db      	lsls	r3, r3, #3
 8003e8a:	4413      	add	r3, r2
 8003e8c:	009b      	lsls	r3, r3, #2
 8003e8e:	440b      	add	r3, r1
 8003e90:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8003e94:	2200      	movs	r2, #0
 8003e96:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8003e98:	7bfa      	ldrb	r2, [r7, #15]
 8003e9a:	6879      	ldr	r1, [r7, #4]
 8003e9c:	4613      	mov	r3, r2
 8003e9e:	00db      	lsls	r3, r3, #3
 8003ea0:	4413      	add	r3, r2
 8003ea2:	009b      	lsls	r3, r3, #2
 8003ea4:	440b      	add	r3, r1
 8003ea6:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8003eaa:	7bfa      	ldrb	r2, [r7, #15]
 8003eac:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8003eae:	7bfa      	ldrb	r2, [r7, #15]
 8003eb0:	6879      	ldr	r1, [r7, #4]
 8003eb2:	4613      	mov	r3, r2
 8003eb4:	00db      	lsls	r3, r3, #3
 8003eb6:	4413      	add	r3, r2
 8003eb8:	009b      	lsls	r3, r3, #2
 8003eba:	440b      	add	r3, r1
 8003ebc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8003ec4:	7bfa      	ldrb	r2, [r7, #15]
 8003ec6:	6879      	ldr	r1, [r7, #4]
 8003ec8:	4613      	mov	r3, r2
 8003eca:	00db      	lsls	r3, r3, #3
 8003ecc:	4413      	add	r3, r2
 8003ece:	009b      	lsls	r3, r3, #2
 8003ed0:	440b      	add	r3, r1
 8003ed2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003eda:	7bfa      	ldrb	r2, [r7, #15]
 8003edc:	6879      	ldr	r1, [r7, #4]
 8003ede:	4613      	mov	r3, r2
 8003ee0:	00db      	lsls	r3, r3, #3
 8003ee2:	4413      	add	r3, r2
 8003ee4:	009b      	lsls	r3, r3, #2
 8003ee6:	440b      	add	r3, r1
 8003ee8:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8003eec:	2200      	movs	r2, #0
 8003eee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003ef0:	7bfa      	ldrb	r2, [r7, #15]
 8003ef2:	6879      	ldr	r1, [r7, #4]
 8003ef4:	4613      	mov	r3, r2
 8003ef6:	00db      	lsls	r3, r3, #3
 8003ef8:	4413      	add	r3, r2
 8003efa:	009b      	lsls	r3, r3, #2
 8003efc:	440b      	add	r3, r1
 8003efe:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003f02:	2200      	movs	r2, #0
 8003f04:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003f06:	7bfb      	ldrb	r3, [r7, #15]
 8003f08:	3301      	adds	r3, #1
 8003f0a:	73fb      	strb	r3, [r7, #15]
 8003f0c:	7bfa      	ldrb	r2, [r7, #15]
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	685b      	ldr	r3, [r3, #4]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	d3b5      	bcc.n	8003e82 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	603b      	str	r3, [r7, #0]
 8003f1c:	687e      	ldr	r6, [r7, #4]
 8003f1e:	466d      	mov	r5, sp
 8003f20:	f106 0410 	add.w	r4, r6, #16
 8003f24:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f26:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f28:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8003f2a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8003f2c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8003f30:	e885 0003 	stmia.w	r5, {r0, r1}
 8003f34:	1d33      	adds	r3, r6, #4
 8003f36:	cb0e      	ldmia	r3, {r1, r2, r3}
 8003f38:	6838      	ldr	r0, [r7, #0]
 8003f3a:	f001 fe8b 	bl	8005c54 <USB_DevInit>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d005      	beq.n	8003f50 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	2202      	movs	r2, #2
 8003f48:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e00d      	b.n	8003f6c <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4618      	mov	r0, r3
 8003f66:	f002 f856 	bl	8006016 <USB_DevDisconnect>

  return HAL_OK;
 8003f6a:	2300      	movs	r3, #0
}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3714      	adds	r7, #20
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b086      	sub	sp, #24
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d101      	bne.n	8003f86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f82:	2301      	movs	r3, #1
 8003f84:	e267      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d075      	beq.n	800407e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f92:	4b88      	ldr	r3, [pc, #544]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8003f94:	689b      	ldr	r3, [r3, #8]
 8003f96:	f003 030c 	and.w	r3, r3, #12
 8003f9a:	2b04      	cmp	r3, #4
 8003f9c:	d00c      	beq.n	8003fb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f9e:	4b85      	ldr	r3, [pc, #532]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fa6:	2b08      	cmp	r3, #8
 8003fa8:	d112      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003faa:	4b82      	ldr	r3, [pc, #520]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fb6:	d10b      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fb8:	4b7e      	ldr	r3, [pc, #504]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d05b      	beq.n	800407c <HAL_RCC_OscConfig+0x108>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	685b      	ldr	r3, [r3, #4]
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d157      	bne.n	800407c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fcc:	2301      	movs	r3, #1
 8003fce:	e242      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fd8:	d106      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x74>
 8003fda:	4b76      	ldr	r3, [pc, #472]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	4a75      	ldr	r2, [pc, #468]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8003fe0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003fe4:	6013      	str	r3, [r2, #0]
 8003fe6:	e01d      	b.n	8004024 <HAL_RCC_OscConfig+0xb0>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	685b      	ldr	r3, [r3, #4]
 8003fec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ff0:	d10c      	bne.n	800400c <HAL_RCC_OscConfig+0x98>
 8003ff2:	4b70      	ldr	r3, [pc, #448]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4a6f      	ldr	r2, [pc, #444]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8003ff8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ffc:	6013      	str	r3, [r2, #0]
 8003ffe:	4b6d      	ldr	r3, [pc, #436]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a6c      	ldr	r2, [pc, #432]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004004:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	e00b      	b.n	8004024 <HAL_RCC_OscConfig+0xb0>
 800400c:	4b69      	ldr	r3, [pc, #420]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	4a68      	ldr	r2, [pc, #416]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004012:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004016:	6013      	str	r3, [r2, #0]
 8004018:	4b66      	ldr	r3, [pc, #408]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a65      	ldr	r2, [pc, #404]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 800401e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004022:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d013      	beq.n	8004054 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800402c:	f7fe fcce 	bl	80029cc <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004032:	e008      	b.n	8004046 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004034:	f7fe fcca 	bl	80029cc <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	2b64      	cmp	r3, #100	; 0x64
 8004040:	d901      	bls.n	8004046 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004042:	2303      	movs	r3, #3
 8004044:	e207      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004046:	4b5b      	ldr	r3, [pc, #364]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800404e:	2b00      	cmp	r3, #0
 8004050:	d0f0      	beq.n	8004034 <HAL_RCC_OscConfig+0xc0>
 8004052:	e014      	b.n	800407e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004054:	f7fe fcba 	bl	80029cc <HAL_GetTick>
 8004058:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800405a:	e008      	b.n	800406e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800405c:	f7fe fcb6 	bl	80029cc <HAL_GetTick>
 8004060:	4602      	mov	r2, r0
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	1ad3      	subs	r3, r2, r3
 8004066:	2b64      	cmp	r3, #100	; 0x64
 8004068:	d901      	bls.n	800406e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e1f3      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800406e:	4b51      	ldr	r3, [pc, #324]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d1f0      	bne.n	800405c <HAL_RCC_OscConfig+0xe8>
 800407a:	e000      	b.n	800407e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800407c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f003 0302 	and.w	r3, r3, #2
 8004086:	2b00      	cmp	r3, #0
 8004088:	d063      	beq.n	8004152 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800408a:	4b4a      	ldr	r3, [pc, #296]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f003 030c 	and.w	r3, r3, #12
 8004092:	2b00      	cmp	r3, #0
 8004094:	d00b      	beq.n	80040ae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004096:	4b47      	ldr	r3, [pc, #284]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800409e:	2b08      	cmp	r3, #8
 80040a0:	d11c      	bne.n	80040dc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a2:	4b44      	ldr	r3, [pc, #272]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 80040a4:	685b      	ldr	r3, [r3, #4]
 80040a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d116      	bne.n	80040dc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ae:	4b41      	ldr	r3, [pc, #260]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f003 0302 	and.w	r3, r3, #2
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d005      	beq.n	80040c6 <HAL_RCC_OscConfig+0x152>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	68db      	ldr	r3, [r3, #12]
 80040be:	2b01      	cmp	r3, #1
 80040c0:	d001      	beq.n	80040c6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040c2:	2301      	movs	r3, #1
 80040c4:	e1c7      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040c6:	4b3b      	ldr	r3, [pc, #236]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	691b      	ldr	r3, [r3, #16]
 80040d2:	00db      	lsls	r3, r3, #3
 80040d4:	4937      	ldr	r1, [pc, #220]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 80040d6:	4313      	orrs	r3, r2
 80040d8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040da:	e03a      	b.n	8004152 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	68db      	ldr	r3, [r3, #12]
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d020      	beq.n	8004126 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040e4:	4b34      	ldr	r3, [pc, #208]	; (80041b8 <HAL_RCC_OscConfig+0x244>)
 80040e6:	2201      	movs	r2, #1
 80040e8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ea:	f7fe fc6f 	bl	80029cc <HAL_GetTick>
 80040ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040f0:	e008      	b.n	8004104 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040f2:	f7fe fc6b 	bl	80029cc <HAL_GetTick>
 80040f6:	4602      	mov	r2, r0
 80040f8:	693b      	ldr	r3, [r7, #16]
 80040fa:	1ad3      	subs	r3, r2, r3
 80040fc:	2b02      	cmp	r3, #2
 80040fe:	d901      	bls.n	8004104 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004100:	2303      	movs	r3, #3
 8004102:	e1a8      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004104:	4b2b      	ldr	r3, [pc, #172]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	f003 0302 	and.w	r3, r3, #2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d0f0      	beq.n	80040f2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004110:	4b28      	ldr	r3, [pc, #160]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	00db      	lsls	r3, r3, #3
 800411e:	4925      	ldr	r1, [pc, #148]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004120:	4313      	orrs	r3, r2
 8004122:	600b      	str	r3, [r1, #0]
 8004124:	e015      	b.n	8004152 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004126:	4b24      	ldr	r3, [pc, #144]	; (80041b8 <HAL_RCC_OscConfig+0x244>)
 8004128:	2200      	movs	r2, #0
 800412a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800412c:	f7fe fc4e 	bl	80029cc <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004134:	f7fe fc4a 	bl	80029cc <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e187      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004146:	4b1b      	ldr	r3, [pc, #108]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d1f0      	bne.n	8004134 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d036      	beq.n	80041cc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	695b      	ldr	r3, [r3, #20]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d016      	beq.n	8004194 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004166:	4b15      	ldr	r3, [pc, #84]	; (80041bc <HAL_RCC_OscConfig+0x248>)
 8004168:	2201      	movs	r2, #1
 800416a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800416c:	f7fe fc2e 	bl	80029cc <HAL_GetTick>
 8004170:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004172:	e008      	b.n	8004186 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004174:	f7fe fc2a 	bl	80029cc <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	693b      	ldr	r3, [r7, #16]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	2b02      	cmp	r3, #2
 8004180:	d901      	bls.n	8004186 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004182:	2303      	movs	r3, #3
 8004184:	e167      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004186:	4b0b      	ldr	r3, [pc, #44]	; (80041b4 <HAL_RCC_OscConfig+0x240>)
 8004188:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800418a:	f003 0302 	and.w	r3, r3, #2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d0f0      	beq.n	8004174 <HAL_RCC_OscConfig+0x200>
 8004192:	e01b      	b.n	80041cc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004194:	4b09      	ldr	r3, [pc, #36]	; (80041bc <HAL_RCC_OscConfig+0x248>)
 8004196:	2200      	movs	r2, #0
 8004198:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800419a:	f7fe fc17 	bl	80029cc <HAL_GetTick>
 800419e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041a0:	e00e      	b.n	80041c0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041a2:	f7fe fc13 	bl	80029cc <HAL_GetTick>
 80041a6:	4602      	mov	r2, r0
 80041a8:	693b      	ldr	r3, [r7, #16]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	2b02      	cmp	r3, #2
 80041ae:	d907      	bls.n	80041c0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041b0:	2303      	movs	r3, #3
 80041b2:	e150      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
 80041b4:	40023800 	.word	0x40023800
 80041b8:	42470000 	.word	0x42470000
 80041bc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041c0:	4b88      	ldr	r3, [pc, #544]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 80041c2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d1ea      	bne.n	80041a2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f003 0304 	and.w	r3, r3, #4
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	f000 8097 	beq.w	8004308 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041da:	2300      	movs	r3, #0
 80041dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041de:	4b81      	ldr	r3, [pc, #516]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 80041e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d10f      	bne.n	800420a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041ea:	2300      	movs	r3, #0
 80041ec:	60bb      	str	r3, [r7, #8]
 80041ee:	4b7d      	ldr	r3, [pc, #500]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 80041f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f2:	4a7c      	ldr	r2, [pc, #496]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 80041f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80041f8:	6413      	str	r3, [r2, #64]	; 0x40
 80041fa:	4b7a      	ldr	r3, [pc, #488]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004202:	60bb      	str	r3, [r7, #8]
 8004204:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004206:	2301      	movs	r3, #1
 8004208:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800420a:	4b77      	ldr	r3, [pc, #476]	; (80043e8 <HAL_RCC_OscConfig+0x474>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004212:	2b00      	cmp	r3, #0
 8004214:	d118      	bne.n	8004248 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004216:	4b74      	ldr	r3, [pc, #464]	; (80043e8 <HAL_RCC_OscConfig+0x474>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a73      	ldr	r2, [pc, #460]	; (80043e8 <HAL_RCC_OscConfig+0x474>)
 800421c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004220:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004222:	f7fe fbd3 	bl	80029cc <HAL_GetTick>
 8004226:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004228:	e008      	b.n	800423c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800422a:	f7fe fbcf 	bl	80029cc <HAL_GetTick>
 800422e:	4602      	mov	r2, r0
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	1ad3      	subs	r3, r2, r3
 8004234:	2b02      	cmp	r3, #2
 8004236:	d901      	bls.n	800423c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004238:	2303      	movs	r3, #3
 800423a:	e10c      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800423c:	4b6a      	ldr	r3, [pc, #424]	; (80043e8 <HAL_RCC_OscConfig+0x474>)
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004244:	2b00      	cmp	r3, #0
 8004246:	d0f0      	beq.n	800422a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d106      	bne.n	800425e <HAL_RCC_OscConfig+0x2ea>
 8004250:	4b64      	ldr	r3, [pc, #400]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004254:	4a63      	ldr	r2, [pc, #396]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004256:	f043 0301 	orr.w	r3, r3, #1
 800425a:	6713      	str	r3, [r2, #112]	; 0x70
 800425c:	e01c      	b.n	8004298 <HAL_RCC_OscConfig+0x324>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	2b05      	cmp	r3, #5
 8004264:	d10c      	bne.n	8004280 <HAL_RCC_OscConfig+0x30c>
 8004266:	4b5f      	ldr	r3, [pc, #380]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800426a:	4a5e      	ldr	r2, [pc, #376]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 800426c:	f043 0304 	orr.w	r3, r3, #4
 8004270:	6713      	str	r3, [r2, #112]	; 0x70
 8004272:	4b5c      	ldr	r3, [pc, #368]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	4a5b      	ldr	r2, [pc, #364]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004278:	f043 0301 	orr.w	r3, r3, #1
 800427c:	6713      	str	r3, [r2, #112]	; 0x70
 800427e:	e00b      	b.n	8004298 <HAL_RCC_OscConfig+0x324>
 8004280:	4b58      	ldr	r3, [pc, #352]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004282:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004284:	4a57      	ldr	r2, [pc, #348]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004286:	f023 0301 	bic.w	r3, r3, #1
 800428a:	6713      	str	r3, [r2, #112]	; 0x70
 800428c:	4b55      	ldr	r3, [pc, #340]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	4a54      	ldr	r2, [pc, #336]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004292:	f023 0304 	bic.w	r3, r3, #4
 8004296:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d015      	beq.n	80042cc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042a0:	f7fe fb94 	bl	80029cc <HAL_GetTick>
 80042a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042a6:	e00a      	b.n	80042be <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042a8:	f7fe fb90 	bl	80029cc <HAL_GetTick>
 80042ac:	4602      	mov	r2, r0
 80042ae:	693b      	ldr	r3, [r7, #16]
 80042b0:	1ad3      	subs	r3, r2, r3
 80042b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d901      	bls.n	80042be <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042ba:	2303      	movs	r3, #3
 80042bc:	e0cb      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042be:	4b49      	ldr	r3, [pc, #292]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 80042c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d0ee      	beq.n	80042a8 <HAL_RCC_OscConfig+0x334>
 80042ca:	e014      	b.n	80042f6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042cc:	f7fe fb7e 	bl	80029cc <HAL_GetTick>
 80042d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042d2:	e00a      	b.n	80042ea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042d4:	f7fe fb7a 	bl	80029cc <HAL_GetTick>
 80042d8:	4602      	mov	r2, r0
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	1ad3      	subs	r3, r2, r3
 80042de:	f241 3288 	movw	r2, #5000	; 0x1388
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d901      	bls.n	80042ea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042e6:	2303      	movs	r3, #3
 80042e8:	e0b5      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042ea:	4b3e      	ldr	r3, [pc, #248]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 80042ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ee:	f003 0302 	and.w	r3, r3, #2
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d1ee      	bne.n	80042d4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80042f6:	7dfb      	ldrb	r3, [r7, #23]
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	d105      	bne.n	8004308 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042fc:	4b39      	ldr	r3, [pc, #228]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	4a38      	ldr	r2, [pc, #224]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004302:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004306:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	699b      	ldr	r3, [r3, #24]
 800430c:	2b00      	cmp	r3, #0
 800430e:	f000 80a1 	beq.w	8004454 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004312:	4b34      	ldr	r3, [pc, #208]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004314:	689b      	ldr	r3, [r3, #8]
 8004316:	f003 030c 	and.w	r3, r3, #12
 800431a:	2b08      	cmp	r3, #8
 800431c:	d05c      	beq.n	80043d8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	2b02      	cmp	r3, #2
 8004324:	d141      	bne.n	80043aa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004326:	4b31      	ldr	r3, [pc, #196]	; (80043ec <HAL_RCC_OscConfig+0x478>)
 8004328:	2200      	movs	r2, #0
 800432a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800432c:	f7fe fb4e 	bl	80029cc <HAL_GetTick>
 8004330:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004332:	e008      	b.n	8004346 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004334:	f7fe fb4a 	bl	80029cc <HAL_GetTick>
 8004338:	4602      	mov	r2, r0
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	1ad3      	subs	r3, r2, r3
 800433e:	2b02      	cmp	r3, #2
 8004340:	d901      	bls.n	8004346 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e087      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004346:	4b27      	ldr	r3, [pc, #156]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d1f0      	bne.n	8004334 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69da      	ldr	r2, [r3, #28]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	6a1b      	ldr	r3, [r3, #32]
 800435a:	431a      	orrs	r2, r3
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004360:	019b      	lsls	r3, r3, #6
 8004362:	431a      	orrs	r2, r3
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004368:	085b      	lsrs	r3, r3, #1
 800436a:	3b01      	subs	r3, #1
 800436c:	041b      	lsls	r3, r3, #16
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	061b      	lsls	r3, r3, #24
 8004376:	491b      	ldr	r1, [pc, #108]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 8004378:	4313      	orrs	r3, r2
 800437a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800437c:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <HAL_RCC_OscConfig+0x478>)
 800437e:	2201      	movs	r2, #1
 8004380:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004382:	f7fe fb23 	bl	80029cc <HAL_GetTick>
 8004386:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004388:	e008      	b.n	800439c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800438a:	f7fe fb1f 	bl	80029cc <HAL_GetTick>
 800438e:	4602      	mov	r2, r0
 8004390:	693b      	ldr	r3, [r7, #16]
 8004392:	1ad3      	subs	r3, r2, r3
 8004394:	2b02      	cmp	r3, #2
 8004396:	d901      	bls.n	800439c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004398:	2303      	movs	r3, #3
 800439a:	e05c      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800439c:	4b11      	ldr	r3, [pc, #68]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d0f0      	beq.n	800438a <HAL_RCC_OscConfig+0x416>
 80043a8:	e054      	b.n	8004454 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043aa:	4b10      	ldr	r3, [pc, #64]	; (80043ec <HAL_RCC_OscConfig+0x478>)
 80043ac:	2200      	movs	r2, #0
 80043ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043b0:	f7fe fb0c 	bl	80029cc <HAL_GetTick>
 80043b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043b6:	e008      	b.n	80043ca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043b8:	f7fe fb08 	bl	80029cc <HAL_GetTick>
 80043bc:	4602      	mov	r2, r0
 80043be:	693b      	ldr	r3, [r7, #16]
 80043c0:	1ad3      	subs	r3, r2, r3
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d901      	bls.n	80043ca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043c6:	2303      	movs	r3, #3
 80043c8:	e045      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043ca:	4b06      	ldr	r3, [pc, #24]	; (80043e4 <HAL_RCC_OscConfig+0x470>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d1f0      	bne.n	80043b8 <HAL_RCC_OscConfig+0x444>
 80043d6:	e03d      	b.n	8004454 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	699b      	ldr	r3, [r3, #24]
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d107      	bne.n	80043f0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e038      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
 80043e4:	40023800 	.word	0x40023800
 80043e8:	40007000 	.word	0x40007000
 80043ec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043f0:	4b1b      	ldr	r3, [pc, #108]	; (8004460 <HAL_RCC_OscConfig+0x4ec>)
 80043f2:	685b      	ldr	r3, [r3, #4]
 80043f4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d028      	beq.n	8004450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004408:	429a      	cmp	r2, r3
 800440a:	d121      	bne.n	8004450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004416:	429a      	cmp	r2, r3
 8004418:	d11a      	bne.n	8004450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800441a:	68fa      	ldr	r2, [r7, #12]
 800441c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004420:	4013      	ands	r3, r2
 8004422:	687a      	ldr	r2, [r7, #4]
 8004424:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004426:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004428:	4293      	cmp	r3, r2
 800442a:	d111      	bne.n	8004450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004436:	085b      	lsrs	r3, r3, #1
 8004438:	3b01      	subs	r3, #1
 800443a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800443c:	429a      	cmp	r2, r3
 800443e:	d107      	bne.n	8004450 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004440:	68fb      	ldr	r3, [r7, #12]
 8004442:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800444a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800444c:	429a      	cmp	r2, r3
 800444e:	d001      	beq.n	8004454 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004450:	2301      	movs	r3, #1
 8004452:	e000      	b.n	8004456 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004454:	2300      	movs	r3, #0
}
 8004456:	4618      	mov	r0, r3
 8004458:	3718      	adds	r7, #24
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}
 800445e:	bf00      	nop
 8004460:	40023800 	.word	0x40023800

08004464 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d101      	bne.n	8004478 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004474:	2301      	movs	r3, #1
 8004476:	e0cc      	b.n	8004612 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004478:	4b68      	ldr	r3, [pc, #416]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 030f 	and.w	r3, r3, #15
 8004480:	683a      	ldr	r2, [r7, #0]
 8004482:	429a      	cmp	r2, r3
 8004484:	d90c      	bls.n	80044a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004486:	4b65      	ldr	r3, [pc, #404]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 8004488:	683a      	ldr	r2, [r7, #0]
 800448a:	b2d2      	uxtb	r2, r2
 800448c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800448e:	4b63      	ldr	r3, [pc, #396]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f003 030f 	and.w	r3, r3, #15
 8004496:	683a      	ldr	r2, [r7, #0]
 8004498:	429a      	cmp	r2, r3
 800449a:	d001      	beq.n	80044a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	e0b8      	b.n	8004612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d020      	beq.n	80044ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0304 	and.w	r3, r3, #4
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d005      	beq.n	80044c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044b8:	4b59      	ldr	r3, [pc, #356]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80044ba:	689b      	ldr	r3, [r3, #8]
 80044bc:	4a58      	ldr	r2, [pc, #352]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80044be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 0308 	and.w	r3, r3, #8
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d005      	beq.n	80044dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044d0:	4b53      	ldr	r3, [pc, #332]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80044d2:	689b      	ldr	r3, [r3, #8]
 80044d4:	4a52      	ldr	r2, [pc, #328]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80044d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044dc:	4b50      	ldr	r3, [pc, #320]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	494d      	ldr	r1, [pc, #308]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	4313      	orrs	r3, r2
 80044ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d044      	beq.n	8004584 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d107      	bne.n	8004512 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004502:	4b47      	ldr	r3, [pc, #284]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800450a:	2b00      	cmp	r3, #0
 800450c:	d119      	bne.n	8004542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800450e:	2301      	movs	r3, #1
 8004510:	e07f      	b.n	8004612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b02      	cmp	r3, #2
 8004518:	d003      	beq.n	8004522 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800451e:	2b03      	cmp	r3, #3
 8004520:	d107      	bne.n	8004532 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004522:	4b3f      	ldr	r3, [pc, #252]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d109      	bne.n	8004542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e06f      	b.n	8004612 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004532:	4b3b      	ldr	r3, [pc, #236]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f003 0302 	and.w	r3, r3, #2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d101      	bne.n	8004542 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	e067      	b.n	8004612 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004542:	4b37      	ldr	r3, [pc, #220]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 8004544:	689b      	ldr	r3, [r3, #8]
 8004546:	f023 0203 	bic.w	r2, r3, #3
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	4934      	ldr	r1, [pc, #208]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 8004550:	4313      	orrs	r3, r2
 8004552:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004554:	f7fe fa3a 	bl	80029cc <HAL_GetTick>
 8004558:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800455a:	e00a      	b.n	8004572 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800455c:	f7fe fa36 	bl	80029cc <HAL_GetTick>
 8004560:	4602      	mov	r2, r0
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	1ad3      	subs	r3, r2, r3
 8004566:	f241 3288 	movw	r2, #5000	; 0x1388
 800456a:	4293      	cmp	r3, r2
 800456c:	d901      	bls.n	8004572 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800456e:	2303      	movs	r3, #3
 8004570:	e04f      	b.n	8004612 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004572:	4b2b      	ldr	r3, [pc, #172]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 020c 	and.w	r2, r3, #12
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	009b      	lsls	r3, r3, #2
 8004580:	429a      	cmp	r2, r3
 8004582:	d1eb      	bne.n	800455c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004584:	4b25      	ldr	r3, [pc, #148]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	f003 030f 	and.w	r3, r3, #15
 800458c:	683a      	ldr	r2, [r7, #0]
 800458e:	429a      	cmp	r2, r3
 8004590:	d20c      	bcs.n	80045ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004592:	4b22      	ldr	r3, [pc, #136]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	b2d2      	uxtb	r2, r2
 8004598:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800459a:	4b20      	ldr	r3, [pc, #128]	; (800461c <HAL_RCC_ClockConfig+0x1b8>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	f003 030f 	and.w	r3, r3, #15
 80045a2:	683a      	ldr	r2, [r7, #0]
 80045a4:	429a      	cmp	r2, r3
 80045a6:	d001      	beq.n	80045ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045a8:	2301      	movs	r3, #1
 80045aa:	e032      	b.n	8004612 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f003 0304 	and.w	r3, r3, #4
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d008      	beq.n	80045ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045b8:	4b19      	ldr	r3, [pc, #100]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80045ba:	689b      	ldr	r3, [r3, #8]
 80045bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	4916      	ldr	r1, [pc, #88]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	4313      	orrs	r3, r2
 80045c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	f003 0308 	and.w	r3, r3, #8
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d009      	beq.n	80045ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045d6:	4b12      	ldr	r3, [pc, #72]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	691b      	ldr	r3, [r3, #16]
 80045e2:	00db      	lsls	r3, r3, #3
 80045e4:	490e      	ldr	r1, [pc, #56]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80045e6:	4313      	orrs	r3, r2
 80045e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045ea:	f000 f821 	bl	8004630 <HAL_RCC_GetSysClockFreq>
 80045ee:	4602      	mov	r2, r0
 80045f0:	4b0b      	ldr	r3, [pc, #44]	; (8004620 <HAL_RCC_ClockConfig+0x1bc>)
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	091b      	lsrs	r3, r3, #4
 80045f6:	f003 030f 	and.w	r3, r3, #15
 80045fa:	490a      	ldr	r1, [pc, #40]	; (8004624 <HAL_RCC_ClockConfig+0x1c0>)
 80045fc:	5ccb      	ldrb	r3, [r1, r3]
 80045fe:	fa22 f303 	lsr.w	r3, r2, r3
 8004602:	4a09      	ldr	r2, [pc, #36]	; (8004628 <HAL_RCC_ClockConfig+0x1c4>)
 8004604:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004606:	4b09      	ldr	r3, [pc, #36]	; (800462c <HAL_RCC_ClockConfig+0x1c8>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4618      	mov	r0, r3
 800460c:	f7fe f99a 	bl	8002944 <HAL_InitTick>

  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	40023c00 	.word	0x40023c00
 8004620:	40023800 	.word	0x40023800
 8004624:	080080b0 	.word	0x080080b0
 8004628:	200009c8 	.word	0x200009c8
 800462c:	200009cc 	.word	0x200009cc

08004630 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004630:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004634:	b094      	sub	sp, #80	; 0x50
 8004636:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004638:	2300      	movs	r3, #0
 800463a:	647b      	str	r3, [r7, #68]	; 0x44
 800463c:	2300      	movs	r3, #0
 800463e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004640:	2300      	movs	r3, #0
 8004642:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004648:	4b79      	ldr	r3, [pc, #484]	; (8004830 <HAL_RCC_GetSysClockFreq+0x200>)
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	f003 030c 	and.w	r3, r3, #12
 8004650:	2b08      	cmp	r3, #8
 8004652:	d00d      	beq.n	8004670 <HAL_RCC_GetSysClockFreq+0x40>
 8004654:	2b08      	cmp	r3, #8
 8004656:	f200 80e1 	bhi.w	800481c <HAL_RCC_GetSysClockFreq+0x1ec>
 800465a:	2b00      	cmp	r3, #0
 800465c:	d002      	beq.n	8004664 <HAL_RCC_GetSysClockFreq+0x34>
 800465e:	2b04      	cmp	r3, #4
 8004660:	d003      	beq.n	800466a <HAL_RCC_GetSysClockFreq+0x3a>
 8004662:	e0db      	b.n	800481c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004664:	4b73      	ldr	r3, [pc, #460]	; (8004834 <HAL_RCC_GetSysClockFreq+0x204>)
 8004666:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004668:	e0db      	b.n	8004822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800466a:	4b73      	ldr	r3, [pc, #460]	; (8004838 <HAL_RCC_GetSysClockFreq+0x208>)
 800466c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800466e:	e0d8      	b.n	8004822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004670:	4b6f      	ldr	r3, [pc, #444]	; (8004830 <HAL_RCC_GetSysClockFreq+0x200>)
 8004672:	685b      	ldr	r3, [r3, #4]
 8004674:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004678:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800467a:	4b6d      	ldr	r3, [pc, #436]	; (8004830 <HAL_RCC_GetSysClockFreq+0x200>)
 800467c:	685b      	ldr	r3, [r3, #4]
 800467e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004682:	2b00      	cmp	r3, #0
 8004684:	d063      	beq.n	800474e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004686:	4b6a      	ldr	r3, [pc, #424]	; (8004830 <HAL_RCC_GetSysClockFreq+0x200>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	099b      	lsrs	r3, r3, #6
 800468c:	2200      	movs	r2, #0
 800468e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004690:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004694:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004698:	633b      	str	r3, [r7, #48]	; 0x30
 800469a:	2300      	movs	r3, #0
 800469c:	637b      	str	r3, [r7, #52]	; 0x34
 800469e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046a2:	4622      	mov	r2, r4
 80046a4:	462b      	mov	r3, r5
 80046a6:	f04f 0000 	mov.w	r0, #0
 80046aa:	f04f 0100 	mov.w	r1, #0
 80046ae:	0159      	lsls	r1, r3, #5
 80046b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046b4:	0150      	lsls	r0, r2, #5
 80046b6:	4602      	mov	r2, r0
 80046b8:	460b      	mov	r3, r1
 80046ba:	4621      	mov	r1, r4
 80046bc:	1a51      	subs	r1, r2, r1
 80046be:	6139      	str	r1, [r7, #16]
 80046c0:	4629      	mov	r1, r5
 80046c2:	eb63 0301 	sbc.w	r3, r3, r1
 80046c6:	617b      	str	r3, [r7, #20]
 80046c8:	f04f 0200 	mov.w	r2, #0
 80046cc:	f04f 0300 	mov.w	r3, #0
 80046d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046d4:	4659      	mov	r1, fp
 80046d6:	018b      	lsls	r3, r1, #6
 80046d8:	4651      	mov	r1, sl
 80046da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046de:	4651      	mov	r1, sl
 80046e0:	018a      	lsls	r2, r1, #6
 80046e2:	4651      	mov	r1, sl
 80046e4:	ebb2 0801 	subs.w	r8, r2, r1
 80046e8:	4659      	mov	r1, fp
 80046ea:	eb63 0901 	sbc.w	r9, r3, r1
 80046ee:	f04f 0200 	mov.w	r2, #0
 80046f2:	f04f 0300 	mov.w	r3, #0
 80046f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004702:	4690      	mov	r8, r2
 8004704:	4699      	mov	r9, r3
 8004706:	4623      	mov	r3, r4
 8004708:	eb18 0303 	adds.w	r3, r8, r3
 800470c:	60bb      	str	r3, [r7, #8]
 800470e:	462b      	mov	r3, r5
 8004710:	eb49 0303 	adc.w	r3, r9, r3
 8004714:	60fb      	str	r3, [r7, #12]
 8004716:	f04f 0200 	mov.w	r2, #0
 800471a:	f04f 0300 	mov.w	r3, #0
 800471e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004722:	4629      	mov	r1, r5
 8004724:	024b      	lsls	r3, r1, #9
 8004726:	4621      	mov	r1, r4
 8004728:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800472c:	4621      	mov	r1, r4
 800472e:	024a      	lsls	r2, r1, #9
 8004730:	4610      	mov	r0, r2
 8004732:	4619      	mov	r1, r3
 8004734:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004736:	2200      	movs	r2, #0
 8004738:	62bb      	str	r3, [r7, #40]	; 0x28
 800473a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800473c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004740:	f7fb fdae 	bl	80002a0 <__aeabi_uldivmod>
 8004744:	4602      	mov	r2, r0
 8004746:	460b      	mov	r3, r1
 8004748:	4613      	mov	r3, r2
 800474a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800474c:	e058      	b.n	8004800 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800474e:	4b38      	ldr	r3, [pc, #224]	; (8004830 <HAL_RCC_GetSysClockFreq+0x200>)
 8004750:	685b      	ldr	r3, [r3, #4]
 8004752:	099b      	lsrs	r3, r3, #6
 8004754:	2200      	movs	r2, #0
 8004756:	4618      	mov	r0, r3
 8004758:	4611      	mov	r1, r2
 800475a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800475e:	623b      	str	r3, [r7, #32]
 8004760:	2300      	movs	r3, #0
 8004762:	627b      	str	r3, [r7, #36]	; 0x24
 8004764:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004768:	4642      	mov	r2, r8
 800476a:	464b      	mov	r3, r9
 800476c:	f04f 0000 	mov.w	r0, #0
 8004770:	f04f 0100 	mov.w	r1, #0
 8004774:	0159      	lsls	r1, r3, #5
 8004776:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800477a:	0150      	lsls	r0, r2, #5
 800477c:	4602      	mov	r2, r0
 800477e:	460b      	mov	r3, r1
 8004780:	4641      	mov	r1, r8
 8004782:	ebb2 0a01 	subs.w	sl, r2, r1
 8004786:	4649      	mov	r1, r9
 8004788:	eb63 0b01 	sbc.w	fp, r3, r1
 800478c:	f04f 0200 	mov.w	r2, #0
 8004790:	f04f 0300 	mov.w	r3, #0
 8004794:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004798:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800479c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047a0:	ebb2 040a 	subs.w	r4, r2, sl
 80047a4:	eb63 050b 	sbc.w	r5, r3, fp
 80047a8:	f04f 0200 	mov.w	r2, #0
 80047ac:	f04f 0300 	mov.w	r3, #0
 80047b0:	00eb      	lsls	r3, r5, #3
 80047b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047b6:	00e2      	lsls	r2, r4, #3
 80047b8:	4614      	mov	r4, r2
 80047ba:	461d      	mov	r5, r3
 80047bc:	4643      	mov	r3, r8
 80047be:	18e3      	adds	r3, r4, r3
 80047c0:	603b      	str	r3, [r7, #0]
 80047c2:	464b      	mov	r3, r9
 80047c4:	eb45 0303 	adc.w	r3, r5, r3
 80047c8:	607b      	str	r3, [r7, #4]
 80047ca:	f04f 0200 	mov.w	r2, #0
 80047ce:	f04f 0300 	mov.w	r3, #0
 80047d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047d6:	4629      	mov	r1, r5
 80047d8:	028b      	lsls	r3, r1, #10
 80047da:	4621      	mov	r1, r4
 80047dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047e0:	4621      	mov	r1, r4
 80047e2:	028a      	lsls	r2, r1, #10
 80047e4:	4610      	mov	r0, r2
 80047e6:	4619      	mov	r1, r3
 80047e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047ea:	2200      	movs	r2, #0
 80047ec:	61bb      	str	r3, [r7, #24]
 80047ee:	61fa      	str	r2, [r7, #28]
 80047f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047f4:	f7fb fd54 	bl	80002a0 <__aeabi_uldivmod>
 80047f8:	4602      	mov	r2, r0
 80047fa:	460b      	mov	r3, r1
 80047fc:	4613      	mov	r3, r2
 80047fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004800:	4b0b      	ldr	r3, [pc, #44]	; (8004830 <HAL_RCC_GetSysClockFreq+0x200>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	0c1b      	lsrs	r3, r3, #16
 8004806:	f003 0303 	and.w	r3, r3, #3
 800480a:	3301      	adds	r3, #1
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8004810:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004812:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004814:	fbb2 f3f3 	udiv	r3, r2, r3
 8004818:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800481a:	e002      	b.n	8004822 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800481c:	4b05      	ldr	r3, [pc, #20]	; (8004834 <HAL_RCC_GetSysClockFreq+0x204>)
 800481e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004820:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004822:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004824:	4618      	mov	r0, r3
 8004826:	3750      	adds	r7, #80	; 0x50
 8004828:	46bd      	mov	sp, r7
 800482a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800482e:	bf00      	nop
 8004830:	40023800 	.word	0x40023800
 8004834:	00f42400 	.word	0x00f42400
 8004838:	007a1200 	.word	0x007a1200

0800483c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004840:	4b03      	ldr	r3, [pc, #12]	; (8004850 <HAL_RCC_GetHCLKFreq+0x14>)
 8004842:	681b      	ldr	r3, [r3, #0]
}
 8004844:	4618      	mov	r0, r3
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr
 800484e:	bf00      	nop
 8004850:	200009c8 	.word	0x200009c8

08004854 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004858:	f7ff fff0 	bl	800483c <HAL_RCC_GetHCLKFreq>
 800485c:	4602      	mov	r2, r0
 800485e:	4b05      	ldr	r3, [pc, #20]	; (8004874 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004860:	689b      	ldr	r3, [r3, #8]
 8004862:	0a9b      	lsrs	r3, r3, #10
 8004864:	f003 0307 	and.w	r3, r3, #7
 8004868:	4903      	ldr	r1, [pc, #12]	; (8004878 <HAL_RCC_GetPCLK1Freq+0x24>)
 800486a:	5ccb      	ldrb	r3, [r1, r3]
 800486c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004870:	4618      	mov	r0, r3
 8004872:	bd80      	pop	{r7, pc}
 8004874:	40023800 	.word	0x40023800
 8004878:	080080c0 	.word	0x080080c0

0800487c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800487c:	b580      	push	{r7, lr}
 800487e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004880:	f7ff ffdc 	bl	800483c <HAL_RCC_GetHCLKFreq>
 8004884:	4602      	mov	r2, r0
 8004886:	4b05      	ldr	r3, [pc, #20]	; (800489c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	0b5b      	lsrs	r3, r3, #13
 800488c:	f003 0307 	and.w	r3, r3, #7
 8004890:	4903      	ldr	r1, [pc, #12]	; (80048a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004892:	5ccb      	ldrb	r3, [r1, r3]
 8004894:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004898:	4618      	mov	r0, r3
 800489a:	bd80      	pop	{r7, pc}
 800489c:	40023800 	.word	0x40023800
 80048a0:	080080c0 	.word	0x080080c0

080048a4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048a4:	b580      	push	{r7, lr}
 80048a6:	b082      	sub	sp, #8
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d101      	bne.n	80048b6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048b2:	2301      	movs	r3, #1
 80048b4:	e03f      	b.n	8004936 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048bc:	b2db      	uxtb	r3, r3
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d106      	bne.n	80048d0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ca:	6878      	ldr	r0, [r7, #4]
 80048cc:	f7fd fbc6 	bl	800205c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2224      	movs	r2, #36	; 0x24
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	68da      	ldr	r2, [r3, #12]
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048e6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048e8:	6878      	ldr	r0, [r7, #4]
 80048ea:	f000 fe81 	bl	80055f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	691a      	ldr	r2, [r3, #16]
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048fc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	695a      	ldr	r2, [r3, #20]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800490c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68da      	ldr	r2, [r3, #12]
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800491c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	2220      	movs	r2, #32
 8004928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2220      	movs	r2, #32
 8004930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004934:	2300      	movs	r3, #0
}
 8004936:	4618      	mov	r0, r3
 8004938:	3708      	adds	r7, #8
 800493a:	46bd      	mov	sp, r7
 800493c:	bd80      	pop	{r7, pc}

0800493e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800493e:	b580      	push	{r7, lr}
 8004940:	b08a      	sub	sp, #40	; 0x28
 8004942:	af02      	add	r7, sp, #8
 8004944:	60f8      	str	r0, [r7, #12]
 8004946:	60b9      	str	r1, [r7, #8]
 8004948:	603b      	str	r3, [r7, #0]
 800494a:	4613      	mov	r3, r2
 800494c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b20      	cmp	r3, #32
 800495c:	d17c      	bne.n	8004a58 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	2b00      	cmp	r3, #0
 8004962:	d002      	beq.n	800496a <HAL_UART_Transmit+0x2c>
 8004964:	88fb      	ldrh	r3, [r7, #6]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d101      	bne.n	800496e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800496a:	2301      	movs	r3, #1
 800496c:	e075      	b.n	8004a5a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004974:	2b01      	cmp	r3, #1
 8004976:	d101      	bne.n	800497c <HAL_UART_Transmit+0x3e>
 8004978:	2302      	movs	r3, #2
 800497a:	e06e      	b.n	8004a5a <HAL_UART_Transmit+0x11c>
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2201      	movs	r2, #1
 8004980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	2200      	movs	r2, #0
 8004988:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2221      	movs	r2, #33	; 0x21
 800498e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004992:	f7fe f81b 	bl	80029cc <HAL_GetTick>
 8004996:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	88fa      	ldrh	r2, [r7, #6]
 800499c:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	88fa      	ldrh	r2, [r7, #6]
 80049a2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	689b      	ldr	r3, [r3, #8]
 80049a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049ac:	d108      	bne.n	80049c0 <HAL_UART_Transmit+0x82>
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	691b      	ldr	r3, [r3, #16]
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d104      	bne.n	80049c0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80049b6:	2300      	movs	r3, #0
 80049b8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049ba:	68bb      	ldr	r3, [r7, #8]
 80049bc:	61bb      	str	r3, [r7, #24]
 80049be:	e003      	b.n	80049c8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049c4:	2300      	movs	r3, #0
 80049c6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	2200      	movs	r2, #0
 80049cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80049d0:	e02a      	b.n	8004a28 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	9300      	str	r3, [sp, #0]
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	2200      	movs	r2, #0
 80049da:	2180      	movs	r1, #128	; 0x80
 80049dc:	68f8      	ldr	r0, [r7, #12]
 80049de:	f000 fbc1 	bl	8005164 <UART_WaitOnFlagUntilTimeout>
 80049e2:	4603      	mov	r3, r0
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d001      	beq.n	80049ec <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80049e8:	2303      	movs	r3, #3
 80049ea:	e036      	b.n	8004a5a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80049ec:	69fb      	ldr	r3, [r7, #28]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d10b      	bne.n	8004a0a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049f2:	69bb      	ldr	r3, [r7, #24]
 80049f4:	881b      	ldrh	r3, [r3, #0]
 80049f6:	461a      	mov	r2, r3
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a00:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	3302      	adds	r3, #2
 8004a06:	61bb      	str	r3, [r7, #24]
 8004a08:	e007      	b.n	8004a1a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a0a:	69fb      	ldr	r3, [r7, #28]
 8004a0c:	781a      	ldrb	r2, [r3, #0]
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	3301      	adds	r3, #1
 8004a18:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a1e:	b29b      	uxth	r3, r3
 8004a20:	3b01      	subs	r3, #1
 8004a22:	b29a      	uxth	r2, r3
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a2c:	b29b      	uxth	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1cf      	bne.n	80049d2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	9300      	str	r3, [sp, #0]
 8004a36:	697b      	ldr	r3, [r7, #20]
 8004a38:	2200      	movs	r2, #0
 8004a3a:	2140      	movs	r1, #64	; 0x40
 8004a3c:	68f8      	ldr	r0, [r7, #12]
 8004a3e:	f000 fb91 	bl	8005164 <UART_WaitOnFlagUntilTimeout>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d001      	beq.n	8004a4c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004a48:	2303      	movs	r3, #3
 8004a4a:	e006      	b.n	8004a5a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2220      	movs	r2, #32
 8004a50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004a54:	2300      	movs	r3, #0
 8004a56:	e000      	b.n	8004a5a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004a58:	2302      	movs	r3, #2
  }
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	3720      	adds	r7, #32
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a62:	b580      	push	{r7, lr}
 8004a64:	b08a      	sub	sp, #40	; 0x28
 8004a66:	af02      	add	r7, sp, #8
 8004a68:	60f8      	str	r0, [r7, #12]
 8004a6a:	60b9      	str	r1, [r7, #8]
 8004a6c:	603b      	str	r3, [r7, #0]
 8004a6e:	4613      	mov	r3, r2
 8004a70:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004a72:	2300      	movs	r3, #0
 8004a74:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a76:	68fb      	ldr	r3, [r7, #12]
 8004a78:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b20      	cmp	r3, #32
 8004a80:	f040 808c 	bne.w	8004b9c <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a84:	68bb      	ldr	r3, [r7, #8]
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d002      	beq.n	8004a90 <HAL_UART_Receive+0x2e>
 8004a8a:	88fb      	ldrh	r3, [r7, #6]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e084      	b.n	8004b9e <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a9a:	2b01      	cmp	r3, #1
 8004a9c:	d101      	bne.n	8004aa2 <HAL_UART_Receive+0x40>
 8004a9e:	2302      	movs	r3, #2
 8004aa0:	e07d      	b.n	8004b9e <HAL_UART_Receive+0x13c>
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	2201      	movs	r2, #1
 8004aa6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2222      	movs	r2, #34	; 0x22
 8004ab4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004abe:	f7fd ff85 	bl	80029cc <HAL_GetTick>
 8004ac2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	88fa      	ldrh	r2, [r7, #6]
 8004ac8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	88fa      	ldrh	r2, [r7, #6]
 8004ace:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004ad0:	68fb      	ldr	r3, [r7, #12]
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ad8:	d108      	bne.n	8004aec <HAL_UART_Receive+0x8a>
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	691b      	ldr	r3, [r3, #16]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d104      	bne.n	8004aec <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004ae6:	68bb      	ldr	r3, [r7, #8]
 8004ae8:	61bb      	str	r3, [r7, #24]
 8004aea:	e003      	b.n	8004af4 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004af0:	2300      	movs	r3, #0
 8004af2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	2200      	movs	r2, #0
 8004af8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004afc:	e043      	b.n	8004b86 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	9300      	str	r3, [sp, #0]
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2200      	movs	r2, #0
 8004b06:	2120      	movs	r1, #32
 8004b08:	68f8      	ldr	r0, [r7, #12]
 8004b0a:	f000 fb2b 	bl	8005164 <UART_WaitOnFlagUntilTimeout>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d001      	beq.n	8004b18 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004b14:	2303      	movs	r3, #3
 8004b16:	e042      	b.n	8004b9e <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d10c      	bne.n	8004b38 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004b2a:	b29a      	uxth	r2, r3
 8004b2c:	69bb      	ldr	r3, [r7, #24]
 8004b2e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004b30:	69bb      	ldr	r3, [r7, #24]
 8004b32:	3302      	adds	r3, #2
 8004b34:	61bb      	str	r3, [r7, #24]
 8004b36:	e01f      	b.n	8004b78 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	689b      	ldr	r3, [r3, #8]
 8004b3c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b40:	d007      	beq.n	8004b52 <HAL_UART_Receive+0xf0>
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	689b      	ldr	r3, [r3, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d10a      	bne.n	8004b60 <HAL_UART_Receive+0xfe>
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	691b      	ldr	r3, [r3, #16]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d106      	bne.n	8004b60 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	b2da      	uxtb	r2, r3
 8004b5a:	69fb      	ldr	r3, [r7, #28]
 8004b5c:	701a      	strb	r2, [r3, #0]
 8004b5e:	e008      	b.n	8004b72 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	685b      	ldr	r3, [r3, #4]
 8004b66:	b2db      	uxtb	r3, r3
 8004b68:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004b6c:	b2da      	uxtb	r2, r3
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004b72:	69fb      	ldr	r3, [r7, #28]
 8004b74:	3301      	adds	r3, #1
 8004b76:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	3b01      	subs	r3, #1
 8004b80:	b29a      	uxth	r2, r3
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d1b6      	bne.n	8004afe <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	2220      	movs	r2, #32
 8004b94:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	e000      	b.n	8004b9e <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004b9c:	2302      	movs	r3, #2
  }
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3720      	adds	r7, #32
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b084      	sub	sp, #16
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	60f8      	str	r0, [r7, #12]
 8004bae:	60b9      	str	r1, [r7, #8]
 8004bb0:	4613      	mov	r3, r2
 8004bb2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004bba:	b2db      	uxtb	r3, r3
 8004bbc:	2b20      	cmp	r3, #32
 8004bbe:	d11d      	bne.n	8004bfc <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d002      	beq.n	8004bcc <HAL_UART_Receive_IT+0x26>
 8004bc6:	88fb      	ldrh	r3, [r7, #6]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d101      	bne.n	8004bd0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004bcc:	2301      	movs	r3, #1
 8004bce:	e016      	b.n	8004bfe <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004bd6:	2b01      	cmp	r3, #1
 8004bd8:	d101      	bne.n	8004bde <HAL_UART_Receive_IT+0x38>
 8004bda:	2302      	movs	r3, #2
 8004bdc:	e00f      	b.n	8004bfe <HAL_UART_Receive_IT+0x58>
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	2201      	movs	r2, #1
 8004be2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004bec:	88fb      	ldrh	r3, [r7, #6]
 8004bee:	461a      	mov	r2, r3
 8004bf0:	68b9      	ldr	r1, [r7, #8]
 8004bf2:	68f8      	ldr	r0, [r7, #12]
 8004bf4:	f000 fb24 	bl	8005240 <UART_Start_Receive_IT>
 8004bf8:	4603      	mov	r3, r0
 8004bfa:	e000      	b.n	8004bfe <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8004bfc:	2302      	movs	r3, #2
  }
}
 8004bfe:	4618      	mov	r0, r3
 8004c00:	3710      	adds	r7, #16
 8004c02:	46bd      	mov	sp, r7
 8004c04:	bd80      	pop	{r7, pc}
	...

08004c08 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b0ba      	sub	sp, #232	; 0xe8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	695b      	ldr	r3, [r3, #20]
 8004c2a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004c34:	2300      	movs	r3, #0
 8004c36:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c3e:	f003 030f 	and.w	r3, r3, #15
 8004c42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004c46:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d10f      	bne.n	8004c6e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c52:	f003 0320 	and.w	r3, r3, #32
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d009      	beq.n	8004c6e <HAL_UART_IRQHandler+0x66>
 8004c5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c5e:	f003 0320 	and.w	r3, r3, #32
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d003      	beq.n	8004c6e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c66:	6878      	ldr	r0, [r7, #4]
 8004c68:	f000 fc07 	bl	800547a <UART_Receive_IT>
      return;
 8004c6c:	e256      	b.n	800511c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c6e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	f000 80de 	beq.w	8004e34 <HAL_UART_IRQHandler+0x22c>
 8004c78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004c7c:	f003 0301 	and.w	r3, r3, #1
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d106      	bne.n	8004c92 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c84:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004c88:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	f000 80d1 	beq.w	8004e34 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c96:	f003 0301 	and.w	r3, r3, #1
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00b      	beq.n	8004cb6 <HAL_UART_IRQHandler+0xae>
 8004c9e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ca2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ca6:	2b00      	cmp	r3, #0
 8004ca8:	d005      	beq.n	8004cb6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cae:	f043 0201 	orr.w	r2, r3, #1
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cba:	f003 0304 	and.w	r3, r3, #4
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d00b      	beq.n	8004cda <HAL_UART_IRQHandler+0xd2>
 8004cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cc6:	f003 0301 	and.w	r3, r3, #1
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d005      	beq.n	8004cda <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cd2:	f043 0202 	orr.w	r2, r3, #2
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cde:	f003 0302 	and.w	r3, r3, #2
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d00b      	beq.n	8004cfe <HAL_UART_IRQHandler+0xf6>
 8004ce6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004cea:	f003 0301 	and.w	r3, r3, #1
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d005      	beq.n	8004cfe <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf6:	f043 0204 	orr.w	r2, r3, #4
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cfe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d02:	f003 0308 	and.w	r3, r3, #8
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d011      	beq.n	8004d2e <HAL_UART_IRQHandler+0x126>
 8004d0a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d0e:	f003 0320 	and.w	r3, r3, #32
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d105      	bne.n	8004d22 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004d16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004d1a:	f003 0301 	and.w	r3, r3, #1
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d005      	beq.n	8004d2e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d26:	f043 0208 	orr.w	r2, r3, #8
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	f000 81ed 	beq.w	8005112 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d3c:	f003 0320 	and.w	r3, r3, #32
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d008      	beq.n	8004d56 <HAL_UART_IRQHandler+0x14e>
 8004d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d48:	f003 0320 	and.w	r3, r3, #32
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d50:	6878      	ldr	r0, [r7, #4]
 8004d52:	f000 fb92 	bl	800547a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	695b      	ldr	r3, [r3, #20]
 8004d5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d60:	2b40      	cmp	r3, #64	; 0x40
 8004d62:	bf0c      	ite	eq
 8004d64:	2301      	moveq	r3, #1
 8004d66:	2300      	movne	r3, #0
 8004d68:	b2db      	uxtb	r3, r3
 8004d6a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d72:	f003 0308 	and.w	r3, r3, #8
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d103      	bne.n	8004d82 <HAL_UART_IRQHandler+0x17a>
 8004d7a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d04f      	beq.n	8004e22 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d82:	6878      	ldr	r0, [r7, #4]
 8004d84:	f000 fa9a 	bl	80052bc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	695b      	ldr	r3, [r3, #20]
 8004d8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d92:	2b40      	cmp	r3, #64	; 0x40
 8004d94:	d141      	bne.n	8004e1a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	3314      	adds	r3, #20
 8004d9c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004dac:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004db4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3314      	adds	r3, #20
 8004dbe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004dc2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004dc6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004dce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004dd2:	e841 2300 	strex	r3, r2, [r1]
 8004dd6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004dda:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d1d9      	bne.n	8004d96 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d013      	beq.n	8004e12 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dee:	4a7d      	ldr	r2, [pc, #500]	; (8004fe4 <HAL_UART_IRQHandler+0x3dc>)
 8004df0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004df6:	4618      	mov	r0, r3
 8004df8:	f7fd ff99 	bl	8002d2e <HAL_DMA_Abort_IT>
 8004dfc:	4603      	mov	r3, r0
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d016      	beq.n	8004e30 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e08:	687a      	ldr	r2, [r7, #4]
 8004e0a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004e0c:	4610      	mov	r0, r2
 8004e0e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e10:	e00e      	b.n	8004e30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f990 	bl	8005138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e18:	e00a      	b.n	8004e30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 f98c 	bl	8005138 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e20:	e006      	b.n	8004e30 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004e22:	6878      	ldr	r0, [r7, #4]
 8004e24:	f000 f988 	bl	8005138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8004e2e:	e170      	b.n	8005112 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e30:	bf00      	nop
    return;
 8004e32:	e16e      	b.n	8005112 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e38:	2b01      	cmp	r3, #1
 8004e3a:	f040 814a 	bne.w	80050d2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e42:	f003 0310 	and.w	r3, r3, #16
 8004e46:	2b00      	cmp	r3, #0
 8004e48:	f000 8143 	beq.w	80050d2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004e50:	f003 0310 	and.w	r3, r3, #16
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	f000 813c 	beq.w	80050d2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	60bb      	str	r3, [r7, #8]
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	685b      	ldr	r3, [r3, #4]
 8004e6c:	60bb      	str	r3, [r7, #8]
 8004e6e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e7a:	2b40      	cmp	r3, #64	; 0x40
 8004e7c:	f040 80b4 	bne.w	8004fe8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	685b      	ldr	r3, [r3, #4]
 8004e88:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e8c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	f000 8140 	beq.w	8005116 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004e9a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004e9e:	429a      	cmp	r2, r3
 8004ea0:	f080 8139 	bcs.w	8005116 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004eaa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eb0:	69db      	ldr	r3, [r3, #28]
 8004eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eb6:	f000 8088 	beq.w	8004fca <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	330c      	adds	r3, #12
 8004ec0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ec4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004ec8:	e853 3f00 	ldrex	r3, [r3]
 8004ecc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004ed0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004ed4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ed8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	330c      	adds	r3, #12
 8004ee2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004ee6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004eea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004eee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004ef2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004ef6:	e841 2300 	strex	r3, r2, [r1]
 8004efa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004efe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1d9      	bne.n	8004eba <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	3314      	adds	r3, #20
 8004f0c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f0e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004f10:	e853 3f00 	ldrex	r3, [r3]
 8004f14:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004f16:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f18:	f023 0301 	bic.w	r3, r3, #1
 8004f1c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	3314      	adds	r3, #20
 8004f26:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004f2a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004f2e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004f32:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004f36:	e841 2300 	strex	r3, r2, [r1]
 8004f3a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004f3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d1e1      	bne.n	8004f06 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	3314      	adds	r3, #20
 8004f48:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004f4c:	e853 3f00 	ldrex	r3, [r3]
 8004f50:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004f52:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004f54:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004f58:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	3314      	adds	r3, #20
 8004f62:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004f66:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004f68:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f6a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004f6c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004f6e:	e841 2300 	strex	r3, r2, [r1]
 8004f72:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004f74:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004f76:	2b00      	cmp	r3, #0
 8004f78:	d1e3      	bne.n	8004f42 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	2220      	movs	r2, #32
 8004f7e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	2200      	movs	r2, #0
 8004f86:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	330c      	adds	r3, #12
 8004f8e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004f92:	e853 3f00 	ldrex	r3, [r3]
 8004f96:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004f98:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004f9a:	f023 0310 	bic.w	r3, r3, #16
 8004f9e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	330c      	adds	r3, #12
 8004fa8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004fac:	65ba      	str	r2, [r7, #88]	; 0x58
 8004fae:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fb0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004fb2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004fb4:	e841 2300 	strex	r3, r2, [r1]
 8004fb8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d1e3      	bne.n	8004f88 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fc4:	4618      	mov	r0, r3
 8004fc6:	f7fd fe42 	bl	8002c4e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004fd2:	b29b      	uxth	r3, r3
 8004fd4:	1ad3      	subs	r3, r2, r3
 8004fd6:	b29b      	uxth	r3, r3
 8004fd8:	4619      	mov	r1, r3
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f000 f8b6 	bl	800514c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fe0:	e099      	b.n	8005116 <HAL_UART_IRQHandler+0x50e>
 8004fe2:	bf00      	nop
 8004fe4:	08005383 	.word	0x08005383
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	1ad3      	subs	r3, r2, r3
 8004ff4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ffc:	b29b      	uxth	r3, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 808b 	beq.w	800511a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8005004:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005008:	2b00      	cmp	r3, #0
 800500a:	f000 8086 	beq.w	800511a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	330c      	adds	r3, #12
 8005014:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005018:	e853 3f00 	ldrex	r3, [r3]
 800501c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800501e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005020:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005024:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	330c      	adds	r3, #12
 800502e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005032:	647a      	str	r2, [r7, #68]	; 0x44
 8005034:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005036:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005038:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800503a:	e841 2300 	strex	r3, r2, [r1]
 800503e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005042:	2b00      	cmp	r3, #0
 8005044:	d1e3      	bne.n	800500e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	3314      	adds	r3, #20
 800504c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800504e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005050:	e853 3f00 	ldrex	r3, [r3]
 8005054:	623b      	str	r3, [r7, #32]
   return(result);
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	f023 0301 	bic.w	r3, r3, #1
 800505c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3314      	adds	r3, #20
 8005066:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800506a:	633a      	str	r2, [r7, #48]	; 0x30
 800506c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800506e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005070:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005072:	e841 2300 	strex	r3, r2, [r1]
 8005076:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800507a:	2b00      	cmp	r3, #0
 800507c:	d1e3      	bne.n	8005046 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	2220      	movs	r2, #32
 8005082:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2200      	movs	r2, #0
 800508a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	330c      	adds	r3, #12
 8005092:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	e853 3f00 	ldrex	r3, [r3]
 800509a:	60fb      	str	r3, [r7, #12]
   return(result);
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	f023 0310 	bic.w	r3, r3, #16
 80050a2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	330c      	adds	r3, #12
 80050ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80050b0:	61fa      	str	r2, [r7, #28]
 80050b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050b4:	69b9      	ldr	r1, [r7, #24]
 80050b6:	69fa      	ldr	r2, [r7, #28]
 80050b8:	e841 2300 	strex	r3, r2, [r1]
 80050bc:	617b      	str	r3, [r7, #20]
   return(result);
 80050be:	697b      	ldr	r3, [r7, #20]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1e3      	bne.n	800508c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050c4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80050c8:	4619      	mov	r1, r3
 80050ca:	6878      	ldr	r0, [r7, #4]
 80050cc:	f000 f83e 	bl	800514c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050d0:	e023      	b.n	800511a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d009      	beq.n	80050f2 <HAL_UART_IRQHandler+0x4ea>
 80050de:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80050e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d003      	beq.n	80050f2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80050ea:	6878      	ldr	r0, [r7, #4]
 80050ec:	f000 f95d 	bl	80053aa <UART_Transmit_IT>
    return;
 80050f0:	e014      	b.n	800511c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80050f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d00e      	beq.n	800511c <HAL_UART_IRQHandler+0x514>
 80050fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005102:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005106:	2b00      	cmp	r3, #0
 8005108:	d008      	beq.n	800511c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800510a:	6878      	ldr	r0, [r7, #4]
 800510c:	f000 f99d 	bl	800544a <UART_EndTransmit_IT>
    return;
 8005110:	e004      	b.n	800511c <HAL_UART_IRQHandler+0x514>
    return;
 8005112:	bf00      	nop
 8005114:	e002      	b.n	800511c <HAL_UART_IRQHandler+0x514>
      return;
 8005116:	bf00      	nop
 8005118:	e000      	b.n	800511c <HAL_UART_IRQHandler+0x514>
      return;
 800511a:	bf00      	nop
  }
}
 800511c:	37e8      	adds	r7, #232	; 0xe8
 800511e:	46bd      	mov	sp, r7
 8005120:	bd80      	pop	{r7, pc}
 8005122:	bf00      	nop

08005124 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005124:	b480      	push	{r7}
 8005126:	b083      	sub	sp, #12
 8005128:	af00      	add	r7, sp, #0
 800512a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800512c:	bf00      	nop
 800512e:	370c      	adds	r7, #12
 8005130:	46bd      	mov	sp, r7
 8005132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005136:	4770      	bx	lr

08005138 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005138:	b480      	push	{r7}
 800513a:	b083      	sub	sp, #12
 800513c:	af00      	add	r7, sp, #0
 800513e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005140:	bf00      	nop
 8005142:	370c      	adds	r7, #12
 8005144:	46bd      	mov	sp, r7
 8005146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800514a:	4770      	bx	lr

0800514c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	460b      	mov	r3, r1
 8005156:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr

08005164 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b090      	sub	sp, #64	; 0x40
 8005168:	af00      	add	r7, sp, #0
 800516a:	60f8      	str	r0, [r7, #12]
 800516c:	60b9      	str	r1, [r7, #8]
 800516e:	603b      	str	r3, [r7, #0]
 8005170:	4613      	mov	r3, r2
 8005172:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005174:	e050      	b.n	8005218 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005176:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005178:	f1b3 3fff 	cmp.w	r3, #4294967295
 800517c:	d04c      	beq.n	8005218 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800517e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005180:	2b00      	cmp	r3, #0
 8005182:	d007      	beq.n	8005194 <UART_WaitOnFlagUntilTimeout+0x30>
 8005184:	f7fd fc22 	bl	80029cc <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005190:	429a      	cmp	r2, r3
 8005192:	d241      	bcs.n	8005218 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	330c      	adds	r3, #12
 800519a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519e:	e853 3f00 	ldrex	r3, [r3]
 80051a2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80051aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	330c      	adds	r3, #12
 80051b2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80051b4:	637a      	str	r2, [r7, #52]	; 0x34
 80051b6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80051ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80051bc:	e841 2300 	strex	r3, r2, [r1]
 80051c0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80051c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d1e5      	bne.n	8005194 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	3314      	adds	r3, #20
 80051ce:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	e853 3f00 	ldrex	r3, [r3]
 80051d6:	613b      	str	r3, [r7, #16]
   return(result);
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	f023 0301 	bic.w	r3, r3, #1
 80051de:	63bb      	str	r3, [r7, #56]	; 0x38
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3314      	adds	r3, #20
 80051e6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80051e8:	623a      	str	r2, [r7, #32]
 80051ea:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051ec:	69f9      	ldr	r1, [r7, #28]
 80051ee:	6a3a      	ldr	r2, [r7, #32]
 80051f0:	e841 2300 	strex	r3, r2, [r1]
 80051f4:	61bb      	str	r3, [r7, #24]
   return(result);
 80051f6:	69bb      	ldr	r3, [r7, #24]
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d1e5      	bne.n	80051c8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	2220      	movs	r2, #32
 8005200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	2220      	movs	r2, #32
 8005208:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2200      	movs	r2, #0
 8005210:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005214:	2303      	movs	r3, #3
 8005216:	e00f      	b.n	8005238 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	4013      	ands	r3, r2
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	429a      	cmp	r2, r3
 8005226:	bf0c      	ite	eq
 8005228:	2301      	moveq	r3, #1
 800522a:	2300      	movne	r3, #0
 800522c:	b2db      	uxtb	r3, r3
 800522e:	461a      	mov	r2, r3
 8005230:	79fb      	ldrb	r3, [r7, #7]
 8005232:	429a      	cmp	r2, r3
 8005234:	d09f      	beq.n	8005176 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005236:	2300      	movs	r3, #0
}
 8005238:	4618      	mov	r0, r3
 800523a:	3740      	adds	r7, #64	; 0x40
 800523c:	46bd      	mov	sp, r7
 800523e:	bd80      	pop	{r7, pc}

08005240 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005240:	b480      	push	{r7}
 8005242:	b085      	sub	sp, #20
 8005244:	af00      	add	r7, sp, #0
 8005246:	60f8      	str	r0, [r7, #12]
 8005248:	60b9      	str	r1, [r7, #8]
 800524a:	4613      	mov	r3, r2
 800524c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	88fa      	ldrh	r2, [r7, #6]
 8005258:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	88fa      	ldrh	r2, [r7, #6]
 800525e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	2222      	movs	r2, #34	; 0x22
 800526a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	2200      	movs	r2, #0
 8005272:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d007      	beq.n	800528e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	68da      	ldr	r2, [r3, #12]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800528c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	695a      	ldr	r2, [r3, #20]
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f042 0201 	orr.w	r2, r2, #1
 800529c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800529e:	68fb      	ldr	r3, [r7, #12]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68da      	ldr	r2, [r3, #12]
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	f042 0220 	orr.w	r2, r2, #32
 80052ac:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052bc:	b480      	push	{r7}
 80052be:	b095      	sub	sp, #84	; 0x54
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	330c      	adds	r3, #12
 80052ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80052ce:	e853 3f00 	ldrex	r3, [r3]
 80052d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80052d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80052da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	330c      	adds	r3, #12
 80052e2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80052e4:	643a      	str	r2, [r7, #64]	; 0x40
 80052e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80052ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80052ec:	e841 2300 	strex	r3, r2, [r1]
 80052f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80052f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f4:	2b00      	cmp	r3, #0
 80052f6:	d1e5      	bne.n	80052c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3314      	adds	r3, #20
 80052fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005300:	6a3b      	ldr	r3, [r7, #32]
 8005302:	e853 3f00 	ldrex	r3, [r3]
 8005306:	61fb      	str	r3, [r7, #28]
   return(result);
 8005308:	69fb      	ldr	r3, [r7, #28]
 800530a:	f023 0301 	bic.w	r3, r3, #1
 800530e:	64bb      	str	r3, [r7, #72]	; 0x48
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	3314      	adds	r3, #20
 8005316:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005318:	62fa      	str	r2, [r7, #44]	; 0x2c
 800531a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800531c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800531e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005320:	e841 2300 	strex	r3, r2, [r1]
 8005324:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005328:	2b00      	cmp	r3, #0
 800532a:	d1e5      	bne.n	80052f8 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005330:	2b01      	cmp	r3, #1
 8005332:	d119      	bne.n	8005368 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	330c      	adds	r3, #12
 800533a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	e853 3f00 	ldrex	r3, [r3]
 8005342:	60bb      	str	r3, [r7, #8]
   return(result);
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	f023 0310 	bic.w	r3, r3, #16
 800534a:	647b      	str	r3, [r7, #68]	; 0x44
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	330c      	adds	r3, #12
 8005352:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005354:	61ba      	str	r2, [r7, #24]
 8005356:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005358:	6979      	ldr	r1, [r7, #20]
 800535a:	69ba      	ldr	r2, [r7, #24]
 800535c:	e841 2300 	strex	r3, r2, [r1]
 8005360:	613b      	str	r3, [r7, #16]
   return(result);
 8005362:	693b      	ldr	r3, [r7, #16]
 8005364:	2b00      	cmp	r3, #0
 8005366:	d1e5      	bne.n	8005334 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2220      	movs	r2, #32
 800536c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005376:	bf00      	nop
 8005378:	3754      	adds	r7, #84	; 0x54
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr

08005382 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b084      	sub	sp, #16
 8005386:	af00      	add	r7, sp, #0
 8005388:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	2200      	movs	r2, #0
 8005394:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800539c:	68f8      	ldr	r0, [r7, #12]
 800539e:	f7ff fecb 	bl	8005138 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80053a2:	bf00      	nop
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}

080053aa <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b085      	sub	sp, #20
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	2b21      	cmp	r3, #33	; 0x21
 80053bc:	d13e      	bne.n	800543c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	689b      	ldr	r3, [r3, #8]
 80053c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80053c6:	d114      	bne.n	80053f2 <UART_Transmit_IT+0x48>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	691b      	ldr	r3, [r3, #16]
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d110      	bne.n	80053f2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6a1b      	ldr	r3, [r3, #32]
 80053d4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	881b      	ldrh	r3, [r3, #0]
 80053da:	461a      	mov	r2, r3
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80053e4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	6a1b      	ldr	r3, [r3, #32]
 80053ea:	1c9a      	adds	r2, r3, #2
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	621a      	str	r2, [r3, #32]
 80053f0:	e008      	b.n	8005404 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6a1b      	ldr	r3, [r3, #32]
 80053f6:	1c59      	adds	r1, r3, #1
 80053f8:	687a      	ldr	r2, [r7, #4]
 80053fa:	6211      	str	r1, [r2, #32]
 80053fc:	781a      	ldrb	r2, [r3, #0]
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005408:	b29b      	uxth	r3, r3
 800540a:	3b01      	subs	r3, #1
 800540c:	b29b      	uxth	r3, r3
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	4619      	mov	r1, r3
 8005412:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005414:	2b00      	cmp	r3, #0
 8005416:	d10f      	bne.n	8005438 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005426:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	68da      	ldr	r2, [r3, #12]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005436:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005438:	2300      	movs	r3, #0
 800543a:	e000      	b.n	800543e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800543c:	2302      	movs	r3, #2
  }
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800544a:	b580      	push	{r7, lr}
 800544c:	b082      	sub	sp, #8
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68da      	ldr	r2, [r3, #12]
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005460:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	2220      	movs	r2, #32
 8005466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800546a:	6878      	ldr	r0, [r7, #4]
 800546c:	f7ff fe5a 	bl	8005124 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005470:	2300      	movs	r3, #0
}
 8005472:	4618      	mov	r0, r3
 8005474:	3708      	adds	r7, #8
 8005476:	46bd      	mov	sp, r7
 8005478:	bd80      	pop	{r7, pc}

0800547a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800547a:	b580      	push	{r7, lr}
 800547c:	b08c      	sub	sp, #48	; 0x30
 800547e:	af00      	add	r7, sp, #0
 8005480:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005488:	b2db      	uxtb	r3, r3
 800548a:	2b22      	cmp	r3, #34	; 0x22
 800548c:	f040 80ab 	bne.w	80055e6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	689b      	ldr	r3, [r3, #8]
 8005494:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005498:	d117      	bne.n	80054ca <UART_Receive_IT+0x50>
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	691b      	ldr	r3, [r3, #16]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d113      	bne.n	80054ca <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80054a2:	2300      	movs	r3, #0
 80054a4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054aa:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	b29b      	uxth	r3, r3
 80054b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80054b8:	b29a      	uxth	r2, r3
 80054ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80054bc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054c2:	1c9a      	adds	r2, r3, #2
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	629a      	str	r2, [r3, #40]	; 0x28
 80054c8:	e026      	b.n	8005518 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ce:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80054d0:	2300      	movs	r3, #0
 80054d2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054dc:	d007      	beq.n	80054ee <UART_Receive_IT+0x74>
 80054de:	687b      	ldr	r3, [r7, #4]
 80054e0:	689b      	ldr	r3, [r3, #8]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d10a      	bne.n	80054fc <UART_Receive_IT+0x82>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	691b      	ldr	r3, [r3, #16]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d106      	bne.n	80054fc <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	b2da      	uxtb	r2, r3
 80054f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054f8:	701a      	strb	r2, [r3, #0]
 80054fa:	e008      	b.n	800550e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	685b      	ldr	r3, [r3, #4]
 8005502:	b2db      	uxtb	r3, r3
 8005504:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005508:	b2da      	uxtb	r2, r3
 800550a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800550c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005512:	1c5a      	adds	r2, r3, #1
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800551c:	b29b      	uxth	r3, r3
 800551e:	3b01      	subs	r3, #1
 8005520:	b29b      	uxth	r3, r3
 8005522:	687a      	ldr	r2, [r7, #4]
 8005524:	4619      	mov	r1, r3
 8005526:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005528:	2b00      	cmp	r3, #0
 800552a:	d15a      	bne.n	80055e2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f022 0220 	bic.w	r2, r2, #32
 800553a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68da      	ldr	r2, [r3, #12]
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800554a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	695a      	ldr	r2, [r3, #20]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f022 0201 	bic.w	r2, r2, #1
 800555a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2220      	movs	r2, #32
 8005560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005568:	2b01      	cmp	r3, #1
 800556a:	d135      	bne.n	80055d8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	2200      	movs	r2, #0
 8005570:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	330c      	adds	r3, #12
 8005578:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	e853 3f00 	ldrex	r3, [r3]
 8005580:	613b      	str	r3, [r7, #16]
   return(result);
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	f023 0310 	bic.w	r3, r3, #16
 8005588:	627b      	str	r3, [r7, #36]	; 0x24
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	681b      	ldr	r3, [r3, #0]
 800558e:	330c      	adds	r3, #12
 8005590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005592:	623a      	str	r2, [r7, #32]
 8005594:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005596:	69f9      	ldr	r1, [r7, #28]
 8005598:	6a3a      	ldr	r2, [r7, #32]
 800559a:	e841 2300 	strex	r3, r2, [r1]
 800559e:	61bb      	str	r3, [r7, #24]
   return(result);
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d1e5      	bne.n	8005572 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f003 0310 	and.w	r3, r3, #16
 80055b0:	2b10      	cmp	r3, #16
 80055b2:	d10a      	bne.n	80055ca <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055b4:	2300      	movs	r3, #0
 80055b6:	60fb      	str	r3, [r7, #12]
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	60fb      	str	r3, [r7, #12]
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	685b      	ldr	r3, [r3, #4]
 80055c6:	60fb      	str	r3, [r7, #12]
 80055c8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80055ce:	4619      	mov	r1, r3
 80055d0:	6878      	ldr	r0, [r7, #4]
 80055d2:	f7ff fdbb 	bl	800514c <HAL_UARTEx_RxEventCallback>
 80055d6:	e002      	b.n	80055de <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80055d8:	6878      	ldr	r0, [r7, #4]
 80055da:	f7fb ff5b 	bl	8001494 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	e002      	b.n	80055e8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80055e2:	2300      	movs	r3, #0
 80055e4:	e000      	b.n	80055e8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80055e6:	2302      	movs	r3, #2
  }
}
 80055e8:	4618      	mov	r0, r3
 80055ea:	3730      	adds	r7, #48	; 0x30
 80055ec:	46bd      	mov	sp, r7
 80055ee:	bd80      	pop	{r7, pc}

080055f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80055f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80055f4:	b0c0      	sub	sp, #256	; 0x100
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80055fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	691b      	ldr	r3, [r3, #16]
 8005604:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800560c:	68d9      	ldr	r1, [r3, #12]
 800560e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005612:	681a      	ldr	r2, [r3, #0]
 8005614:	ea40 0301 	orr.w	r3, r0, r1
 8005618:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800561a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800561e:	689a      	ldr	r2, [r3, #8]
 8005620:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005624:	691b      	ldr	r3, [r3, #16]
 8005626:	431a      	orrs	r2, r3
 8005628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800562c:	695b      	ldr	r3, [r3, #20]
 800562e:	431a      	orrs	r2, r3
 8005630:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005634:	69db      	ldr	r3, [r3, #28]
 8005636:	4313      	orrs	r3, r2
 8005638:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800563c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	68db      	ldr	r3, [r3, #12]
 8005644:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005648:	f021 010c 	bic.w	r1, r1, #12
 800564c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005650:	681a      	ldr	r2, [r3, #0]
 8005652:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005656:	430b      	orrs	r3, r1
 8005658:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800565a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	695b      	ldr	r3, [r3, #20]
 8005662:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005666:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800566a:	6999      	ldr	r1, [r3, #24]
 800566c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005670:	681a      	ldr	r2, [r3, #0]
 8005672:	ea40 0301 	orr.w	r3, r0, r1
 8005676:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005678:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	4b8f      	ldr	r3, [pc, #572]	; (80058bc <UART_SetConfig+0x2cc>)
 8005680:	429a      	cmp	r2, r3
 8005682:	d005      	beq.n	8005690 <UART_SetConfig+0xa0>
 8005684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005688:	681a      	ldr	r2, [r3, #0]
 800568a:	4b8d      	ldr	r3, [pc, #564]	; (80058c0 <UART_SetConfig+0x2d0>)
 800568c:	429a      	cmp	r2, r3
 800568e:	d104      	bne.n	800569a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005690:	f7ff f8f4 	bl	800487c <HAL_RCC_GetPCLK2Freq>
 8005694:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005698:	e003      	b.n	80056a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800569a:	f7ff f8db 	bl	8004854 <HAL_RCC_GetPCLK1Freq>
 800569e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80056a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056a6:	69db      	ldr	r3, [r3, #28]
 80056a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056ac:	f040 810c 	bne.w	80058c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80056b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80056b4:	2200      	movs	r2, #0
 80056b6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80056ba:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80056be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80056c2:	4622      	mov	r2, r4
 80056c4:	462b      	mov	r3, r5
 80056c6:	1891      	adds	r1, r2, r2
 80056c8:	65b9      	str	r1, [r7, #88]	; 0x58
 80056ca:	415b      	adcs	r3, r3
 80056cc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80056ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80056d2:	4621      	mov	r1, r4
 80056d4:	eb12 0801 	adds.w	r8, r2, r1
 80056d8:	4629      	mov	r1, r5
 80056da:	eb43 0901 	adc.w	r9, r3, r1
 80056de:	f04f 0200 	mov.w	r2, #0
 80056e2:	f04f 0300 	mov.w	r3, #0
 80056e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80056ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80056ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80056f2:	4690      	mov	r8, r2
 80056f4:	4699      	mov	r9, r3
 80056f6:	4623      	mov	r3, r4
 80056f8:	eb18 0303 	adds.w	r3, r8, r3
 80056fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005700:	462b      	mov	r3, r5
 8005702:	eb49 0303 	adc.w	r3, r9, r3
 8005706:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800570a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2200      	movs	r2, #0
 8005712:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005716:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800571a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800571e:	460b      	mov	r3, r1
 8005720:	18db      	adds	r3, r3, r3
 8005722:	653b      	str	r3, [r7, #80]	; 0x50
 8005724:	4613      	mov	r3, r2
 8005726:	eb42 0303 	adc.w	r3, r2, r3
 800572a:	657b      	str	r3, [r7, #84]	; 0x54
 800572c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005730:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005734:	f7fa fdb4 	bl	80002a0 <__aeabi_uldivmod>
 8005738:	4602      	mov	r2, r0
 800573a:	460b      	mov	r3, r1
 800573c:	4b61      	ldr	r3, [pc, #388]	; (80058c4 <UART_SetConfig+0x2d4>)
 800573e:	fba3 2302 	umull	r2, r3, r3, r2
 8005742:	095b      	lsrs	r3, r3, #5
 8005744:	011c      	lsls	r4, r3, #4
 8005746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800574a:	2200      	movs	r2, #0
 800574c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005750:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005754:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005758:	4642      	mov	r2, r8
 800575a:	464b      	mov	r3, r9
 800575c:	1891      	adds	r1, r2, r2
 800575e:	64b9      	str	r1, [r7, #72]	; 0x48
 8005760:	415b      	adcs	r3, r3
 8005762:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005764:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005768:	4641      	mov	r1, r8
 800576a:	eb12 0a01 	adds.w	sl, r2, r1
 800576e:	4649      	mov	r1, r9
 8005770:	eb43 0b01 	adc.w	fp, r3, r1
 8005774:	f04f 0200 	mov.w	r2, #0
 8005778:	f04f 0300 	mov.w	r3, #0
 800577c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005780:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005784:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005788:	4692      	mov	sl, r2
 800578a:	469b      	mov	fp, r3
 800578c:	4643      	mov	r3, r8
 800578e:	eb1a 0303 	adds.w	r3, sl, r3
 8005792:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005796:	464b      	mov	r3, r9
 8005798:	eb4b 0303 	adc.w	r3, fp, r3
 800579c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80057a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80057a4:	685b      	ldr	r3, [r3, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80057ac:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80057b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80057b4:	460b      	mov	r3, r1
 80057b6:	18db      	adds	r3, r3, r3
 80057b8:	643b      	str	r3, [r7, #64]	; 0x40
 80057ba:	4613      	mov	r3, r2
 80057bc:	eb42 0303 	adc.w	r3, r2, r3
 80057c0:	647b      	str	r3, [r7, #68]	; 0x44
 80057c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80057c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80057ca:	f7fa fd69 	bl	80002a0 <__aeabi_uldivmod>
 80057ce:	4602      	mov	r2, r0
 80057d0:	460b      	mov	r3, r1
 80057d2:	4611      	mov	r1, r2
 80057d4:	4b3b      	ldr	r3, [pc, #236]	; (80058c4 <UART_SetConfig+0x2d4>)
 80057d6:	fba3 2301 	umull	r2, r3, r3, r1
 80057da:	095b      	lsrs	r3, r3, #5
 80057dc:	2264      	movs	r2, #100	; 0x64
 80057de:	fb02 f303 	mul.w	r3, r2, r3
 80057e2:	1acb      	subs	r3, r1, r3
 80057e4:	00db      	lsls	r3, r3, #3
 80057e6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80057ea:	4b36      	ldr	r3, [pc, #216]	; (80058c4 <UART_SetConfig+0x2d4>)
 80057ec:	fba3 2302 	umull	r2, r3, r3, r2
 80057f0:	095b      	lsrs	r3, r3, #5
 80057f2:	005b      	lsls	r3, r3, #1
 80057f4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80057f8:	441c      	add	r4, r3
 80057fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057fe:	2200      	movs	r2, #0
 8005800:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005804:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005808:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800580c:	4642      	mov	r2, r8
 800580e:	464b      	mov	r3, r9
 8005810:	1891      	adds	r1, r2, r2
 8005812:	63b9      	str	r1, [r7, #56]	; 0x38
 8005814:	415b      	adcs	r3, r3
 8005816:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005818:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800581c:	4641      	mov	r1, r8
 800581e:	1851      	adds	r1, r2, r1
 8005820:	6339      	str	r1, [r7, #48]	; 0x30
 8005822:	4649      	mov	r1, r9
 8005824:	414b      	adcs	r3, r1
 8005826:	637b      	str	r3, [r7, #52]	; 0x34
 8005828:	f04f 0200 	mov.w	r2, #0
 800582c:	f04f 0300 	mov.w	r3, #0
 8005830:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005834:	4659      	mov	r1, fp
 8005836:	00cb      	lsls	r3, r1, #3
 8005838:	4651      	mov	r1, sl
 800583a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800583e:	4651      	mov	r1, sl
 8005840:	00ca      	lsls	r2, r1, #3
 8005842:	4610      	mov	r0, r2
 8005844:	4619      	mov	r1, r3
 8005846:	4603      	mov	r3, r0
 8005848:	4642      	mov	r2, r8
 800584a:	189b      	adds	r3, r3, r2
 800584c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005850:	464b      	mov	r3, r9
 8005852:	460a      	mov	r2, r1
 8005854:	eb42 0303 	adc.w	r3, r2, r3
 8005858:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800585c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005868:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800586c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005870:	460b      	mov	r3, r1
 8005872:	18db      	adds	r3, r3, r3
 8005874:	62bb      	str	r3, [r7, #40]	; 0x28
 8005876:	4613      	mov	r3, r2
 8005878:	eb42 0303 	adc.w	r3, r2, r3
 800587c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800587e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005882:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005886:	f7fa fd0b 	bl	80002a0 <__aeabi_uldivmod>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4b0d      	ldr	r3, [pc, #52]	; (80058c4 <UART_SetConfig+0x2d4>)
 8005890:	fba3 1302 	umull	r1, r3, r3, r2
 8005894:	095b      	lsrs	r3, r3, #5
 8005896:	2164      	movs	r1, #100	; 0x64
 8005898:	fb01 f303 	mul.w	r3, r1, r3
 800589c:	1ad3      	subs	r3, r2, r3
 800589e:	00db      	lsls	r3, r3, #3
 80058a0:	3332      	adds	r3, #50	; 0x32
 80058a2:	4a08      	ldr	r2, [pc, #32]	; (80058c4 <UART_SetConfig+0x2d4>)
 80058a4:	fba2 2303 	umull	r2, r3, r2, r3
 80058a8:	095b      	lsrs	r3, r3, #5
 80058aa:	f003 0207 	and.w	r2, r3, #7
 80058ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4422      	add	r2, r4
 80058b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80058b8:	e105      	b.n	8005ac6 <UART_SetConfig+0x4d6>
 80058ba:	bf00      	nop
 80058bc:	40011000 	.word	0x40011000
 80058c0:	40011400 	.word	0x40011400
 80058c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80058c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80058cc:	2200      	movs	r2, #0
 80058ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80058d2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80058d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80058da:	4642      	mov	r2, r8
 80058dc:	464b      	mov	r3, r9
 80058de:	1891      	adds	r1, r2, r2
 80058e0:	6239      	str	r1, [r7, #32]
 80058e2:	415b      	adcs	r3, r3
 80058e4:	627b      	str	r3, [r7, #36]	; 0x24
 80058e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80058ea:	4641      	mov	r1, r8
 80058ec:	1854      	adds	r4, r2, r1
 80058ee:	4649      	mov	r1, r9
 80058f0:	eb43 0501 	adc.w	r5, r3, r1
 80058f4:	f04f 0200 	mov.w	r2, #0
 80058f8:	f04f 0300 	mov.w	r3, #0
 80058fc:	00eb      	lsls	r3, r5, #3
 80058fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005902:	00e2      	lsls	r2, r4, #3
 8005904:	4614      	mov	r4, r2
 8005906:	461d      	mov	r5, r3
 8005908:	4643      	mov	r3, r8
 800590a:	18e3      	adds	r3, r4, r3
 800590c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005910:	464b      	mov	r3, r9
 8005912:	eb45 0303 	adc.w	r3, r5, r3
 8005916:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800591a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800591e:	685b      	ldr	r3, [r3, #4]
 8005920:	2200      	movs	r2, #0
 8005922:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005926:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800592a:	f04f 0200 	mov.w	r2, #0
 800592e:	f04f 0300 	mov.w	r3, #0
 8005932:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005936:	4629      	mov	r1, r5
 8005938:	008b      	lsls	r3, r1, #2
 800593a:	4621      	mov	r1, r4
 800593c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005940:	4621      	mov	r1, r4
 8005942:	008a      	lsls	r2, r1, #2
 8005944:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005948:	f7fa fcaa 	bl	80002a0 <__aeabi_uldivmod>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4b60      	ldr	r3, [pc, #384]	; (8005ad4 <UART_SetConfig+0x4e4>)
 8005952:	fba3 2302 	umull	r2, r3, r3, r2
 8005956:	095b      	lsrs	r3, r3, #5
 8005958:	011c      	lsls	r4, r3, #4
 800595a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800595e:	2200      	movs	r2, #0
 8005960:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005964:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005968:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800596c:	4642      	mov	r2, r8
 800596e:	464b      	mov	r3, r9
 8005970:	1891      	adds	r1, r2, r2
 8005972:	61b9      	str	r1, [r7, #24]
 8005974:	415b      	adcs	r3, r3
 8005976:	61fb      	str	r3, [r7, #28]
 8005978:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800597c:	4641      	mov	r1, r8
 800597e:	1851      	adds	r1, r2, r1
 8005980:	6139      	str	r1, [r7, #16]
 8005982:	4649      	mov	r1, r9
 8005984:	414b      	adcs	r3, r1
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	f04f 0300 	mov.w	r3, #0
 8005990:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005994:	4659      	mov	r1, fp
 8005996:	00cb      	lsls	r3, r1, #3
 8005998:	4651      	mov	r1, sl
 800599a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800599e:	4651      	mov	r1, sl
 80059a0:	00ca      	lsls	r2, r1, #3
 80059a2:	4610      	mov	r0, r2
 80059a4:	4619      	mov	r1, r3
 80059a6:	4603      	mov	r3, r0
 80059a8:	4642      	mov	r2, r8
 80059aa:	189b      	adds	r3, r3, r2
 80059ac:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80059b0:	464b      	mov	r3, r9
 80059b2:	460a      	mov	r2, r1
 80059b4:	eb42 0303 	adc.w	r3, r2, r3
 80059b8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80059bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80059c0:	685b      	ldr	r3, [r3, #4]
 80059c2:	2200      	movs	r2, #0
 80059c4:	67bb      	str	r3, [r7, #120]	; 0x78
 80059c6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80059c8:	f04f 0200 	mov.w	r2, #0
 80059cc:	f04f 0300 	mov.w	r3, #0
 80059d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80059d4:	4649      	mov	r1, r9
 80059d6:	008b      	lsls	r3, r1, #2
 80059d8:	4641      	mov	r1, r8
 80059da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80059de:	4641      	mov	r1, r8
 80059e0:	008a      	lsls	r2, r1, #2
 80059e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80059e6:	f7fa fc5b 	bl	80002a0 <__aeabi_uldivmod>
 80059ea:	4602      	mov	r2, r0
 80059ec:	460b      	mov	r3, r1
 80059ee:	4b39      	ldr	r3, [pc, #228]	; (8005ad4 <UART_SetConfig+0x4e4>)
 80059f0:	fba3 1302 	umull	r1, r3, r3, r2
 80059f4:	095b      	lsrs	r3, r3, #5
 80059f6:	2164      	movs	r1, #100	; 0x64
 80059f8:	fb01 f303 	mul.w	r3, r1, r3
 80059fc:	1ad3      	subs	r3, r2, r3
 80059fe:	011b      	lsls	r3, r3, #4
 8005a00:	3332      	adds	r3, #50	; 0x32
 8005a02:	4a34      	ldr	r2, [pc, #208]	; (8005ad4 <UART_SetConfig+0x4e4>)
 8005a04:	fba2 2303 	umull	r2, r3, r2, r3
 8005a08:	095b      	lsrs	r3, r3, #5
 8005a0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a0e:	441c      	add	r4, r3
 8005a10:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005a14:	2200      	movs	r2, #0
 8005a16:	673b      	str	r3, [r7, #112]	; 0x70
 8005a18:	677a      	str	r2, [r7, #116]	; 0x74
 8005a1a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005a1e:	4642      	mov	r2, r8
 8005a20:	464b      	mov	r3, r9
 8005a22:	1891      	adds	r1, r2, r2
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	415b      	adcs	r3, r3
 8005a28:	60fb      	str	r3, [r7, #12]
 8005a2a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a2e:	4641      	mov	r1, r8
 8005a30:	1851      	adds	r1, r2, r1
 8005a32:	6039      	str	r1, [r7, #0]
 8005a34:	4649      	mov	r1, r9
 8005a36:	414b      	adcs	r3, r1
 8005a38:	607b      	str	r3, [r7, #4]
 8005a3a:	f04f 0200 	mov.w	r2, #0
 8005a3e:	f04f 0300 	mov.w	r3, #0
 8005a42:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005a46:	4659      	mov	r1, fp
 8005a48:	00cb      	lsls	r3, r1, #3
 8005a4a:	4651      	mov	r1, sl
 8005a4c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005a50:	4651      	mov	r1, sl
 8005a52:	00ca      	lsls	r2, r1, #3
 8005a54:	4610      	mov	r0, r2
 8005a56:	4619      	mov	r1, r3
 8005a58:	4603      	mov	r3, r0
 8005a5a:	4642      	mov	r2, r8
 8005a5c:	189b      	adds	r3, r3, r2
 8005a5e:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a60:	464b      	mov	r3, r9
 8005a62:	460a      	mov	r2, r1
 8005a64:	eb42 0303 	adc.w	r3, r2, r3
 8005a68:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a6e:	685b      	ldr	r3, [r3, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	663b      	str	r3, [r7, #96]	; 0x60
 8005a74:	667a      	str	r2, [r7, #100]	; 0x64
 8005a76:	f04f 0200 	mov.w	r2, #0
 8005a7a:	f04f 0300 	mov.w	r3, #0
 8005a7e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005a82:	4649      	mov	r1, r9
 8005a84:	008b      	lsls	r3, r1, #2
 8005a86:	4641      	mov	r1, r8
 8005a88:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005a8c:	4641      	mov	r1, r8
 8005a8e:	008a      	lsls	r2, r1, #2
 8005a90:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005a94:	f7fa fc04 	bl	80002a0 <__aeabi_uldivmod>
 8005a98:	4602      	mov	r2, r0
 8005a9a:	460b      	mov	r3, r1
 8005a9c:	4b0d      	ldr	r3, [pc, #52]	; (8005ad4 <UART_SetConfig+0x4e4>)
 8005a9e:	fba3 1302 	umull	r1, r3, r3, r2
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	2164      	movs	r1, #100	; 0x64
 8005aa6:	fb01 f303 	mul.w	r3, r1, r3
 8005aaa:	1ad3      	subs	r3, r2, r3
 8005aac:	011b      	lsls	r3, r3, #4
 8005aae:	3332      	adds	r3, #50	; 0x32
 8005ab0:	4a08      	ldr	r2, [pc, #32]	; (8005ad4 <UART_SetConfig+0x4e4>)
 8005ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8005ab6:	095b      	lsrs	r3, r3, #5
 8005ab8:	f003 020f 	and.w	r2, r3, #15
 8005abc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	4422      	add	r2, r4
 8005ac4:	609a      	str	r2, [r3, #8]
}
 8005ac6:	bf00      	nop
 8005ac8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005acc:	46bd      	mov	sp, r7
 8005ace:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ad2:	bf00      	nop
 8005ad4:	51eb851f 	.word	0x51eb851f

08005ad8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005ad8:	b084      	sub	sp, #16
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
 8005ae2:	f107 001c 	add.w	r0, r7, #28
 8005ae6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d122      	bne.n	8005b36 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005af4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005b04:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005b08:	687a      	ldr	r2, [r7, #4]
 8005b0a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	68db      	ldr	r3, [r3, #12]
 8005b10:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8005b18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d105      	bne.n	8005b2a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	68db      	ldr	r3, [r3, #12]
 8005b22:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f000 faa2 	bl	8006074 <USB_CoreReset>
 8005b30:	4603      	mov	r3, r0
 8005b32:	73fb      	strb	r3, [r7, #15]
 8005b34:	e01a      	b.n	8005b6c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	68db      	ldr	r3, [r3, #12]
 8005b3a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fa96 	bl	8006074 <USB_CoreReset>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005b4c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d106      	bne.n	8005b60 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b56:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	639a      	str	r2, [r3, #56]	; 0x38
 8005b5e:	e005      	b.n	8005b6c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b64:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8005b6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b6e:	2b01      	cmp	r3, #1
 8005b70:	d10b      	bne.n	8005b8a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f043 0206 	orr.w	r2, r3, #6
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	689b      	ldr	r3, [r3, #8]
 8005b82:	f043 0220 	orr.w	r2, r3, #32
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8005b8a:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8c:	4618      	mov	r0, r3
 8005b8e:	3710      	adds	r7, #16
 8005b90:	46bd      	mov	sp, r7
 8005b92:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005b96:	b004      	add	sp, #16
 8005b98:	4770      	bx	lr

08005b9a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b9a:	b480      	push	{r7}
 8005b9c:	b083      	sub	sp, #12
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	689b      	ldr	r3, [r3, #8]
 8005ba6:	f023 0201 	bic.w	r2, r3, #1
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8005bae:	2300      	movs	r3, #0
}
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8005bbc:	b580      	push	{r7, lr}
 8005bbe:	b084      	sub	sp, #16
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	6078      	str	r0, [r7, #4]
 8005bc4:	460b      	mov	r3, r1
 8005bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8005bc8:	2300      	movs	r3, #0
 8005bca:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	68db      	ldr	r3, [r3, #12]
 8005bd0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8005bd8:	78fb      	ldrb	r3, [r7, #3]
 8005bda:	2b01      	cmp	r3, #1
 8005bdc:	d115      	bne.n	8005c0a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005bea:	2001      	movs	r0, #1
 8005bec:	f7fc fefa 	bl	80029e4 <HAL_Delay>
      ms++;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	3301      	adds	r3, #1
 8005bf4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8005bf6:	6878      	ldr	r0, [r7, #4]
 8005bf8:	f000 fa2e 	bl	8006058 <USB_GetMode>
 8005bfc:	4603      	mov	r3, r0
 8005bfe:	2b01      	cmp	r3, #1
 8005c00:	d01e      	beq.n	8005c40 <USB_SetCurrentMode+0x84>
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2b31      	cmp	r3, #49	; 0x31
 8005c06:	d9f0      	bls.n	8005bea <USB_SetCurrentMode+0x2e>
 8005c08:	e01a      	b.n	8005c40 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8005c0a:	78fb      	ldrb	r3, [r7, #3]
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d115      	bne.n	8005c3c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	68db      	ldr	r3, [r3, #12]
 8005c14:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8005c1c:	2001      	movs	r0, #1
 8005c1e:	f7fc fee1 	bl	80029e4 <HAL_Delay>
      ms++;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	3301      	adds	r3, #1
 8005c26:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 fa15 	bl	8006058 <USB_GetMode>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d005      	beq.n	8005c40 <USB_SetCurrentMode+0x84>
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	2b31      	cmp	r3, #49	; 0x31
 8005c38:	d9f0      	bls.n	8005c1c <USB_SetCurrentMode+0x60>
 8005c3a:	e001      	b.n	8005c40 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8005c3c:	2301      	movs	r3, #1
 8005c3e:	e005      	b.n	8005c4c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	2b32      	cmp	r3, #50	; 0x32
 8005c44:	d101      	bne.n	8005c4a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8005c46:	2301      	movs	r3, #1
 8005c48:	e000      	b.n	8005c4c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
}
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	3710      	adds	r7, #16
 8005c50:	46bd      	mov	sp, r7
 8005c52:	bd80      	pop	{r7, pc}

08005c54 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005c54:	b084      	sub	sp, #16
 8005c56:	b580      	push	{r7, lr}
 8005c58:	b086      	sub	sp, #24
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
 8005c5e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005c62:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8005c66:	2300      	movs	r3, #0
 8005c68:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005c6e:	2300      	movs	r3, #0
 8005c70:	613b      	str	r3, [r7, #16]
 8005c72:	e009      	b.n	8005c88 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005c74:	687a      	ldr	r2, [r7, #4]
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	3340      	adds	r3, #64	; 0x40
 8005c7a:	009b      	lsls	r3, r3, #2
 8005c7c:	4413      	add	r3, r2
 8005c7e:	2200      	movs	r2, #0
 8005c80:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005c82:	693b      	ldr	r3, [r7, #16]
 8005c84:	3301      	adds	r3, #1
 8005c86:	613b      	str	r3, [r7, #16]
 8005c88:	693b      	ldr	r3, [r7, #16]
 8005c8a:	2b0e      	cmp	r3, #14
 8005c8c:	d9f2      	bls.n	8005c74 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005c8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d11c      	bne.n	8005cce <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c9a:	685b      	ldr	r3, [r3, #4]
 8005c9c:	68fa      	ldr	r2, [r7, #12]
 8005c9e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ca2:	f043 0302 	orr.w	r3, r3, #2
 8005ca6:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cb8:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cc4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	639a      	str	r2, [r3, #56]	; 0x38
 8005ccc:	e00b      	b.n	8005ce6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cd2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cde:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005cec:	461a      	mov	r2, r3
 8005cee:	2300      	movs	r3, #0
 8005cf0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d00:	461a      	mov	r2, r3
 8005d02:	680b      	ldr	r3, [r1, #0]
 8005d04:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8005d06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d08:	2b01      	cmp	r3, #1
 8005d0a:	d10c      	bne.n	8005d26 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8005d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d104      	bne.n	8005d1c <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8005d12:	2100      	movs	r1, #0
 8005d14:	6878      	ldr	r0, [r7, #4]
 8005d16:	f000 f965 	bl	8005fe4 <USB_SetDevSpeed>
 8005d1a:	e008      	b.n	8005d2e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8005d1c:	2101      	movs	r1, #1
 8005d1e:	6878      	ldr	r0, [r7, #4]
 8005d20:	f000 f960 	bl	8005fe4 <USB_SetDevSpeed>
 8005d24:	e003      	b.n	8005d2e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8005d26:	2103      	movs	r1, #3
 8005d28:	6878      	ldr	r0, [r7, #4]
 8005d2a:	f000 f95b 	bl	8005fe4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8005d2e:	2110      	movs	r1, #16
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 f8f3 	bl	8005f1c <USB_FlushTxFifo>
 8005d36:	4603      	mov	r3, r0
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d001      	beq.n	8005d40 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8005d3c:	2301      	movs	r3, #1
 8005d3e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 f91f 	bl	8005f84 <USB_FlushRxFifo>
 8005d46:	4603      	mov	r3, r0
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d001      	beq.n	8005d50 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8005d4c:	2301      	movs	r3, #1
 8005d4e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d56:	461a      	mov	r2, r3
 8005d58:	2300      	movs	r3, #0
 8005d5a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005d5c:	68fb      	ldr	r3, [r7, #12]
 8005d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d62:	461a      	mov	r2, r3
 8005d64:	2300      	movs	r3, #0
 8005d66:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d6e:	461a      	mov	r2, r3
 8005d70:	2300      	movs	r3, #0
 8005d72:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005d74:	2300      	movs	r3, #0
 8005d76:	613b      	str	r3, [r7, #16]
 8005d78:	e043      	b.n	8005e02 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005d7a:	693b      	ldr	r3, [r7, #16]
 8005d7c:	015a      	lsls	r2, r3, #5
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	4413      	add	r3, r2
 8005d82:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d8c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d90:	d118      	bne.n	8005dc4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8005d92:	693b      	ldr	r3, [r7, #16]
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d10a      	bne.n	8005dae <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	015a      	lsls	r2, r3, #5
 8005d9c:	68fb      	ldr	r3, [r7, #12]
 8005d9e:	4413      	add	r3, r2
 8005da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005da4:	461a      	mov	r2, r3
 8005da6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005daa:	6013      	str	r3, [r2, #0]
 8005dac:	e013      	b.n	8005dd6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005dae:	693b      	ldr	r3, [r7, #16]
 8005db0:	015a      	lsls	r2, r3, #5
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	4413      	add	r3, r2
 8005db6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dba:	461a      	mov	r2, r3
 8005dbc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005dc0:	6013      	str	r3, [r2, #0]
 8005dc2:	e008      	b.n	8005dd6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8005dc4:	693b      	ldr	r3, [r7, #16]
 8005dc6:	015a      	lsls	r2, r3, #5
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	4413      	add	r3, r2
 8005dcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005dd0:	461a      	mov	r2, r3
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8005dd6:	693b      	ldr	r3, [r7, #16]
 8005dd8:	015a      	lsls	r2, r3, #5
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	4413      	add	r3, r2
 8005dde:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005de2:	461a      	mov	r2, r3
 8005de4:	2300      	movs	r3, #0
 8005de6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005de8:	693b      	ldr	r3, [r7, #16]
 8005dea:	015a      	lsls	r2, r3, #5
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4413      	add	r3, r2
 8005df0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005df4:	461a      	mov	r2, r3
 8005df6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005dfa:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005dfc:	693b      	ldr	r3, [r7, #16]
 8005dfe:	3301      	adds	r3, #1
 8005e00:	613b      	str	r3, [r7, #16]
 8005e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e04:	693a      	ldr	r2, [r7, #16]
 8005e06:	429a      	cmp	r2, r3
 8005e08:	d3b7      	bcc.n	8005d7a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	613b      	str	r3, [r7, #16]
 8005e0e:	e043      	b.n	8005e98 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	015a      	lsls	r2, r3, #5
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	4413      	add	r3, r2
 8005e18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005e22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005e26:	d118      	bne.n	8005e5a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8005e28:	693b      	ldr	r3, [r7, #16]
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d10a      	bne.n	8005e44 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	015a      	lsls	r2, r3, #5
 8005e32:	68fb      	ldr	r3, [r7, #12]
 8005e34:	4413      	add	r3, r2
 8005e36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005e40:	6013      	str	r3, [r2, #0]
 8005e42:	e013      	b.n	8005e6c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8005e44:	693b      	ldr	r3, [r7, #16]
 8005e46:	015a      	lsls	r2, r3, #5
 8005e48:	68fb      	ldr	r3, [r7, #12]
 8005e4a:	4413      	add	r3, r2
 8005e4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e50:	461a      	mov	r2, r3
 8005e52:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005e56:	6013      	str	r3, [r2, #0]
 8005e58:	e008      	b.n	8005e6c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	015a      	lsls	r2, r3, #5
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	4413      	add	r3, r2
 8005e62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e66:	461a      	mov	r2, r3
 8005e68:	2300      	movs	r3, #0
 8005e6a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005e6c:	693b      	ldr	r3, [r7, #16]
 8005e6e:	015a      	lsls	r2, r3, #5
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	4413      	add	r3, r2
 8005e74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e78:	461a      	mov	r2, r3
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005e7e:	693b      	ldr	r3, [r7, #16]
 8005e80:	015a      	lsls	r2, r3, #5
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	4413      	add	r3, r2
 8005e86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005e8a:	461a      	mov	r2, r3
 8005e8c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005e90:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005e92:	693b      	ldr	r3, [r7, #16]
 8005e94:	3301      	adds	r3, #1
 8005e96:	613b      	str	r3, [r7, #16]
 8005e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9a:	693a      	ldr	r2, [r7, #16]
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d3b7      	bcc.n	8005e10 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ea6:	691b      	ldr	r3, [r3, #16]
 8005ea8:	68fa      	ldr	r2, [r7, #12]
 8005eaa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005eae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005eb2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005ec0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005ec2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d105      	bne.n	8005ed4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	f043 0210 	orr.w	r2, r3, #16
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	699a      	ldr	r2, [r3, #24]
 8005ed8:	4b0f      	ldr	r3, [pc, #60]	; (8005f18 <USB_DevInit+0x2c4>)
 8005eda:	4313      	orrs	r3, r2
 8005edc:	687a      	ldr	r2, [r7, #4]
 8005ede:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005ee0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d005      	beq.n	8005ef2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	699b      	ldr	r3, [r3, #24]
 8005eea:	f043 0208 	orr.w	r2, r3, #8
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005ef2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005ef4:	2b01      	cmp	r3, #1
 8005ef6:	d107      	bne.n	8005f08 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005f00:	f043 0304 	orr.w	r3, r3, #4
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005f08:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f0a:	4618      	mov	r0, r3
 8005f0c:	3718      	adds	r7, #24
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005f14:	b004      	add	sp, #16
 8005f16:	4770      	bx	lr
 8005f18:	803c3800 	.word	0x803c3800

08005f1c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005f1c:	b480      	push	{r7}
 8005f1e:	b085      	sub	sp, #20
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005f26:	2300      	movs	r3, #0
 8005f28:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	3301      	adds	r3, #1
 8005f2e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	4a13      	ldr	r2, [pc, #76]	; (8005f80 <USB_FlushTxFifo+0x64>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d901      	bls.n	8005f3c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e01b      	b.n	8005f74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	691b      	ldr	r3, [r3, #16]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	daf2      	bge.n	8005f2a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8005f44:	2300      	movs	r3, #0
 8005f46:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	019b      	lsls	r3, r3, #6
 8005f4c:	f043 0220 	orr.w	r2, r3, #32
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	3301      	adds	r3, #1
 8005f58:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	4a08      	ldr	r2, [pc, #32]	; (8005f80 <USB_FlushTxFifo+0x64>)
 8005f5e:	4293      	cmp	r3, r2
 8005f60:	d901      	bls.n	8005f66 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8005f62:	2303      	movs	r3, #3
 8005f64:	e006      	b.n	8005f74 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	f003 0320 	and.w	r3, r3, #32
 8005f6e:	2b20      	cmp	r3, #32
 8005f70:	d0f0      	beq.n	8005f54 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8005f72:	2300      	movs	r3, #0
}
 8005f74:	4618      	mov	r0, r3
 8005f76:	3714      	adds	r7, #20
 8005f78:	46bd      	mov	sp, r7
 8005f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7e:	4770      	bx	lr
 8005f80:	00030d40 	.word	0x00030d40

08005f84 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005f84:	b480      	push	{r7}
 8005f86:	b085      	sub	sp, #20
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005f8c:	2300      	movs	r3, #0
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	3301      	adds	r3, #1
 8005f94:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	4a11      	ldr	r2, [pc, #68]	; (8005fe0 <USB_FlushRxFifo+0x5c>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d901      	bls.n	8005fa2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8005f9e:	2303      	movs	r3, #3
 8005fa0:	e018      	b.n	8005fd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	daf2      	bge.n	8005f90 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8005faa:	2300      	movs	r3, #0
 8005fac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2210      	movs	r2, #16
 8005fb2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	3301      	adds	r3, #1
 8005fb8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	4a08      	ldr	r2, [pc, #32]	; (8005fe0 <USB_FlushRxFifo+0x5c>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d901      	bls.n	8005fc6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8005fc2:	2303      	movs	r3, #3
 8005fc4:	e006      	b.n	8005fd4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	691b      	ldr	r3, [r3, #16]
 8005fca:	f003 0310 	and.w	r3, r3, #16
 8005fce:	2b10      	cmp	r3, #16
 8005fd0:	d0f0      	beq.n	8005fb4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8005fd2:	2300      	movs	r3, #0
}
 8005fd4:	4618      	mov	r0, r3
 8005fd6:	3714      	adds	r7, #20
 8005fd8:	46bd      	mov	sp, r7
 8005fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fde:	4770      	bx	lr
 8005fe0:	00030d40 	.word	0x00030d40

08005fe4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005fe4:	b480      	push	{r7}
 8005fe6:	b085      	sub	sp, #20
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	460b      	mov	r3, r1
 8005fee:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ffa:	681a      	ldr	r2, [r3, #0]
 8005ffc:	78fb      	ldrb	r3, [r7, #3]
 8005ffe:	68f9      	ldr	r1, [r7, #12]
 8006000:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8006004:	4313      	orrs	r3, r2
 8006006:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8006008:	2300      	movs	r3, #0
}
 800600a:	4618      	mov	r0, r3
 800600c:	3714      	adds	r7, #20
 800600e:	46bd      	mov	sp, r7
 8006010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006014:	4770      	bx	lr

08006016 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8006016:	b480      	push	{r7}
 8006018:	b085      	sub	sp, #20
 800601a:	af00      	add	r7, sp, #0
 800601c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68fa      	ldr	r2, [r7, #12]
 800602c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006030:	f023 0303 	bic.w	r3, r3, #3
 8006034:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	68fa      	ldr	r2, [r7, #12]
 8006040:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8006044:	f043 0302 	orr.w	r3, r3, #2
 8006048:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800604a:	2300      	movs	r3, #0
}
 800604c:	4618      	mov	r0, r3
 800604e:	3714      	adds	r7, #20
 8006050:	46bd      	mov	sp, r7
 8006052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006056:	4770      	bx	lr

08006058 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006058:	b480      	push	{r7}
 800605a:	b083      	sub	sp, #12
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	695b      	ldr	r3, [r3, #20]
 8006064:	f003 0301 	and.w	r3, r3, #1
}
 8006068:	4618      	mov	r0, r3
 800606a:	370c      	adds	r7, #12
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006074:	b480      	push	{r7}
 8006076:	b085      	sub	sp, #20
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800607c:	2300      	movs	r3, #0
 800607e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	3301      	adds	r3, #1
 8006084:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4a13      	ldr	r2, [pc, #76]	; (80060d8 <USB_CoreReset+0x64>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d901      	bls.n	8006092 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800608e:	2303      	movs	r3, #3
 8006090:	e01b      	b.n	80060ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	691b      	ldr	r3, [r3, #16]
 8006096:	2b00      	cmp	r3, #0
 8006098:	daf2      	bge.n	8006080 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800609a:	2300      	movs	r3, #0
 800609c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	f043 0201 	orr.w	r2, r3, #1
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	3301      	adds	r3, #1
 80060ae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060b0:	68fb      	ldr	r3, [r7, #12]
 80060b2:	4a09      	ldr	r2, [pc, #36]	; (80060d8 <USB_CoreReset+0x64>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d901      	bls.n	80060bc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060b8:	2303      	movs	r3, #3
 80060ba:	e006      	b.n	80060ca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	691b      	ldr	r3, [r3, #16]
 80060c0:	f003 0301 	and.w	r3, r3, #1
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d0f0      	beq.n	80060aa <USB_CoreReset+0x36>

  return HAL_OK;
 80060c8:	2300      	movs	r3, #0
}
 80060ca:	4618      	mov	r0, r3
 80060cc:	3714      	adds	r7, #20
 80060ce:	46bd      	mov	sp, r7
 80060d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d4:	4770      	bx	lr
 80060d6:	bf00      	nop
 80060d8:	00030d40 	.word	0x00030d40

080060dc <atoi>:
 80060dc:	220a      	movs	r2, #10
 80060de:	2100      	movs	r1, #0
 80060e0:	f000 baee 	b.w	80066c0 <strtol>

080060e4 <__errno>:
 80060e4:	4b01      	ldr	r3, [pc, #4]	; (80060ec <__errno+0x8>)
 80060e6:	6818      	ldr	r0, [r3, #0]
 80060e8:	4770      	bx	lr
 80060ea:	bf00      	nop
 80060ec:	200009d4 	.word	0x200009d4

080060f0 <__libc_init_array>:
 80060f0:	b570      	push	{r4, r5, r6, lr}
 80060f2:	4d0d      	ldr	r5, [pc, #52]	; (8006128 <__libc_init_array+0x38>)
 80060f4:	4c0d      	ldr	r4, [pc, #52]	; (800612c <__libc_init_array+0x3c>)
 80060f6:	1b64      	subs	r4, r4, r5
 80060f8:	10a4      	asrs	r4, r4, #2
 80060fa:	2600      	movs	r6, #0
 80060fc:	42a6      	cmp	r6, r4
 80060fe:	d109      	bne.n	8006114 <__libc_init_array+0x24>
 8006100:	4d0b      	ldr	r5, [pc, #44]	; (8006130 <__libc_init_array+0x40>)
 8006102:	4c0c      	ldr	r4, [pc, #48]	; (8006134 <__libc_init_array+0x44>)
 8006104:	f001 fbde 	bl	80078c4 <_init>
 8006108:	1b64      	subs	r4, r4, r5
 800610a:	10a4      	asrs	r4, r4, #2
 800610c:	2600      	movs	r6, #0
 800610e:	42a6      	cmp	r6, r4
 8006110:	d105      	bne.n	800611e <__libc_init_array+0x2e>
 8006112:	bd70      	pop	{r4, r5, r6, pc}
 8006114:	f855 3b04 	ldr.w	r3, [r5], #4
 8006118:	4798      	blx	r3
 800611a:	3601      	adds	r6, #1
 800611c:	e7ee      	b.n	80060fc <__libc_init_array+0xc>
 800611e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006122:	4798      	blx	r3
 8006124:	3601      	adds	r6, #1
 8006126:	e7f2      	b.n	800610e <__libc_init_array+0x1e>
 8006128:	0800826c 	.word	0x0800826c
 800612c:	0800826c 	.word	0x0800826c
 8006130:	0800826c 	.word	0x0800826c
 8006134:	08008270 	.word	0x08008270

08006138 <malloc>:
 8006138:	4b02      	ldr	r3, [pc, #8]	; (8006144 <malloc+0xc>)
 800613a:	4601      	mov	r1, r0
 800613c:	6818      	ldr	r0, [r3, #0]
 800613e:	f000 b88d 	b.w	800625c <_malloc_r>
 8006142:	bf00      	nop
 8006144:	200009d4 	.word	0x200009d4

08006148 <free>:
 8006148:	4b02      	ldr	r3, [pc, #8]	; (8006154 <free+0xc>)
 800614a:	4601      	mov	r1, r0
 800614c:	6818      	ldr	r0, [r3, #0]
 800614e:	f000 b819 	b.w	8006184 <_free_r>
 8006152:	bf00      	nop
 8006154:	200009d4 	.word	0x200009d4

08006158 <memcpy>:
 8006158:	440a      	add	r2, r1
 800615a:	4291      	cmp	r1, r2
 800615c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006160:	d100      	bne.n	8006164 <memcpy+0xc>
 8006162:	4770      	bx	lr
 8006164:	b510      	push	{r4, lr}
 8006166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800616a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800616e:	4291      	cmp	r1, r2
 8006170:	d1f9      	bne.n	8006166 <memcpy+0xe>
 8006172:	bd10      	pop	{r4, pc}

08006174 <memset>:
 8006174:	4402      	add	r2, r0
 8006176:	4603      	mov	r3, r0
 8006178:	4293      	cmp	r3, r2
 800617a:	d100      	bne.n	800617e <memset+0xa>
 800617c:	4770      	bx	lr
 800617e:	f803 1b01 	strb.w	r1, [r3], #1
 8006182:	e7f9      	b.n	8006178 <memset+0x4>

08006184 <_free_r>:
 8006184:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006186:	2900      	cmp	r1, #0
 8006188:	d044      	beq.n	8006214 <_free_r+0x90>
 800618a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800618e:	9001      	str	r0, [sp, #4]
 8006190:	2b00      	cmp	r3, #0
 8006192:	f1a1 0404 	sub.w	r4, r1, #4
 8006196:	bfb8      	it	lt
 8006198:	18e4      	addlt	r4, r4, r3
 800619a:	f000 fdf7 	bl	8006d8c <__malloc_lock>
 800619e:	4a1e      	ldr	r2, [pc, #120]	; (8006218 <_free_r+0x94>)
 80061a0:	9801      	ldr	r0, [sp, #4]
 80061a2:	6813      	ldr	r3, [r2, #0]
 80061a4:	b933      	cbnz	r3, 80061b4 <_free_r+0x30>
 80061a6:	6063      	str	r3, [r4, #4]
 80061a8:	6014      	str	r4, [r2, #0]
 80061aa:	b003      	add	sp, #12
 80061ac:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80061b0:	f000 bdf2 	b.w	8006d98 <__malloc_unlock>
 80061b4:	42a3      	cmp	r3, r4
 80061b6:	d908      	bls.n	80061ca <_free_r+0x46>
 80061b8:	6825      	ldr	r5, [r4, #0]
 80061ba:	1961      	adds	r1, r4, r5
 80061bc:	428b      	cmp	r3, r1
 80061be:	bf01      	itttt	eq
 80061c0:	6819      	ldreq	r1, [r3, #0]
 80061c2:	685b      	ldreq	r3, [r3, #4]
 80061c4:	1949      	addeq	r1, r1, r5
 80061c6:	6021      	streq	r1, [r4, #0]
 80061c8:	e7ed      	b.n	80061a6 <_free_r+0x22>
 80061ca:	461a      	mov	r2, r3
 80061cc:	685b      	ldr	r3, [r3, #4]
 80061ce:	b10b      	cbz	r3, 80061d4 <_free_r+0x50>
 80061d0:	42a3      	cmp	r3, r4
 80061d2:	d9fa      	bls.n	80061ca <_free_r+0x46>
 80061d4:	6811      	ldr	r1, [r2, #0]
 80061d6:	1855      	adds	r5, r2, r1
 80061d8:	42a5      	cmp	r5, r4
 80061da:	d10b      	bne.n	80061f4 <_free_r+0x70>
 80061dc:	6824      	ldr	r4, [r4, #0]
 80061de:	4421      	add	r1, r4
 80061e0:	1854      	adds	r4, r2, r1
 80061e2:	42a3      	cmp	r3, r4
 80061e4:	6011      	str	r1, [r2, #0]
 80061e6:	d1e0      	bne.n	80061aa <_free_r+0x26>
 80061e8:	681c      	ldr	r4, [r3, #0]
 80061ea:	685b      	ldr	r3, [r3, #4]
 80061ec:	6053      	str	r3, [r2, #4]
 80061ee:	4421      	add	r1, r4
 80061f0:	6011      	str	r1, [r2, #0]
 80061f2:	e7da      	b.n	80061aa <_free_r+0x26>
 80061f4:	d902      	bls.n	80061fc <_free_r+0x78>
 80061f6:	230c      	movs	r3, #12
 80061f8:	6003      	str	r3, [r0, #0]
 80061fa:	e7d6      	b.n	80061aa <_free_r+0x26>
 80061fc:	6825      	ldr	r5, [r4, #0]
 80061fe:	1961      	adds	r1, r4, r5
 8006200:	428b      	cmp	r3, r1
 8006202:	bf04      	itt	eq
 8006204:	6819      	ldreq	r1, [r3, #0]
 8006206:	685b      	ldreq	r3, [r3, #4]
 8006208:	6063      	str	r3, [r4, #4]
 800620a:	bf04      	itt	eq
 800620c:	1949      	addeq	r1, r1, r5
 800620e:	6021      	streq	r1, [r4, #0]
 8006210:	6054      	str	r4, [r2, #4]
 8006212:	e7ca      	b.n	80061aa <_free_r+0x26>
 8006214:	b003      	add	sp, #12
 8006216:	bd30      	pop	{r4, r5, pc}
 8006218:	200023ec 	.word	0x200023ec

0800621c <sbrk_aligned>:
 800621c:	b570      	push	{r4, r5, r6, lr}
 800621e:	4e0e      	ldr	r6, [pc, #56]	; (8006258 <sbrk_aligned+0x3c>)
 8006220:	460c      	mov	r4, r1
 8006222:	6831      	ldr	r1, [r6, #0]
 8006224:	4605      	mov	r5, r0
 8006226:	b911      	cbnz	r1, 800622e <sbrk_aligned+0x12>
 8006228:	f000 f930 	bl	800648c <_sbrk_r>
 800622c:	6030      	str	r0, [r6, #0]
 800622e:	4621      	mov	r1, r4
 8006230:	4628      	mov	r0, r5
 8006232:	f000 f92b 	bl	800648c <_sbrk_r>
 8006236:	1c43      	adds	r3, r0, #1
 8006238:	d00a      	beq.n	8006250 <sbrk_aligned+0x34>
 800623a:	1cc4      	adds	r4, r0, #3
 800623c:	f024 0403 	bic.w	r4, r4, #3
 8006240:	42a0      	cmp	r0, r4
 8006242:	d007      	beq.n	8006254 <sbrk_aligned+0x38>
 8006244:	1a21      	subs	r1, r4, r0
 8006246:	4628      	mov	r0, r5
 8006248:	f000 f920 	bl	800648c <_sbrk_r>
 800624c:	3001      	adds	r0, #1
 800624e:	d101      	bne.n	8006254 <sbrk_aligned+0x38>
 8006250:	f04f 34ff 	mov.w	r4, #4294967295
 8006254:	4620      	mov	r0, r4
 8006256:	bd70      	pop	{r4, r5, r6, pc}
 8006258:	200023f0 	.word	0x200023f0

0800625c <_malloc_r>:
 800625c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006260:	1ccd      	adds	r5, r1, #3
 8006262:	f025 0503 	bic.w	r5, r5, #3
 8006266:	3508      	adds	r5, #8
 8006268:	2d0c      	cmp	r5, #12
 800626a:	bf38      	it	cc
 800626c:	250c      	movcc	r5, #12
 800626e:	2d00      	cmp	r5, #0
 8006270:	4607      	mov	r7, r0
 8006272:	db01      	blt.n	8006278 <_malloc_r+0x1c>
 8006274:	42a9      	cmp	r1, r5
 8006276:	d905      	bls.n	8006284 <_malloc_r+0x28>
 8006278:	230c      	movs	r3, #12
 800627a:	603b      	str	r3, [r7, #0]
 800627c:	2600      	movs	r6, #0
 800627e:	4630      	mov	r0, r6
 8006280:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006284:	4e2e      	ldr	r6, [pc, #184]	; (8006340 <_malloc_r+0xe4>)
 8006286:	f000 fd81 	bl	8006d8c <__malloc_lock>
 800628a:	6833      	ldr	r3, [r6, #0]
 800628c:	461c      	mov	r4, r3
 800628e:	bb34      	cbnz	r4, 80062de <_malloc_r+0x82>
 8006290:	4629      	mov	r1, r5
 8006292:	4638      	mov	r0, r7
 8006294:	f7ff ffc2 	bl	800621c <sbrk_aligned>
 8006298:	1c43      	adds	r3, r0, #1
 800629a:	4604      	mov	r4, r0
 800629c:	d14d      	bne.n	800633a <_malloc_r+0xde>
 800629e:	6834      	ldr	r4, [r6, #0]
 80062a0:	4626      	mov	r6, r4
 80062a2:	2e00      	cmp	r6, #0
 80062a4:	d140      	bne.n	8006328 <_malloc_r+0xcc>
 80062a6:	6823      	ldr	r3, [r4, #0]
 80062a8:	4631      	mov	r1, r6
 80062aa:	4638      	mov	r0, r7
 80062ac:	eb04 0803 	add.w	r8, r4, r3
 80062b0:	f000 f8ec 	bl	800648c <_sbrk_r>
 80062b4:	4580      	cmp	r8, r0
 80062b6:	d13a      	bne.n	800632e <_malloc_r+0xd2>
 80062b8:	6821      	ldr	r1, [r4, #0]
 80062ba:	3503      	adds	r5, #3
 80062bc:	1a6d      	subs	r5, r5, r1
 80062be:	f025 0503 	bic.w	r5, r5, #3
 80062c2:	3508      	adds	r5, #8
 80062c4:	2d0c      	cmp	r5, #12
 80062c6:	bf38      	it	cc
 80062c8:	250c      	movcc	r5, #12
 80062ca:	4629      	mov	r1, r5
 80062cc:	4638      	mov	r0, r7
 80062ce:	f7ff ffa5 	bl	800621c <sbrk_aligned>
 80062d2:	3001      	adds	r0, #1
 80062d4:	d02b      	beq.n	800632e <_malloc_r+0xd2>
 80062d6:	6823      	ldr	r3, [r4, #0]
 80062d8:	442b      	add	r3, r5
 80062da:	6023      	str	r3, [r4, #0]
 80062dc:	e00e      	b.n	80062fc <_malloc_r+0xa0>
 80062de:	6822      	ldr	r2, [r4, #0]
 80062e0:	1b52      	subs	r2, r2, r5
 80062e2:	d41e      	bmi.n	8006322 <_malloc_r+0xc6>
 80062e4:	2a0b      	cmp	r2, #11
 80062e6:	d916      	bls.n	8006316 <_malloc_r+0xba>
 80062e8:	1961      	adds	r1, r4, r5
 80062ea:	42a3      	cmp	r3, r4
 80062ec:	6025      	str	r5, [r4, #0]
 80062ee:	bf18      	it	ne
 80062f0:	6059      	strne	r1, [r3, #4]
 80062f2:	6863      	ldr	r3, [r4, #4]
 80062f4:	bf08      	it	eq
 80062f6:	6031      	streq	r1, [r6, #0]
 80062f8:	5162      	str	r2, [r4, r5]
 80062fa:	604b      	str	r3, [r1, #4]
 80062fc:	4638      	mov	r0, r7
 80062fe:	f104 060b 	add.w	r6, r4, #11
 8006302:	f000 fd49 	bl	8006d98 <__malloc_unlock>
 8006306:	f026 0607 	bic.w	r6, r6, #7
 800630a:	1d23      	adds	r3, r4, #4
 800630c:	1af2      	subs	r2, r6, r3
 800630e:	d0b6      	beq.n	800627e <_malloc_r+0x22>
 8006310:	1b9b      	subs	r3, r3, r6
 8006312:	50a3      	str	r3, [r4, r2]
 8006314:	e7b3      	b.n	800627e <_malloc_r+0x22>
 8006316:	6862      	ldr	r2, [r4, #4]
 8006318:	42a3      	cmp	r3, r4
 800631a:	bf0c      	ite	eq
 800631c:	6032      	streq	r2, [r6, #0]
 800631e:	605a      	strne	r2, [r3, #4]
 8006320:	e7ec      	b.n	80062fc <_malloc_r+0xa0>
 8006322:	4623      	mov	r3, r4
 8006324:	6864      	ldr	r4, [r4, #4]
 8006326:	e7b2      	b.n	800628e <_malloc_r+0x32>
 8006328:	4634      	mov	r4, r6
 800632a:	6876      	ldr	r6, [r6, #4]
 800632c:	e7b9      	b.n	80062a2 <_malloc_r+0x46>
 800632e:	230c      	movs	r3, #12
 8006330:	603b      	str	r3, [r7, #0]
 8006332:	4638      	mov	r0, r7
 8006334:	f000 fd30 	bl	8006d98 <__malloc_unlock>
 8006338:	e7a1      	b.n	800627e <_malloc_r+0x22>
 800633a:	6025      	str	r5, [r4, #0]
 800633c:	e7de      	b.n	80062fc <_malloc_r+0xa0>
 800633e:	bf00      	nop
 8006340:	200023ec 	.word	0x200023ec

08006344 <iprintf>:
 8006344:	b40f      	push	{r0, r1, r2, r3}
 8006346:	4b0a      	ldr	r3, [pc, #40]	; (8006370 <iprintf+0x2c>)
 8006348:	b513      	push	{r0, r1, r4, lr}
 800634a:	681c      	ldr	r4, [r3, #0]
 800634c:	b124      	cbz	r4, 8006358 <iprintf+0x14>
 800634e:	69a3      	ldr	r3, [r4, #24]
 8006350:	b913      	cbnz	r3, 8006358 <iprintf+0x14>
 8006352:	4620      	mov	r0, r4
 8006354:	f000 fc14 	bl	8006b80 <__sinit>
 8006358:	ab05      	add	r3, sp, #20
 800635a:	9a04      	ldr	r2, [sp, #16]
 800635c:	68a1      	ldr	r1, [r4, #8]
 800635e:	9301      	str	r3, [sp, #4]
 8006360:	4620      	mov	r0, r4
 8006362:	f000 fea5 	bl	80070b0 <_vfiprintf_r>
 8006366:	b002      	add	sp, #8
 8006368:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800636c:	b004      	add	sp, #16
 800636e:	4770      	bx	lr
 8006370:	200009d4 	.word	0x200009d4

08006374 <putchar>:
 8006374:	4b09      	ldr	r3, [pc, #36]	; (800639c <putchar+0x28>)
 8006376:	b513      	push	{r0, r1, r4, lr}
 8006378:	681c      	ldr	r4, [r3, #0]
 800637a:	4601      	mov	r1, r0
 800637c:	b134      	cbz	r4, 800638c <putchar+0x18>
 800637e:	69a3      	ldr	r3, [r4, #24]
 8006380:	b923      	cbnz	r3, 800638c <putchar+0x18>
 8006382:	9001      	str	r0, [sp, #4]
 8006384:	4620      	mov	r0, r4
 8006386:	f000 fbfb 	bl	8006b80 <__sinit>
 800638a:	9901      	ldr	r1, [sp, #4]
 800638c:	68a2      	ldr	r2, [r4, #8]
 800638e:	4620      	mov	r0, r4
 8006390:	b002      	add	sp, #8
 8006392:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006396:	f001 b94f 	b.w	8007638 <_putc_r>
 800639a:	bf00      	nop
 800639c:	200009d4 	.word	0x200009d4

080063a0 <_puts_r>:
 80063a0:	b570      	push	{r4, r5, r6, lr}
 80063a2:	460e      	mov	r6, r1
 80063a4:	4605      	mov	r5, r0
 80063a6:	b118      	cbz	r0, 80063b0 <_puts_r+0x10>
 80063a8:	6983      	ldr	r3, [r0, #24]
 80063aa:	b90b      	cbnz	r3, 80063b0 <_puts_r+0x10>
 80063ac:	f000 fbe8 	bl	8006b80 <__sinit>
 80063b0:	69ab      	ldr	r3, [r5, #24]
 80063b2:	68ac      	ldr	r4, [r5, #8]
 80063b4:	b913      	cbnz	r3, 80063bc <_puts_r+0x1c>
 80063b6:	4628      	mov	r0, r5
 80063b8:	f000 fbe2 	bl	8006b80 <__sinit>
 80063bc:	4b2c      	ldr	r3, [pc, #176]	; (8006470 <_puts_r+0xd0>)
 80063be:	429c      	cmp	r4, r3
 80063c0:	d120      	bne.n	8006404 <_puts_r+0x64>
 80063c2:	686c      	ldr	r4, [r5, #4]
 80063c4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80063c6:	07db      	lsls	r3, r3, #31
 80063c8:	d405      	bmi.n	80063d6 <_puts_r+0x36>
 80063ca:	89a3      	ldrh	r3, [r4, #12]
 80063cc:	0598      	lsls	r0, r3, #22
 80063ce:	d402      	bmi.n	80063d6 <_puts_r+0x36>
 80063d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80063d2:	f000 fc73 	bl	8006cbc <__retarget_lock_acquire_recursive>
 80063d6:	89a3      	ldrh	r3, [r4, #12]
 80063d8:	0719      	lsls	r1, r3, #28
 80063da:	d51d      	bpl.n	8006418 <_puts_r+0x78>
 80063dc:	6923      	ldr	r3, [r4, #16]
 80063de:	b1db      	cbz	r3, 8006418 <_puts_r+0x78>
 80063e0:	3e01      	subs	r6, #1
 80063e2:	68a3      	ldr	r3, [r4, #8]
 80063e4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80063e8:	3b01      	subs	r3, #1
 80063ea:	60a3      	str	r3, [r4, #8]
 80063ec:	bb39      	cbnz	r1, 800643e <_puts_r+0x9e>
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	da38      	bge.n	8006464 <_puts_r+0xc4>
 80063f2:	4622      	mov	r2, r4
 80063f4:	210a      	movs	r1, #10
 80063f6:	4628      	mov	r0, r5
 80063f8:	f000 f9e8 	bl	80067cc <__swbuf_r>
 80063fc:	3001      	adds	r0, #1
 80063fe:	d011      	beq.n	8006424 <_puts_r+0x84>
 8006400:	250a      	movs	r5, #10
 8006402:	e011      	b.n	8006428 <_puts_r+0x88>
 8006404:	4b1b      	ldr	r3, [pc, #108]	; (8006474 <_puts_r+0xd4>)
 8006406:	429c      	cmp	r4, r3
 8006408:	d101      	bne.n	800640e <_puts_r+0x6e>
 800640a:	68ac      	ldr	r4, [r5, #8]
 800640c:	e7da      	b.n	80063c4 <_puts_r+0x24>
 800640e:	4b1a      	ldr	r3, [pc, #104]	; (8006478 <_puts_r+0xd8>)
 8006410:	429c      	cmp	r4, r3
 8006412:	bf08      	it	eq
 8006414:	68ec      	ldreq	r4, [r5, #12]
 8006416:	e7d5      	b.n	80063c4 <_puts_r+0x24>
 8006418:	4621      	mov	r1, r4
 800641a:	4628      	mov	r0, r5
 800641c:	f000 fa28 	bl	8006870 <__swsetup_r>
 8006420:	2800      	cmp	r0, #0
 8006422:	d0dd      	beq.n	80063e0 <_puts_r+0x40>
 8006424:	f04f 35ff 	mov.w	r5, #4294967295
 8006428:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800642a:	07da      	lsls	r2, r3, #31
 800642c:	d405      	bmi.n	800643a <_puts_r+0x9a>
 800642e:	89a3      	ldrh	r3, [r4, #12]
 8006430:	059b      	lsls	r3, r3, #22
 8006432:	d402      	bmi.n	800643a <_puts_r+0x9a>
 8006434:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006436:	f000 fc42 	bl	8006cbe <__retarget_lock_release_recursive>
 800643a:	4628      	mov	r0, r5
 800643c:	bd70      	pop	{r4, r5, r6, pc}
 800643e:	2b00      	cmp	r3, #0
 8006440:	da04      	bge.n	800644c <_puts_r+0xac>
 8006442:	69a2      	ldr	r2, [r4, #24]
 8006444:	429a      	cmp	r2, r3
 8006446:	dc06      	bgt.n	8006456 <_puts_r+0xb6>
 8006448:	290a      	cmp	r1, #10
 800644a:	d004      	beq.n	8006456 <_puts_r+0xb6>
 800644c:	6823      	ldr	r3, [r4, #0]
 800644e:	1c5a      	adds	r2, r3, #1
 8006450:	6022      	str	r2, [r4, #0]
 8006452:	7019      	strb	r1, [r3, #0]
 8006454:	e7c5      	b.n	80063e2 <_puts_r+0x42>
 8006456:	4622      	mov	r2, r4
 8006458:	4628      	mov	r0, r5
 800645a:	f000 f9b7 	bl	80067cc <__swbuf_r>
 800645e:	3001      	adds	r0, #1
 8006460:	d1bf      	bne.n	80063e2 <_puts_r+0x42>
 8006462:	e7df      	b.n	8006424 <_puts_r+0x84>
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	250a      	movs	r5, #10
 8006468:	1c5a      	adds	r2, r3, #1
 800646a:	6022      	str	r2, [r4, #0]
 800646c:	701d      	strb	r5, [r3, #0]
 800646e:	e7db      	b.n	8006428 <_puts_r+0x88>
 8006470:	080081f0 	.word	0x080081f0
 8006474:	08008210 	.word	0x08008210
 8006478:	080081d0 	.word	0x080081d0

0800647c <puts>:
 800647c:	4b02      	ldr	r3, [pc, #8]	; (8006488 <puts+0xc>)
 800647e:	4601      	mov	r1, r0
 8006480:	6818      	ldr	r0, [r3, #0]
 8006482:	f7ff bf8d 	b.w	80063a0 <_puts_r>
 8006486:	bf00      	nop
 8006488:	200009d4 	.word	0x200009d4

0800648c <_sbrk_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4d06      	ldr	r5, [pc, #24]	; (80064a8 <_sbrk_r+0x1c>)
 8006490:	2300      	movs	r3, #0
 8006492:	4604      	mov	r4, r0
 8006494:	4608      	mov	r0, r1
 8006496:	602b      	str	r3, [r5, #0]
 8006498:	f7fb ff2c 	bl	80022f4 <_sbrk>
 800649c:	1c43      	adds	r3, r0, #1
 800649e:	d102      	bne.n	80064a6 <_sbrk_r+0x1a>
 80064a0:	682b      	ldr	r3, [r5, #0]
 80064a2:	b103      	cbz	r3, 80064a6 <_sbrk_r+0x1a>
 80064a4:	6023      	str	r3, [r4, #0]
 80064a6:	bd38      	pop	{r3, r4, r5, pc}
 80064a8:	200023f8 	.word	0x200023f8

080064ac <siprintf>:
 80064ac:	b40e      	push	{r1, r2, r3}
 80064ae:	b500      	push	{lr}
 80064b0:	b09c      	sub	sp, #112	; 0x70
 80064b2:	ab1d      	add	r3, sp, #116	; 0x74
 80064b4:	9002      	str	r0, [sp, #8]
 80064b6:	9006      	str	r0, [sp, #24]
 80064b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80064bc:	4809      	ldr	r0, [pc, #36]	; (80064e4 <siprintf+0x38>)
 80064be:	9107      	str	r1, [sp, #28]
 80064c0:	9104      	str	r1, [sp, #16]
 80064c2:	4909      	ldr	r1, [pc, #36]	; (80064e8 <siprintf+0x3c>)
 80064c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80064c8:	9105      	str	r1, [sp, #20]
 80064ca:	6800      	ldr	r0, [r0, #0]
 80064cc:	9301      	str	r3, [sp, #4]
 80064ce:	a902      	add	r1, sp, #8
 80064d0:	f000 fcc4 	bl	8006e5c <_svfiprintf_r>
 80064d4:	9b02      	ldr	r3, [sp, #8]
 80064d6:	2200      	movs	r2, #0
 80064d8:	701a      	strb	r2, [r3, #0]
 80064da:	b01c      	add	sp, #112	; 0x70
 80064dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80064e0:	b003      	add	sp, #12
 80064e2:	4770      	bx	lr
 80064e4:	200009d4 	.word	0x200009d4
 80064e8:	ffff0208 	.word	0xffff0208

080064ec <strcasecmp>:
 80064ec:	b530      	push	{r4, r5, lr}
 80064ee:	4d0b      	ldr	r5, [pc, #44]	; (800651c <strcasecmp+0x30>)
 80064f0:	4604      	mov	r4, r0
 80064f2:	f814 3b01 	ldrb.w	r3, [r4], #1
 80064f6:	5d5a      	ldrb	r2, [r3, r5]
 80064f8:	f002 0203 	and.w	r2, r2, #3
 80064fc:	2a01      	cmp	r2, #1
 80064fe:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006502:	5ca8      	ldrb	r0, [r5, r2]
 8006504:	f000 0003 	and.w	r0, r0, #3
 8006508:	bf08      	it	eq
 800650a:	3320      	addeq	r3, #32
 800650c:	2801      	cmp	r0, #1
 800650e:	bf08      	it	eq
 8006510:	3220      	addeq	r2, #32
 8006512:	1a98      	subs	r0, r3, r2
 8006514:	d101      	bne.n	800651a <strcasecmp+0x2e>
 8006516:	2a00      	cmp	r2, #0
 8006518:	d1eb      	bne.n	80064f2 <strcasecmp+0x6>
 800651a:	bd30      	pop	{r4, r5, pc}
 800651c:	080080cd 	.word	0x080080cd

08006520 <strncasecmp>:
 8006520:	b570      	push	{r4, r5, r6, lr}
 8006522:	4e0f      	ldr	r6, [pc, #60]	; (8006560 <strncasecmp+0x40>)
 8006524:	4604      	mov	r4, r0
 8006526:	440a      	add	r2, r1
 8006528:	428a      	cmp	r2, r1
 800652a:	d101      	bne.n	8006530 <strncasecmp+0x10>
 800652c:	2000      	movs	r0, #0
 800652e:	e013      	b.n	8006558 <strncasecmp+0x38>
 8006530:	f814 3b01 	ldrb.w	r3, [r4], #1
 8006534:	5d98      	ldrb	r0, [r3, r6]
 8006536:	f000 0003 	and.w	r0, r0, #3
 800653a:	2801      	cmp	r0, #1
 800653c:	f811 0b01 	ldrb.w	r0, [r1], #1
 8006540:	5c35      	ldrb	r5, [r6, r0]
 8006542:	f005 0503 	and.w	r5, r5, #3
 8006546:	bf08      	it	eq
 8006548:	3320      	addeq	r3, #32
 800654a:	2d01      	cmp	r5, #1
 800654c:	bf08      	it	eq
 800654e:	3020      	addeq	r0, #32
 8006550:	1a1b      	subs	r3, r3, r0
 8006552:	d102      	bne.n	800655a <strncasecmp+0x3a>
 8006554:	2800      	cmp	r0, #0
 8006556:	d1e7      	bne.n	8006528 <strncasecmp+0x8>
 8006558:	bd70      	pop	{r4, r5, r6, pc}
 800655a:	4618      	mov	r0, r3
 800655c:	e7fc      	b.n	8006558 <strncasecmp+0x38>
 800655e:	bf00      	nop
 8006560:	080080cd 	.word	0x080080cd

08006564 <__strtok_r>:
 8006564:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006566:	b908      	cbnz	r0, 800656c <__strtok_r+0x8>
 8006568:	6810      	ldr	r0, [r2, #0]
 800656a:	b188      	cbz	r0, 8006590 <__strtok_r+0x2c>
 800656c:	4604      	mov	r4, r0
 800656e:	4620      	mov	r0, r4
 8006570:	f814 5b01 	ldrb.w	r5, [r4], #1
 8006574:	460f      	mov	r7, r1
 8006576:	f817 6b01 	ldrb.w	r6, [r7], #1
 800657a:	b91e      	cbnz	r6, 8006584 <__strtok_r+0x20>
 800657c:	b965      	cbnz	r5, 8006598 <__strtok_r+0x34>
 800657e:	6015      	str	r5, [r2, #0]
 8006580:	4628      	mov	r0, r5
 8006582:	e005      	b.n	8006590 <__strtok_r+0x2c>
 8006584:	42b5      	cmp	r5, r6
 8006586:	d1f6      	bne.n	8006576 <__strtok_r+0x12>
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1f0      	bne.n	800656e <__strtok_r+0xa>
 800658c:	6014      	str	r4, [r2, #0]
 800658e:	7003      	strb	r3, [r0, #0]
 8006590:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006592:	461c      	mov	r4, r3
 8006594:	e00c      	b.n	80065b0 <__strtok_r+0x4c>
 8006596:	b915      	cbnz	r5, 800659e <__strtok_r+0x3a>
 8006598:	f814 3b01 	ldrb.w	r3, [r4], #1
 800659c:	460e      	mov	r6, r1
 800659e:	f816 5b01 	ldrb.w	r5, [r6], #1
 80065a2:	42ab      	cmp	r3, r5
 80065a4:	d1f7      	bne.n	8006596 <__strtok_r+0x32>
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d0f3      	beq.n	8006592 <__strtok_r+0x2e>
 80065aa:	2300      	movs	r3, #0
 80065ac:	f804 3c01 	strb.w	r3, [r4, #-1]
 80065b0:	6014      	str	r4, [r2, #0]
 80065b2:	e7ed      	b.n	8006590 <__strtok_r+0x2c>

080065b4 <strtok_r>:
 80065b4:	2301      	movs	r3, #1
 80065b6:	f7ff bfd5 	b.w	8006564 <__strtok_r>
	...

080065bc <_strtol_l.constprop.0>:
 80065bc:	2b01      	cmp	r3, #1
 80065be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80065c2:	d001      	beq.n	80065c8 <_strtol_l.constprop.0+0xc>
 80065c4:	2b24      	cmp	r3, #36	; 0x24
 80065c6:	d906      	bls.n	80065d6 <_strtol_l.constprop.0+0x1a>
 80065c8:	f7ff fd8c 	bl	80060e4 <__errno>
 80065cc:	2316      	movs	r3, #22
 80065ce:	6003      	str	r3, [r0, #0]
 80065d0:	2000      	movs	r0, #0
 80065d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80066bc <_strtol_l.constprop.0+0x100>
 80065da:	460d      	mov	r5, r1
 80065dc:	462e      	mov	r6, r5
 80065de:	f815 4b01 	ldrb.w	r4, [r5], #1
 80065e2:	f814 700c 	ldrb.w	r7, [r4, ip]
 80065e6:	f017 0708 	ands.w	r7, r7, #8
 80065ea:	d1f7      	bne.n	80065dc <_strtol_l.constprop.0+0x20>
 80065ec:	2c2d      	cmp	r4, #45	; 0x2d
 80065ee:	d132      	bne.n	8006656 <_strtol_l.constprop.0+0x9a>
 80065f0:	782c      	ldrb	r4, [r5, #0]
 80065f2:	2701      	movs	r7, #1
 80065f4:	1cb5      	adds	r5, r6, #2
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d05b      	beq.n	80066b2 <_strtol_l.constprop.0+0xf6>
 80065fa:	2b10      	cmp	r3, #16
 80065fc:	d109      	bne.n	8006612 <_strtol_l.constprop.0+0x56>
 80065fe:	2c30      	cmp	r4, #48	; 0x30
 8006600:	d107      	bne.n	8006612 <_strtol_l.constprop.0+0x56>
 8006602:	782c      	ldrb	r4, [r5, #0]
 8006604:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006608:	2c58      	cmp	r4, #88	; 0x58
 800660a:	d14d      	bne.n	80066a8 <_strtol_l.constprop.0+0xec>
 800660c:	786c      	ldrb	r4, [r5, #1]
 800660e:	2310      	movs	r3, #16
 8006610:	3502      	adds	r5, #2
 8006612:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8006616:	f108 38ff 	add.w	r8, r8, #4294967295
 800661a:	f04f 0c00 	mov.w	ip, #0
 800661e:	fbb8 f9f3 	udiv	r9, r8, r3
 8006622:	4666      	mov	r6, ip
 8006624:	fb03 8a19 	mls	sl, r3, r9, r8
 8006628:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800662c:	f1be 0f09 	cmp.w	lr, #9
 8006630:	d816      	bhi.n	8006660 <_strtol_l.constprop.0+0xa4>
 8006632:	4674      	mov	r4, lr
 8006634:	42a3      	cmp	r3, r4
 8006636:	dd24      	ble.n	8006682 <_strtol_l.constprop.0+0xc6>
 8006638:	f1bc 0f00 	cmp.w	ip, #0
 800663c:	db1e      	blt.n	800667c <_strtol_l.constprop.0+0xc0>
 800663e:	45b1      	cmp	r9, r6
 8006640:	d31c      	bcc.n	800667c <_strtol_l.constprop.0+0xc0>
 8006642:	d101      	bne.n	8006648 <_strtol_l.constprop.0+0x8c>
 8006644:	45a2      	cmp	sl, r4
 8006646:	db19      	blt.n	800667c <_strtol_l.constprop.0+0xc0>
 8006648:	fb06 4603 	mla	r6, r6, r3, r4
 800664c:	f04f 0c01 	mov.w	ip, #1
 8006650:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006654:	e7e8      	b.n	8006628 <_strtol_l.constprop.0+0x6c>
 8006656:	2c2b      	cmp	r4, #43	; 0x2b
 8006658:	bf04      	itt	eq
 800665a:	782c      	ldrbeq	r4, [r5, #0]
 800665c:	1cb5      	addeq	r5, r6, #2
 800665e:	e7ca      	b.n	80065f6 <_strtol_l.constprop.0+0x3a>
 8006660:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8006664:	f1be 0f19 	cmp.w	lr, #25
 8006668:	d801      	bhi.n	800666e <_strtol_l.constprop.0+0xb2>
 800666a:	3c37      	subs	r4, #55	; 0x37
 800666c:	e7e2      	b.n	8006634 <_strtol_l.constprop.0+0x78>
 800666e:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8006672:	f1be 0f19 	cmp.w	lr, #25
 8006676:	d804      	bhi.n	8006682 <_strtol_l.constprop.0+0xc6>
 8006678:	3c57      	subs	r4, #87	; 0x57
 800667a:	e7db      	b.n	8006634 <_strtol_l.constprop.0+0x78>
 800667c:	f04f 3cff 	mov.w	ip, #4294967295
 8006680:	e7e6      	b.n	8006650 <_strtol_l.constprop.0+0x94>
 8006682:	f1bc 0f00 	cmp.w	ip, #0
 8006686:	da05      	bge.n	8006694 <_strtol_l.constprop.0+0xd8>
 8006688:	2322      	movs	r3, #34	; 0x22
 800668a:	6003      	str	r3, [r0, #0]
 800668c:	4646      	mov	r6, r8
 800668e:	b942      	cbnz	r2, 80066a2 <_strtol_l.constprop.0+0xe6>
 8006690:	4630      	mov	r0, r6
 8006692:	e79e      	b.n	80065d2 <_strtol_l.constprop.0+0x16>
 8006694:	b107      	cbz	r7, 8006698 <_strtol_l.constprop.0+0xdc>
 8006696:	4276      	negs	r6, r6
 8006698:	2a00      	cmp	r2, #0
 800669a:	d0f9      	beq.n	8006690 <_strtol_l.constprop.0+0xd4>
 800669c:	f1bc 0f00 	cmp.w	ip, #0
 80066a0:	d000      	beq.n	80066a4 <_strtol_l.constprop.0+0xe8>
 80066a2:	1e69      	subs	r1, r5, #1
 80066a4:	6011      	str	r1, [r2, #0]
 80066a6:	e7f3      	b.n	8006690 <_strtol_l.constprop.0+0xd4>
 80066a8:	2430      	movs	r4, #48	; 0x30
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d1b1      	bne.n	8006612 <_strtol_l.constprop.0+0x56>
 80066ae:	2308      	movs	r3, #8
 80066b0:	e7af      	b.n	8006612 <_strtol_l.constprop.0+0x56>
 80066b2:	2c30      	cmp	r4, #48	; 0x30
 80066b4:	d0a5      	beq.n	8006602 <_strtol_l.constprop.0+0x46>
 80066b6:	230a      	movs	r3, #10
 80066b8:	e7ab      	b.n	8006612 <_strtol_l.constprop.0+0x56>
 80066ba:	bf00      	nop
 80066bc:	080080cd 	.word	0x080080cd

080066c0 <strtol>:
 80066c0:	4613      	mov	r3, r2
 80066c2:	460a      	mov	r2, r1
 80066c4:	4601      	mov	r1, r0
 80066c6:	4802      	ldr	r0, [pc, #8]	; (80066d0 <strtol+0x10>)
 80066c8:	6800      	ldr	r0, [r0, #0]
 80066ca:	f7ff bf77 	b.w	80065bc <_strtol_l.constprop.0>
 80066ce:	bf00      	nop
 80066d0:	200009d4 	.word	0x200009d4

080066d4 <_strtoul_l.constprop.0>:
 80066d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80066d8:	4f36      	ldr	r7, [pc, #216]	; (80067b4 <_strtoul_l.constprop.0+0xe0>)
 80066da:	4686      	mov	lr, r0
 80066dc:	460d      	mov	r5, r1
 80066de:	4628      	mov	r0, r5
 80066e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 80066e4:	5de6      	ldrb	r6, [r4, r7]
 80066e6:	f016 0608 	ands.w	r6, r6, #8
 80066ea:	d1f8      	bne.n	80066de <_strtoul_l.constprop.0+0xa>
 80066ec:	2c2d      	cmp	r4, #45	; 0x2d
 80066ee:	d12f      	bne.n	8006750 <_strtoul_l.constprop.0+0x7c>
 80066f0:	782c      	ldrb	r4, [r5, #0]
 80066f2:	2601      	movs	r6, #1
 80066f4:	1c85      	adds	r5, r0, #2
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d057      	beq.n	80067aa <_strtoul_l.constprop.0+0xd6>
 80066fa:	2b10      	cmp	r3, #16
 80066fc:	d109      	bne.n	8006712 <_strtoul_l.constprop.0+0x3e>
 80066fe:	2c30      	cmp	r4, #48	; 0x30
 8006700:	d107      	bne.n	8006712 <_strtoul_l.constprop.0+0x3e>
 8006702:	7828      	ldrb	r0, [r5, #0]
 8006704:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8006708:	2858      	cmp	r0, #88	; 0x58
 800670a:	d149      	bne.n	80067a0 <_strtoul_l.constprop.0+0xcc>
 800670c:	786c      	ldrb	r4, [r5, #1]
 800670e:	2310      	movs	r3, #16
 8006710:	3502      	adds	r5, #2
 8006712:	f04f 38ff 	mov.w	r8, #4294967295
 8006716:	2700      	movs	r7, #0
 8006718:	fbb8 f8f3 	udiv	r8, r8, r3
 800671c:	fb03 f908 	mul.w	r9, r3, r8
 8006720:	ea6f 0909 	mvn.w	r9, r9
 8006724:	4638      	mov	r0, r7
 8006726:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800672a:	f1bc 0f09 	cmp.w	ip, #9
 800672e:	d814      	bhi.n	800675a <_strtoul_l.constprop.0+0x86>
 8006730:	4664      	mov	r4, ip
 8006732:	42a3      	cmp	r3, r4
 8006734:	dd22      	ble.n	800677c <_strtoul_l.constprop.0+0xa8>
 8006736:	2f00      	cmp	r7, #0
 8006738:	db1d      	blt.n	8006776 <_strtoul_l.constprop.0+0xa2>
 800673a:	4580      	cmp	r8, r0
 800673c:	d31b      	bcc.n	8006776 <_strtoul_l.constprop.0+0xa2>
 800673e:	d101      	bne.n	8006744 <_strtoul_l.constprop.0+0x70>
 8006740:	45a1      	cmp	r9, r4
 8006742:	db18      	blt.n	8006776 <_strtoul_l.constprop.0+0xa2>
 8006744:	fb00 4003 	mla	r0, r0, r3, r4
 8006748:	2701      	movs	r7, #1
 800674a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800674e:	e7ea      	b.n	8006726 <_strtoul_l.constprop.0+0x52>
 8006750:	2c2b      	cmp	r4, #43	; 0x2b
 8006752:	bf04      	itt	eq
 8006754:	782c      	ldrbeq	r4, [r5, #0]
 8006756:	1c85      	addeq	r5, r0, #2
 8006758:	e7cd      	b.n	80066f6 <_strtoul_l.constprop.0+0x22>
 800675a:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800675e:	f1bc 0f19 	cmp.w	ip, #25
 8006762:	d801      	bhi.n	8006768 <_strtoul_l.constprop.0+0x94>
 8006764:	3c37      	subs	r4, #55	; 0x37
 8006766:	e7e4      	b.n	8006732 <_strtoul_l.constprop.0+0x5e>
 8006768:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800676c:	f1bc 0f19 	cmp.w	ip, #25
 8006770:	d804      	bhi.n	800677c <_strtoul_l.constprop.0+0xa8>
 8006772:	3c57      	subs	r4, #87	; 0x57
 8006774:	e7dd      	b.n	8006732 <_strtoul_l.constprop.0+0x5e>
 8006776:	f04f 37ff 	mov.w	r7, #4294967295
 800677a:	e7e6      	b.n	800674a <_strtoul_l.constprop.0+0x76>
 800677c:	2f00      	cmp	r7, #0
 800677e:	da07      	bge.n	8006790 <_strtoul_l.constprop.0+0xbc>
 8006780:	2322      	movs	r3, #34	; 0x22
 8006782:	f8ce 3000 	str.w	r3, [lr]
 8006786:	f04f 30ff 	mov.w	r0, #4294967295
 800678a:	b932      	cbnz	r2, 800679a <_strtoul_l.constprop.0+0xc6>
 800678c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006790:	b106      	cbz	r6, 8006794 <_strtoul_l.constprop.0+0xc0>
 8006792:	4240      	negs	r0, r0
 8006794:	2a00      	cmp	r2, #0
 8006796:	d0f9      	beq.n	800678c <_strtoul_l.constprop.0+0xb8>
 8006798:	b107      	cbz	r7, 800679c <_strtoul_l.constprop.0+0xc8>
 800679a:	1e69      	subs	r1, r5, #1
 800679c:	6011      	str	r1, [r2, #0]
 800679e:	e7f5      	b.n	800678c <_strtoul_l.constprop.0+0xb8>
 80067a0:	2430      	movs	r4, #48	; 0x30
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d1b5      	bne.n	8006712 <_strtoul_l.constprop.0+0x3e>
 80067a6:	2308      	movs	r3, #8
 80067a8:	e7b3      	b.n	8006712 <_strtoul_l.constprop.0+0x3e>
 80067aa:	2c30      	cmp	r4, #48	; 0x30
 80067ac:	d0a9      	beq.n	8006702 <_strtoul_l.constprop.0+0x2e>
 80067ae:	230a      	movs	r3, #10
 80067b0:	e7af      	b.n	8006712 <_strtoul_l.constprop.0+0x3e>
 80067b2:	bf00      	nop
 80067b4:	080080cd 	.word	0x080080cd

080067b8 <strtoul>:
 80067b8:	4613      	mov	r3, r2
 80067ba:	460a      	mov	r2, r1
 80067bc:	4601      	mov	r1, r0
 80067be:	4802      	ldr	r0, [pc, #8]	; (80067c8 <strtoul+0x10>)
 80067c0:	6800      	ldr	r0, [r0, #0]
 80067c2:	f7ff bf87 	b.w	80066d4 <_strtoul_l.constprop.0>
 80067c6:	bf00      	nop
 80067c8:	200009d4 	.word	0x200009d4

080067cc <__swbuf_r>:
 80067cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ce:	460e      	mov	r6, r1
 80067d0:	4614      	mov	r4, r2
 80067d2:	4605      	mov	r5, r0
 80067d4:	b118      	cbz	r0, 80067de <__swbuf_r+0x12>
 80067d6:	6983      	ldr	r3, [r0, #24]
 80067d8:	b90b      	cbnz	r3, 80067de <__swbuf_r+0x12>
 80067da:	f000 f9d1 	bl	8006b80 <__sinit>
 80067de:	4b21      	ldr	r3, [pc, #132]	; (8006864 <__swbuf_r+0x98>)
 80067e0:	429c      	cmp	r4, r3
 80067e2:	d12b      	bne.n	800683c <__swbuf_r+0x70>
 80067e4:	686c      	ldr	r4, [r5, #4]
 80067e6:	69a3      	ldr	r3, [r4, #24]
 80067e8:	60a3      	str	r3, [r4, #8]
 80067ea:	89a3      	ldrh	r3, [r4, #12]
 80067ec:	071a      	lsls	r2, r3, #28
 80067ee:	d52f      	bpl.n	8006850 <__swbuf_r+0x84>
 80067f0:	6923      	ldr	r3, [r4, #16]
 80067f2:	b36b      	cbz	r3, 8006850 <__swbuf_r+0x84>
 80067f4:	6923      	ldr	r3, [r4, #16]
 80067f6:	6820      	ldr	r0, [r4, #0]
 80067f8:	1ac0      	subs	r0, r0, r3
 80067fa:	6963      	ldr	r3, [r4, #20]
 80067fc:	b2f6      	uxtb	r6, r6
 80067fe:	4283      	cmp	r3, r0
 8006800:	4637      	mov	r7, r6
 8006802:	dc04      	bgt.n	800680e <__swbuf_r+0x42>
 8006804:	4621      	mov	r1, r4
 8006806:	4628      	mov	r0, r5
 8006808:	f000 f926 	bl	8006a58 <_fflush_r>
 800680c:	bb30      	cbnz	r0, 800685c <__swbuf_r+0x90>
 800680e:	68a3      	ldr	r3, [r4, #8]
 8006810:	3b01      	subs	r3, #1
 8006812:	60a3      	str	r3, [r4, #8]
 8006814:	6823      	ldr	r3, [r4, #0]
 8006816:	1c5a      	adds	r2, r3, #1
 8006818:	6022      	str	r2, [r4, #0]
 800681a:	701e      	strb	r6, [r3, #0]
 800681c:	6963      	ldr	r3, [r4, #20]
 800681e:	3001      	adds	r0, #1
 8006820:	4283      	cmp	r3, r0
 8006822:	d004      	beq.n	800682e <__swbuf_r+0x62>
 8006824:	89a3      	ldrh	r3, [r4, #12]
 8006826:	07db      	lsls	r3, r3, #31
 8006828:	d506      	bpl.n	8006838 <__swbuf_r+0x6c>
 800682a:	2e0a      	cmp	r6, #10
 800682c:	d104      	bne.n	8006838 <__swbuf_r+0x6c>
 800682e:	4621      	mov	r1, r4
 8006830:	4628      	mov	r0, r5
 8006832:	f000 f911 	bl	8006a58 <_fflush_r>
 8006836:	b988      	cbnz	r0, 800685c <__swbuf_r+0x90>
 8006838:	4638      	mov	r0, r7
 800683a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800683c:	4b0a      	ldr	r3, [pc, #40]	; (8006868 <__swbuf_r+0x9c>)
 800683e:	429c      	cmp	r4, r3
 8006840:	d101      	bne.n	8006846 <__swbuf_r+0x7a>
 8006842:	68ac      	ldr	r4, [r5, #8]
 8006844:	e7cf      	b.n	80067e6 <__swbuf_r+0x1a>
 8006846:	4b09      	ldr	r3, [pc, #36]	; (800686c <__swbuf_r+0xa0>)
 8006848:	429c      	cmp	r4, r3
 800684a:	bf08      	it	eq
 800684c:	68ec      	ldreq	r4, [r5, #12]
 800684e:	e7ca      	b.n	80067e6 <__swbuf_r+0x1a>
 8006850:	4621      	mov	r1, r4
 8006852:	4628      	mov	r0, r5
 8006854:	f000 f80c 	bl	8006870 <__swsetup_r>
 8006858:	2800      	cmp	r0, #0
 800685a:	d0cb      	beq.n	80067f4 <__swbuf_r+0x28>
 800685c:	f04f 37ff 	mov.w	r7, #4294967295
 8006860:	e7ea      	b.n	8006838 <__swbuf_r+0x6c>
 8006862:	bf00      	nop
 8006864:	080081f0 	.word	0x080081f0
 8006868:	08008210 	.word	0x08008210
 800686c:	080081d0 	.word	0x080081d0

08006870 <__swsetup_r>:
 8006870:	4b32      	ldr	r3, [pc, #200]	; (800693c <__swsetup_r+0xcc>)
 8006872:	b570      	push	{r4, r5, r6, lr}
 8006874:	681d      	ldr	r5, [r3, #0]
 8006876:	4606      	mov	r6, r0
 8006878:	460c      	mov	r4, r1
 800687a:	b125      	cbz	r5, 8006886 <__swsetup_r+0x16>
 800687c:	69ab      	ldr	r3, [r5, #24]
 800687e:	b913      	cbnz	r3, 8006886 <__swsetup_r+0x16>
 8006880:	4628      	mov	r0, r5
 8006882:	f000 f97d 	bl	8006b80 <__sinit>
 8006886:	4b2e      	ldr	r3, [pc, #184]	; (8006940 <__swsetup_r+0xd0>)
 8006888:	429c      	cmp	r4, r3
 800688a:	d10f      	bne.n	80068ac <__swsetup_r+0x3c>
 800688c:	686c      	ldr	r4, [r5, #4]
 800688e:	89a3      	ldrh	r3, [r4, #12]
 8006890:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006894:	0719      	lsls	r1, r3, #28
 8006896:	d42c      	bmi.n	80068f2 <__swsetup_r+0x82>
 8006898:	06dd      	lsls	r5, r3, #27
 800689a:	d411      	bmi.n	80068c0 <__swsetup_r+0x50>
 800689c:	2309      	movs	r3, #9
 800689e:	6033      	str	r3, [r6, #0]
 80068a0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80068a4:	81a3      	strh	r3, [r4, #12]
 80068a6:	f04f 30ff 	mov.w	r0, #4294967295
 80068aa:	e03e      	b.n	800692a <__swsetup_r+0xba>
 80068ac:	4b25      	ldr	r3, [pc, #148]	; (8006944 <__swsetup_r+0xd4>)
 80068ae:	429c      	cmp	r4, r3
 80068b0:	d101      	bne.n	80068b6 <__swsetup_r+0x46>
 80068b2:	68ac      	ldr	r4, [r5, #8]
 80068b4:	e7eb      	b.n	800688e <__swsetup_r+0x1e>
 80068b6:	4b24      	ldr	r3, [pc, #144]	; (8006948 <__swsetup_r+0xd8>)
 80068b8:	429c      	cmp	r4, r3
 80068ba:	bf08      	it	eq
 80068bc:	68ec      	ldreq	r4, [r5, #12]
 80068be:	e7e6      	b.n	800688e <__swsetup_r+0x1e>
 80068c0:	0758      	lsls	r0, r3, #29
 80068c2:	d512      	bpl.n	80068ea <__swsetup_r+0x7a>
 80068c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80068c6:	b141      	cbz	r1, 80068da <__swsetup_r+0x6a>
 80068c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80068cc:	4299      	cmp	r1, r3
 80068ce:	d002      	beq.n	80068d6 <__swsetup_r+0x66>
 80068d0:	4630      	mov	r0, r6
 80068d2:	f7ff fc57 	bl	8006184 <_free_r>
 80068d6:	2300      	movs	r3, #0
 80068d8:	6363      	str	r3, [r4, #52]	; 0x34
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80068e0:	81a3      	strh	r3, [r4, #12]
 80068e2:	2300      	movs	r3, #0
 80068e4:	6063      	str	r3, [r4, #4]
 80068e6:	6923      	ldr	r3, [r4, #16]
 80068e8:	6023      	str	r3, [r4, #0]
 80068ea:	89a3      	ldrh	r3, [r4, #12]
 80068ec:	f043 0308 	orr.w	r3, r3, #8
 80068f0:	81a3      	strh	r3, [r4, #12]
 80068f2:	6923      	ldr	r3, [r4, #16]
 80068f4:	b94b      	cbnz	r3, 800690a <__swsetup_r+0x9a>
 80068f6:	89a3      	ldrh	r3, [r4, #12]
 80068f8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80068fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006900:	d003      	beq.n	800690a <__swsetup_r+0x9a>
 8006902:	4621      	mov	r1, r4
 8006904:	4630      	mov	r0, r6
 8006906:	f000 fa01 	bl	8006d0c <__smakebuf_r>
 800690a:	89a0      	ldrh	r0, [r4, #12]
 800690c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006910:	f010 0301 	ands.w	r3, r0, #1
 8006914:	d00a      	beq.n	800692c <__swsetup_r+0xbc>
 8006916:	2300      	movs	r3, #0
 8006918:	60a3      	str	r3, [r4, #8]
 800691a:	6963      	ldr	r3, [r4, #20]
 800691c:	425b      	negs	r3, r3
 800691e:	61a3      	str	r3, [r4, #24]
 8006920:	6923      	ldr	r3, [r4, #16]
 8006922:	b943      	cbnz	r3, 8006936 <__swsetup_r+0xc6>
 8006924:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006928:	d1ba      	bne.n	80068a0 <__swsetup_r+0x30>
 800692a:	bd70      	pop	{r4, r5, r6, pc}
 800692c:	0781      	lsls	r1, r0, #30
 800692e:	bf58      	it	pl
 8006930:	6963      	ldrpl	r3, [r4, #20]
 8006932:	60a3      	str	r3, [r4, #8]
 8006934:	e7f4      	b.n	8006920 <__swsetup_r+0xb0>
 8006936:	2000      	movs	r0, #0
 8006938:	e7f7      	b.n	800692a <__swsetup_r+0xba>
 800693a:	bf00      	nop
 800693c:	200009d4 	.word	0x200009d4
 8006940:	080081f0 	.word	0x080081f0
 8006944:	08008210 	.word	0x08008210
 8006948:	080081d0 	.word	0x080081d0

0800694c <__sflush_r>:
 800694c:	898a      	ldrh	r2, [r1, #12]
 800694e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006952:	4605      	mov	r5, r0
 8006954:	0710      	lsls	r0, r2, #28
 8006956:	460c      	mov	r4, r1
 8006958:	d458      	bmi.n	8006a0c <__sflush_r+0xc0>
 800695a:	684b      	ldr	r3, [r1, #4]
 800695c:	2b00      	cmp	r3, #0
 800695e:	dc05      	bgt.n	800696c <__sflush_r+0x20>
 8006960:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006962:	2b00      	cmp	r3, #0
 8006964:	dc02      	bgt.n	800696c <__sflush_r+0x20>
 8006966:	2000      	movs	r0, #0
 8006968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800696c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800696e:	2e00      	cmp	r6, #0
 8006970:	d0f9      	beq.n	8006966 <__sflush_r+0x1a>
 8006972:	2300      	movs	r3, #0
 8006974:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006978:	682f      	ldr	r7, [r5, #0]
 800697a:	602b      	str	r3, [r5, #0]
 800697c:	d032      	beq.n	80069e4 <__sflush_r+0x98>
 800697e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006980:	89a3      	ldrh	r3, [r4, #12]
 8006982:	075a      	lsls	r2, r3, #29
 8006984:	d505      	bpl.n	8006992 <__sflush_r+0x46>
 8006986:	6863      	ldr	r3, [r4, #4]
 8006988:	1ac0      	subs	r0, r0, r3
 800698a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800698c:	b10b      	cbz	r3, 8006992 <__sflush_r+0x46>
 800698e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006990:	1ac0      	subs	r0, r0, r3
 8006992:	2300      	movs	r3, #0
 8006994:	4602      	mov	r2, r0
 8006996:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006998:	6a21      	ldr	r1, [r4, #32]
 800699a:	4628      	mov	r0, r5
 800699c:	47b0      	blx	r6
 800699e:	1c43      	adds	r3, r0, #1
 80069a0:	89a3      	ldrh	r3, [r4, #12]
 80069a2:	d106      	bne.n	80069b2 <__sflush_r+0x66>
 80069a4:	6829      	ldr	r1, [r5, #0]
 80069a6:	291d      	cmp	r1, #29
 80069a8:	d82c      	bhi.n	8006a04 <__sflush_r+0xb8>
 80069aa:	4a2a      	ldr	r2, [pc, #168]	; (8006a54 <__sflush_r+0x108>)
 80069ac:	40ca      	lsrs	r2, r1
 80069ae:	07d6      	lsls	r6, r2, #31
 80069b0:	d528      	bpl.n	8006a04 <__sflush_r+0xb8>
 80069b2:	2200      	movs	r2, #0
 80069b4:	6062      	str	r2, [r4, #4]
 80069b6:	04d9      	lsls	r1, r3, #19
 80069b8:	6922      	ldr	r2, [r4, #16]
 80069ba:	6022      	str	r2, [r4, #0]
 80069bc:	d504      	bpl.n	80069c8 <__sflush_r+0x7c>
 80069be:	1c42      	adds	r2, r0, #1
 80069c0:	d101      	bne.n	80069c6 <__sflush_r+0x7a>
 80069c2:	682b      	ldr	r3, [r5, #0]
 80069c4:	b903      	cbnz	r3, 80069c8 <__sflush_r+0x7c>
 80069c6:	6560      	str	r0, [r4, #84]	; 0x54
 80069c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069ca:	602f      	str	r7, [r5, #0]
 80069cc:	2900      	cmp	r1, #0
 80069ce:	d0ca      	beq.n	8006966 <__sflush_r+0x1a>
 80069d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069d4:	4299      	cmp	r1, r3
 80069d6:	d002      	beq.n	80069de <__sflush_r+0x92>
 80069d8:	4628      	mov	r0, r5
 80069da:	f7ff fbd3 	bl	8006184 <_free_r>
 80069de:	2000      	movs	r0, #0
 80069e0:	6360      	str	r0, [r4, #52]	; 0x34
 80069e2:	e7c1      	b.n	8006968 <__sflush_r+0x1c>
 80069e4:	6a21      	ldr	r1, [r4, #32]
 80069e6:	2301      	movs	r3, #1
 80069e8:	4628      	mov	r0, r5
 80069ea:	47b0      	blx	r6
 80069ec:	1c41      	adds	r1, r0, #1
 80069ee:	d1c7      	bne.n	8006980 <__sflush_r+0x34>
 80069f0:	682b      	ldr	r3, [r5, #0]
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0c4      	beq.n	8006980 <__sflush_r+0x34>
 80069f6:	2b1d      	cmp	r3, #29
 80069f8:	d001      	beq.n	80069fe <__sflush_r+0xb2>
 80069fa:	2b16      	cmp	r3, #22
 80069fc:	d101      	bne.n	8006a02 <__sflush_r+0xb6>
 80069fe:	602f      	str	r7, [r5, #0]
 8006a00:	e7b1      	b.n	8006966 <__sflush_r+0x1a>
 8006a02:	89a3      	ldrh	r3, [r4, #12]
 8006a04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a08:	81a3      	strh	r3, [r4, #12]
 8006a0a:	e7ad      	b.n	8006968 <__sflush_r+0x1c>
 8006a0c:	690f      	ldr	r7, [r1, #16]
 8006a0e:	2f00      	cmp	r7, #0
 8006a10:	d0a9      	beq.n	8006966 <__sflush_r+0x1a>
 8006a12:	0793      	lsls	r3, r2, #30
 8006a14:	680e      	ldr	r6, [r1, #0]
 8006a16:	bf08      	it	eq
 8006a18:	694b      	ldreq	r3, [r1, #20]
 8006a1a:	600f      	str	r7, [r1, #0]
 8006a1c:	bf18      	it	ne
 8006a1e:	2300      	movne	r3, #0
 8006a20:	eba6 0807 	sub.w	r8, r6, r7
 8006a24:	608b      	str	r3, [r1, #8]
 8006a26:	f1b8 0f00 	cmp.w	r8, #0
 8006a2a:	dd9c      	ble.n	8006966 <__sflush_r+0x1a>
 8006a2c:	6a21      	ldr	r1, [r4, #32]
 8006a2e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a30:	4643      	mov	r3, r8
 8006a32:	463a      	mov	r2, r7
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b0      	blx	r6
 8006a38:	2800      	cmp	r0, #0
 8006a3a:	dc06      	bgt.n	8006a4a <__sflush_r+0xfe>
 8006a3c:	89a3      	ldrh	r3, [r4, #12]
 8006a3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a42:	81a3      	strh	r3, [r4, #12]
 8006a44:	f04f 30ff 	mov.w	r0, #4294967295
 8006a48:	e78e      	b.n	8006968 <__sflush_r+0x1c>
 8006a4a:	4407      	add	r7, r0
 8006a4c:	eba8 0800 	sub.w	r8, r8, r0
 8006a50:	e7e9      	b.n	8006a26 <__sflush_r+0xda>
 8006a52:	bf00      	nop
 8006a54:	20400001 	.word	0x20400001

08006a58 <_fflush_r>:
 8006a58:	b538      	push	{r3, r4, r5, lr}
 8006a5a:	690b      	ldr	r3, [r1, #16]
 8006a5c:	4605      	mov	r5, r0
 8006a5e:	460c      	mov	r4, r1
 8006a60:	b913      	cbnz	r3, 8006a68 <_fflush_r+0x10>
 8006a62:	2500      	movs	r5, #0
 8006a64:	4628      	mov	r0, r5
 8006a66:	bd38      	pop	{r3, r4, r5, pc}
 8006a68:	b118      	cbz	r0, 8006a72 <_fflush_r+0x1a>
 8006a6a:	6983      	ldr	r3, [r0, #24]
 8006a6c:	b90b      	cbnz	r3, 8006a72 <_fflush_r+0x1a>
 8006a6e:	f000 f887 	bl	8006b80 <__sinit>
 8006a72:	4b14      	ldr	r3, [pc, #80]	; (8006ac4 <_fflush_r+0x6c>)
 8006a74:	429c      	cmp	r4, r3
 8006a76:	d11b      	bne.n	8006ab0 <_fflush_r+0x58>
 8006a78:	686c      	ldr	r4, [r5, #4]
 8006a7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d0ef      	beq.n	8006a62 <_fflush_r+0xa>
 8006a82:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a84:	07d0      	lsls	r0, r2, #31
 8006a86:	d404      	bmi.n	8006a92 <_fflush_r+0x3a>
 8006a88:	0599      	lsls	r1, r3, #22
 8006a8a:	d402      	bmi.n	8006a92 <_fflush_r+0x3a>
 8006a8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a8e:	f000 f915 	bl	8006cbc <__retarget_lock_acquire_recursive>
 8006a92:	4628      	mov	r0, r5
 8006a94:	4621      	mov	r1, r4
 8006a96:	f7ff ff59 	bl	800694c <__sflush_r>
 8006a9a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a9c:	07da      	lsls	r2, r3, #31
 8006a9e:	4605      	mov	r5, r0
 8006aa0:	d4e0      	bmi.n	8006a64 <_fflush_r+0xc>
 8006aa2:	89a3      	ldrh	r3, [r4, #12]
 8006aa4:	059b      	lsls	r3, r3, #22
 8006aa6:	d4dd      	bmi.n	8006a64 <_fflush_r+0xc>
 8006aa8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aaa:	f000 f908 	bl	8006cbe <__retarget_lock_release_recursive>
 8006aae:	e7d9      	b.n	8006a64 <_fflush_r+0xc>
 8006ab0:	4b05      	ldr	r3, [pc, #20]	; (8006ac8 <_fflush_r+0x70>)
 8006ab2:	429c      	cmp	r4, r3
 8006ab4:	d101      	bne.n	8006aba <_fflush_r+0x62>
 8006ab6:	68ac      	ldr	r4, [r5, #8]
 8006ab8:	e7df      	b.n	8006a7a <_fflush_r+0x22>
 8006aba:	4b04      	ldr	r3, [pc, #16]	; (8006acc <_fflush_r+0x74>)
 8006abc:	429c      	cmp	r4, r3
 8006abe:	bf08      	it	eq
 8006ac0:	68ec      	ldreq	r4, [r5, #12]
 8006ac2:	e7da      	b.n	8006a7a <_fflush_r+0x22>
 8006ac4:	080081f0 	.word	0x080081f0
 8006ac8:	08008210 	.word	0x08008210
 8006acc:	080081d0 	.word	0x080081d0

08006ad0 <std>:
 8006ad0:	2300      	movs	r3, #0
 8006ad2:	b510      	push	{r4, lr}
 8006ad4:	4604      	mov	r4, r0
 8006ad6:	e9c0 3300 	strd	r3, r3, [r0]
 8006ada:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ade:	6083      	str	r3, [r0, #8]
 8006ae0:	8181      	strh	r1, [r0, #12]
 8006ae2:	6643      	str	r3, [r0, #100]	; 0x64
 8006ae4:	81c2      	strh	r2, [r0, #14]
 8006ae6:	6183      	str	r3, [r0, #24]
 8006ae8:	4619      	mov	r1, r3
 8006aea:	2208      	movs	r2, #8
 8006aec:	305c      	adds	r0, #92	; 0x5c
 8006aee:	f7ff fb41 	bl	8006174 <memset>
 8006af2:	4b05      	ldr	r3, [pc, #20]	; (8006b08 <std+0x38>)
 8006af4:	6263      	str	r3, [r4, #36]	; 0x24
 8006af6:	4b05      	ldr	r3, [pc, #20]	; (8006b0c <std+0x3c>)
 8006af8:	62a3      	str	r3, [r4, #40]	; 0x28
 8006afa:	4b05      	ldr	r3, [pc, #20]	; (8006b10 <std+0x40>)
 8006afc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006afe:	4b05      	ldr	r3, [pc, #20]	; (8006b14 <std+0x44>)
 8006b00:	6224      	str	r4, [r4, #32]
 8006b02:	6323      	str	r3, [r4, #48]	; 0x30
 8006b04:	bd10      	pop	{r4, pc}
 8006b06:	bf00      	nop
 8006b08:	080076c9 	.word	0x080076c9
 8006b0c:	080076eb 	.word	0x080076eb
 8006b10:	08007723 	.word	0x08007723
 8006b14:	08007747 	.word	0x08007747

08006b18 <_cleanup_r>:
 8006b18:	4901      	ldr	r1, [pc, #4]	; (8006b20 <_cleanup_r+0x8>)
 8006b1a:	f000 b8af 	b.w	8006c7c <_fwalk_reent>
 8006b1e:	bf00      	nop
 8006b20:	08006a59 	.word	0x08006a59

08006b24 <__sfmoreglue>:
 8006b24:	b570      	push	{r4, r5, r6, lr}
 8006b26:	2268      	movs	r2, #104	; 0x68
 8006b28:	1e4d      	subs	r5, r1, #1
 8006b2a:	4355      	muls	r5, r2
 8006b2c:	460e      	mov	r6, r1
 8006b2e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b32:	f7ff fb93 	bl	800625c <_malloc_r>
 8006b36:	4604      	mov	r4, r0
 8006b38:	b140      	cbz	r0, 8006b4c <__sfmoreglue+0x28>
 8006b3a:	2100      	movs	r1, #0
 8006b3c:	e9c0 1600 	strd	r1, r6, [r0]
 8006b40:	300c      	adds	r0, #12
 8006b42:	60a0      	str	r0, [r4, #8]
 8006b44:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b48:	f7ff fb14 	bl	8006174 <memset>
 8006b4c:	4620      	mov	r0, r4
 8006b4e:	bd70      	pop	{r4, r5, r6, pc}

08006b50 <__sfp_lock_acquire>:
 8006b50:	4801      	ldr	r0, [pc, #4]	; (8006b58 <__sfp_lock_acquire+0x8>)
 8006b52:	f000 b8b3 	b.w	8006cbc <__retarget_lock_acquire_recursive>
 8006b56:	bf00      	nop
 8006b58:	200023f5 	.word	0x200023f5

08006b5c <__sfp_lock_release>:
 8006b5c:	4801      	ldr	r0, [pc, #4]	; (8006b64 <__sfp_lock_release+0x8>)
 8006b5e:	f000 b8ae 	b.w	8006cbe <__retarget_lock_release_recursive>
 8006b62:	bf00      	nop
 8006b64:	200023f5 	.word	0x200023f5

08006b68 <__sinit_lock_acquire>:
 8006b68:	4801      	ldr	r0, [pc, #4]	; (8006b70 <__sinit_lock_acquire+0x8>)
 8006b6a:	f000 b8a7 	b.w	8006cbc <__retarget_lock_acquire_recursive>
 8006b6e:	bf00      	nop
 8006b70:	200023f6 	.word	0x200023f6

08006b74 <__sinit_lock_release>:
 8006b74:	4801      	ldr	r0, [pc, #4]	; (8006b7c <__sinit_lock_release+0x8>)
 8006b76:	f000 b8a2 	b.w	8006cbe <__retarget_lock_release_recursive>
 8006b7a:	bf00      	nop
 8006b7c:	200023f6 	.word	0x200023f6

08006b80 <__sinit>:
 8006b80:	b510      	push	{r4, lr}
 8006b82:	4604      	mov	r4, r0
 8006b84:	f7ff fff0 	bl	8006b68 <__sinit_lock_acquire>
 8006b88:	69a3      	ldr	r3, [r4, #24]
 8006b8a:	b11b      	cbz	r3, 8006b94 <__sinit+0x14>
 8006b8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b90:	f7ff bff0 	b.w	8006b74 <__sinit_lock_release>
 8006b94:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b98:	6523      	str	r3, [r4, #80]	; 0x50
 8006b9a:	4b13      	ldr	r3, [pc, #76]	; (8006be8 <__sinit+0x68>)
 8006b9c:	4a13      	ldr	r2, [pc, #76]	; (8006bec <__sinit+0x6c>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	62a2      	str	r2, [r4, #40]	; 0x28
 8006ba2:	42a3      	cmp	r3, r4
 8006ba4:	bf04      	itt	eq
 8006ba6:	2301      	moveq	r3, #1
 8006ba8:	61a3      	streq	r3, [r4, #24]
 8006baa:	4620      	mov	r0, r4
 8006bac:	f000 f820 	bl	8006bf0 <__sfp>
 8006bb0:	6060      	str	r0, [r4, #4]
 8006bb2:	4620      	mov	r0, r4
 8006bb4:	f000 f81c 	bl	8006bf0 <__sfp>
 8006bb8:	60a0      	str	r0, [r4, #8]
 8006bba:	4620      	mov	r0, r4
 8006bbc:	f000 f818 	bl	8006bf0 <__sfp>
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	60e0      	str	r0, [r4, #12]
 8006bc4:	2104      	movs	r1, #4
 8006bc6:	6860      	ldr	r0, [r4, #4]
 8006bc8:	f7ff ff82 	bl	8006ad0 <std>
 8006bcc:	68a0      	ldr	r0, [r4, #8]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	2109      	movs	r1, #9
 8006bd2:	f7ff ff7d 	bl	8006ad0 <std>
 8006bd6:	68e0      	ldr	r0, [r4, #12]
 8006bd8:	2202      	movs	r2, #2
 8006bda:	2112      	movs	r1, #18
 8006bdc:	f7ff ff78 	bl	8006ad0 <std>
 8006be0:	2301      	movs	r3, #1
 8006be2:	61a3      	str	r3, [r4, #24]
 8006be4:	e7d2      	b.n	8006b8c <__sinit+0xc>
 8006be6:	bf00      	nop
 8006be8:	080080c8 	.word	0x080080c8
 8006bec:	08006b19 	.word	0x08006b19

08006bf0 <__sfp>:
 8006bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bf2:	4607      	mov	r7, r0
 8006bf4:	f7ff ffac 	bl	8006b50 <__sfp_lock_acquire>
 8006bf8:	4b1e      	ldr	r3, [pc, #120]	; (8006c74 <__sfp+0x84>)
 8006bfa:	681e      	ldr	r6, [r3, #0]
 8006bfc:	69b3      	ldr	r3, [r6, #24]
 8006bfe:	b913      	cbnz	r3, 8006c06 <__sfp+0x16>
 8006c00:	4630      	mov	r0, r6
 8006c02:	f7ff ffbd 	bl	8006b80 <__sinit>
 8006c06:	3648      	adds	r6, #72	; 0x48
 8006c08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006c0c:	3b01      	subs	r3, #1
 8006c0e:	d503      	bpl.n	8006c18 <__sfp+0x28>
 8006c10:	6833      	ldr	r3, [r6, #0]
 8006c12:	b30b      	cbz	r3, 8006c58 <__sfp+0x68>
 8006c14:	6836      	ldr	r6, [r6, #0]
 8006c16:	e7f7      	b.n	8006c08 <__sfp+0x18>
 8006c18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c1c:	b9d5      	cbnz	r5, 8006c54 <__sfp+0x64>
 8006c1e:	4b16      	ldr	r3, [pc, #88]	; (8006c78 <__sfp+0x88>)
 8006c20:	60e3      	str	r3, [r4, #12]
 8006c22:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c26:	6665      	str	r5, [r4, #100]	; 0x64
 8006c28:	f000 f847 	bl	8006cba <__retarget_lock_init_recursive>
 8006c2c:	f7ff ff96 	bl	8006b5c <__sfp_lock_release>
 8006c30:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c34:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c38:	6025      	str	r5, [r4, #0]
 8006c3a:	61a5      	str	r5, [r4, #24]
 8006c3c:	2208      	movs	r2, #8
 8006c3e:	4629      	mov	r1, r5
 8006c40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c44:	f7ff fa96 	bl	8006174 <memset>
 8006c48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c50:	4620      	mov	r0, r4
 8006c52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c54:	3468      	adds	r4, #104	; 0x68
 8006c56:	e7d9      	b.n	8006c0c <__sfp+0x1c>
 8006c58:	2104      	movs	r1, #4
 8006c5a:	4638      	mov	r0, r7
 8006c5c:	f7ff ff62 	bl	8006b24 <__sfmoreglue>
 8006c60:	4604      	mov	r4, r0
 8006c62:	6030      	str	r0, [r6, #0]
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d1d5      	bne.n	8006c14 <__sfp+0x24>
 8006c68:	f7ff ff78 	bl	8006b5c <__sfp_lock_release>
 8006c6c:	230c      	movs	r3, #12
 8006c6e:	603b      	str	r3, [r7, #0]
 8006c70:	e7ee      	b.n	8006c50 <__sfp+0x60>
 8006c72:	bf00      	nop
 8006c74:	080080c8 	.word	0x080080c8
 8006c78:	ffff0001 	.word	0xffff0001

08006c7c <_fwalk_reent>:
 8006c7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c80:	4606      	mov	r6, r0
 8006c82:	4688      	mov	r8, r1
 8006c84:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c88:	2700      	movs	r7, #0
 8006c8a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c8e:	f1b9 0901 	subs.w	r9, r9, #1
 8006c92:	d505      	bpl.n	8006ca0 <_fwalk_reent+0x24>
 8006c94:	6824      	ldr	r4, [r4, #0]
 8006c96:	2c00      	cmp	r4, #0
 8006c98:	d1f7      	bne.n	8006c8a <_fwalk_reent+0xe>
 8006c9a:	4638      	mov	r0, r7
 8006c9c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ca0:	89ab      	ldrh	r3, [r5, #12]
 8006ca2:	2b01      	cmp	r3, #1
 8006ca4:	d907      	bls.n	8006cb6 <_fwalk_reent+0x3a>
 8006ca6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006caa:	3301      	adds	r3, #1
 8006cac:	d003      	beq.n	8006cb6 <_fwalk_reent+0x3a>
 8006cae:	4629      	mov	r1, r5
 8006cb0:	4630      	mov	r0, r6
 8006cb2:	47c0      	blx	r8
 8006cb4:	4307      	orrs	r7, r0
 8006cb6:	3568      	adds	r5, #104	; 0x68
 8006cb8:	e7e9      	b.n	8006c8e <_fwalk_reent+0x12>

08006cba <__retarget_lock_init_recursive>:
 8006cba:	4770      	bx	lr

08006cbc <__retarget_lock_acquire_recursive>:
 8006cbc:	4770      	bx	lr

08006cbe <__retarget_lock_release_recursive>:
 8006cbe:	4770      	bx	lr

08006cc0 <__swhatbuf_r>:
 8006cc0:	b570      	push	{r4, r5, r6, lr}
 8006cc2:	460e      	mov	r6, r1
 8006cc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cc8:	2900      	cmp	r1, #0
 8006cca:	b096      	sub	sp, #88	; 0x58
 8006ccc:	4614      	mov	r4, r2
 8006cce:	461d      	mov	r5, r3
 8006cd0:	da08      	bge.n	8006ce4 <__swhatbuf_r+0x24>
 8006cd2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006cd6:	2200      	movs	r2, #0
 8006cd8:	602a      	str	r2, [r5, #0]
 8006cda:	061a      	lsls	r2, r3, #24
 8006cdc:	d410      	bmi.n	8006d00 <__swhatbuf_r+0x40>
 8006cde:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006ce2:	e00e      	b.n	8006d02 <__swhatbuf_r+0x42>
 8006ce4:	466a      	mov	r2, sp
 8006ce6:	f000 fd55 	bl	8007794 <_fstat_r>
 8006cea:	2800      	cmp	r0, #0
 8006cec:	dbf1      	blt.n	8006cd2 <__swhatbuf_r+0x12>
 8006cee:	9a01      	ldr	r2, [sp, #4]
 8006cf0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006cf4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006cf8:	425a      	negs	r2, r3
 8006cfa:	415a      	adcs	r2, r3
 8006cfc:	602a      	str	r2, [r5, #0]
 8006cfe:	e7ee      	b.n	8006cde <__swhatbuf_r+0x1e>
 8006d00:	2340      	movs	r3, #64	; 0x40
 8006d02:	2000      	movs	r0, #0
 8006d04:	6023      	str	r3, [r4, #0]
 8006d06:	b016      	add	sp, #88	; 0x58
 8006d08:	bd70      	pop	{r4, r5, r6, pc}
	...

08006d0c <__smakebuf_r>:
 8006d0c:	898b      	ldrh	r3, [r1, #12]
 8006d0e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d10:	079d      	lsls	r5, r3, #30
 8006d12:	4606      	mov	r6, r0
 8006d14:	460c      	mov	r4, r1
 8006d16:	d507      	bpl.n	8006d28 <__smakebuf_r+0x1c>
 8006d18:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d1c:	6023      	str	r3, [r4, #0]
 8006d1e:	6123      	str	r3, [r4, #16]
 8006d20:	2301      	movs	r3, #1
 8006d22:	6163      	str	r3, [r4, #20]
 8006d24:	b002      	add	sp, #8
 8006d26:	bd70      	pop	{r4, r5, r6, pc}
 8006d28:	ab01      	add	r3, sp, #4
 8006d2a:	466a      	mov	r2, sp
 8006d2c:	f7ff ffc8 	bl	8006cc0 <__swhatbuf_r>
 8006d30:	9900      	ldr	r1, [sp, #0]
 8006d32:	4605      	mov	r5, r0
 8006d34:	4630      	mov	r0, r6
 8006d36:	f7ff fa91 	bl	800625c <_malloc_r>
 8006d3a:	b948      	cbnz	r0, 8006d50 <__smakebuf_r+0x44>
 8006d3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d40:	059a      	lsls	r2, r3, #22
 8006d42:	d4ef      	bmi.n	8006d24 <__smakebuf_r+0x18>
 8006d44:	f023 0303 	bic.w	r3, r3, #3
 8006d48:	f043 0302 	orr.w	r3, r3, #2
 8006d4c:	81a3      	strh	r3, [r4, #12]
 8006d4e:	e7e3      	b.n	8006d18 <__smakebuf_r+0xc>
 8006d50:	4b0d      	ldr	r3, [pc, #52]	; (8006d88 <__smakebuf_r+0x7c>)
 8006d52:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d54:	89a3      	ldrh	r3, [r4, #12]
 8006d56:	6020      	str	r0, [r4, #0]
 8006d58:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d5c:	81a3      	strh	r3, [r4, #12]
 8006d5e:	9b00      	ldr	r3, [sp, #0]
 8006d60:	6163      	str	r3, [r4, #20]
 8006d62:	9b01      	ldr	r3, [sp, #4]
 8006d64:	6120      	str	r0, [r4, #16]
 8006d66:	b15b      	cbz	r3, 8006d80 <__smakebuf_r+0x74>
 8006d68:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d6c:	4630      	mov	r0, r6
 8006d6e:	f000 fd23 	bl	80077b8 <_isatty_r>
 8006d72:	b128      	cbz	r0, 8006d80 <__smakebuf_r+0x74>
 8006d74:	89a3      	ldrh	r3, [r4, #12]
 8006d76:	f023 0303 	bic.w	r3, r3, #3
 8006d7a:	f043 0301 	orr.w	r3, r3, #1
 8006d7e:	81a3      	strh	r3, [r4, #12]
 8006d80:	89a0      	ldrh	r0, [r4, #12]
 8006d82:	4305      	orrs	r5, r0
 8006d84:	81a5      	strh	r5, [r4, #12]
 8006d86:	e7cd      	b.n	8006d24 <__smakebuf_r+0x18>
 8006d88:	08006b19 	.word	0x08006b19

08006d8c <__malloc_lock>:
 8006d8c:	4801      	ldr	r0, [pc, #4]	; (8006d94 <__malloc_lock+0x8>)
 8006d8e:	f7ff bf95 	b.w	8006cbc <__retarget_lock_acquire_recursive>
 8006d92:	bf00      	nop
 8006d94:	200023f4 	.word	0x200023f4

08006d98 <__malloc_unlock>:
 8006d98:	4801      	ldr	r0, [pc, #4]	; (8006da0 <__malloc_unlock+0x8>)
 8006d9a:	f7ff bf90 	b.w	8006cbe <__retarget_lock_release_recursive>
 8006d9e:	bf00      	nop
 8006da0:	200023f4 	.word	0x200023f4

08006da4 <__ssputs_r>:
 8006da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006da8:	688e      	ldr	r6, [r1, #8]
 8006daa:	429e      	cmp	r6, r3
 8006dac:	4682      	mov	sl, r0
 8006dae:	460c      	mov	r4, r1
 8006db0:	4690      	mov	r8, r2
 8006db2:	461f      	mov	r7, r3
 8006db4:	d838      	bhi.n	8006e28 <__ssputs_r+0x84>
 8006db6:	898a      	ldrh	r2, [r1, #12]
 8006db8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006dbc:	d032      	beq.n	8006e24 <__ssputs_r+0x80>
 8006dbe:	6825      	ldr	r5, [r4, #0]
 8006dc0:	6909      	ldr	r1, [r1, #16]
 8006dc2:	eba5 0901 	sub.w	r9, r5, r1
 8006dc6:	6965      	ldr	r5, [r4, #20]
 8006dc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006dcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006dd0:	3301      	adds	r3, #1
 8006dd2:	444b      	add	r3, r9
 8006dd4:	106d      	asrs	r5, r5, #1
 8006dd6:	429d      	cmp	r5, r3
 8006dd8:	bf38      	it	cc
 8006dda:	461d      	movcc	r5, r3
 8006ddc:	0553      	lsls	r3, r2, #21
 8006dde:	d531      	bpl.n	8006e44 <__ssputs_r+0xa0>
 8006de0:	4629      	mov	r1, r5
 8006de2:	f7ff fa3b 	bl	800625c <_malloc_r>
 8006de6:	4606      	mov	r6, r0
 8006de8:	b950      	cbnz	r0, 8006e00 <__ssputs_r+0x5c>
 8006dea:	230c      	movs	r3, #12
 8006dec:	f8ca 3000 	str.w	r3, [sl]
 8006df0:	89a3      	ldrh	r3, [r4, #12]
 8006df2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006df6:	81a3      	strh	r3, [r4, #12]
 8006df8:	f04f 30ff 	mov.w	r0, #4294967295
 8006dfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e00:	6921      	ldr	r1, [r4, #16]
 8006e02:	464a      	mov	r2, r9
 8006e04:	f7ff f9a8 	bl	8006158 <memcpy>
 8006e08:	89a3      	ldrh	r3, [r4, #12]
 8006e0a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006e0e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e12:	81a3      	strh	r3, [r4, #12]
 8006e14:	6126      	str	r6, [r4, #16]
 8006e16:	6165      	str	r5, [r4, #20]
 8006e18:	444e      	add	r6, r9
 8006e1a:	eba5 0509 	sub.w	r5, r5, r9
 8006e1e:	6026      	str	r6, [r4, #0]
 8006e20:	60a5      	str	r5, [r4, #8]
 8006e22:	463e      	mov	r6, r7
 8006e24:	42be      	cmp	r6, r7
 8006e26:	d900      	bls.n	8006e2a <__ssputs_r+0x86>
 8006e28:	463e      	mov	r6, r7
 8006e2a:	6820      	ldr	r0, [r4, #0]
 8006e2c:	4632      	mov	r2, r6
 8006e2e:	4641      	mov	r1, r8
 8006e30:	f000 fce4 	bl	80077fc <memmove>
 8006e34:	68a3      	ldr	r3, [r4, #8]
 8006e36:	1b9b      	subs	r3, r3, r6
 8006e38:	60a3      	str	r3, [r4, #8]
 8006e3a:	6823      	ldr	r3, [r4, #0]
 8006e3c:	4433      	add	r3, r6
 8006e3e:	6023      	str	r3, [r4, #0]
 8006e40:	2000      	movs	r0, #0
 8006e42:	e7db      	b.n	8006dfc <__ssputs_r+0x58>
 8006e44:	462a      	mov	r2, r5
 8006e46:	f000 fcf3 	bl	8007830 <_realloc_r>
 8006e4a:	4606      	mov	r6, r0
 8006e4c:	2800      	cmp	r0, #0
 8006e4e:	d1e1      	bne.n	8006e14 <__ssputs_r+0x70>
 8006e50:	6921      	ldr	r1, [r4, #16]
 8006e52:	4650      	mov	r0, sl
 8006e54:	f7ff f996 	bl	8006184 <_free_r>
 8006e58:	e7c7      	b.n	8006dea <__ssputs_r+0x46>
	...

08006e5c <_svfiprintf_r>:
 8006e5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e60:	4698      	mov	r8, r3
 8006e62:	898b      	ldrh	r3, [r1, #12]
 8006e64:	061b      	lsls	r3, r3, #24
 8006e66:	b09d      	sub	sp, #116	; 0x74
 8006e68:	4607      	mov	r7, r0
 8006e6a:	460d      	mov	r5, r1
 8006e6c:	4614      	mov	r4, r2
 8006e6e:	d50e      	bpl.n	8006e8e <_svfiprintf_r+0x32>
 8006e70:	690b      	ldr	r3, [r1, #16]
 8006e72:	b963      	cbnz	r3, 8006e8e <_svfiprintf_r+0x32>
 8006e74:	2140      	movs	r1, #64	; 0x40
 8006e76:	f7ff f9f1 	bl	800625c <_malloc_r>
 8006e7a:	6028      	str	r0, [r5, #0]
 8006e7c:	6128      	str	r0, [r5, #16]
 8006e7e:	b920      	cbnz	r0, 8006e8a <_svfiprintf_r+0x2e>
 8006e80:	230c      	movs	r3, #12
 8006e82:	603b      	str	r3, [r7, #0]
 8006e84:	f04f 30ff 	mov.w	r0, #4294967295
 8006e88:	e0d1      	b.n	800702e <_svfiprintf_r+0x1d2>
 8006e8a:	2340      	movs	r3, #64	; 0x40
 8006e8c:	616b      	str	r3, [r5, #20]
 8006e8e:	2300      	movs	r3, #0
 8006e90:	9309      	str	r3, [sp, #36]	; 0x24
 8006e92:	2320      	movs	r3, #32
 8006e94:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006e98:	f8cd 800c 	str.w	r8, [sp, #12]
 8006e9c:	2330      	movs	r3, #48	; 0x30
 8006e9e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007048 <_svfiprintf_r+0x1ec>
 8006ea2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006ea6:	f04f 0901 	mov.w	r9, #1
 8006eaa:	4623      	mov	r3, r4
 8006eac:	469a      	mov	sl, r3
 8006eae:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006eb2:	b10a      	cbz	r2, 8006eb8 <_svfiprintf_r+0x5c>
 8006eb4:	2a25      	cmp	r2, #37	; 0x25
 8006eb6:	d1f9      	bne.n	8006eac <_svfiprintf_r+0x50>
 8006eb8:	ebba 0b04 	subs.w	fp, sl, r4
 8006ebc:	d00b      	beq.n	8006ed6 <_svfiprintf_r+0x7a>
 8006ebe:	465b      	mov	r3, fp
 8006ec0:	4622      	mov	r2, r4
 8006ec2:	4629      	mov	r1, r5
 8006ec4:	4638      	mov	r0, r7
 8006ec6:	f7ff ff6d 	bl	8006da4 <__ssputs_r>
 8006eca:	3001      	adds	r0, #1
 8006ecc:	f000 80aa 	beq.w	8007024 <_svfiprintf_r+0x1c8>
 8006ed0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006ed2:	445a      	add	r2, fp
 8006ed4:	9209      	str	r2, [sp, #36]	; 0x24
 8006ed6:	f89a 3000 	ldrb.w	r3, [sl]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f000 80a2 	beq.w	8007024 <_svfiprintf_r+0x1c8>
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ee6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006eea:	f10a 0a01 	add.w	sl, sl, #1
 8006eee:	9304      	str	r3, [sp, #16]
 8006ef0:	9307      	str	r3, [sp, #28]
 8006ef2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006ef6:	931a      	str	r3, [sp, #104]	; 0x68
 8006ef8:	4654      	mov	r4, sl
 8006efa:	2205      	movs	r2, #5
 8006efc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006f00:	4851      	ldr	r0, [pc, #324]	; (8007048 <_svfiprintf_r+0x1ec>)
 8006f02:	f7f9 f97d 	bl	8000200 <memchr>
 8006f06:	9a04      	ldr	r2, [sp, #16]
 8006f08:	b9d8      	cbnz	r0, 8006f42 <_svfiprintf_r+0xe6>
 8006f0a:	06d0      	lsls	r0, r2, #27
 8006f0c:	bf44      	itt	mi
 8006f0e:	2320      	movmi	r3, #32
 8006f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f14:	0711      	lsls	r1, r2, #28
 8006f16:	bf44      	itt	mi
 8006f18:	232b      	movmi	r3, #43	; 0x2b
 8006f1a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006f1e:	f89a 3000 	ldrb.w	r3, [sl]
 8006f22:	2b2a      	cmp	r3, #42	; 0x2a
 8006f24:	d015      	beq.n	8006f52 <_svfiprintf_r+0xf6>
 8006f26:	9a07      	ldr	r2, [sp, #28]
 8006f28:	4654      	mov	r4, sl
 8006f2a:	2000      	movs	r0, #0
 8006f2c:	f04f 0c0a 	mov.w	ip, #10
 8006f30:	4621      	mov	r1, r4
 8006f32:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006f36:	3b30      	subs	r3, #48	; 0x30
 8006f38:	2b09      	cmp	r3, #9
 8006f3a:	d94e      	bls.n	8006fda <_svfiprintf_r+0x17e>
 8006f3c:	b1b0      	cbz	r0, 8006f6c <_svfiprintf_r+0x110>
 8006f3e:	9207      	str	r2, [sp, #28]
 8006f40:	e014      	b.n	8006f6c <_svfiprintf_r+0x110>
 8006f42:	eba0 0308 	sub.w	r3, r0, r8
 8006f46:	fa09 f303 	lsl.w	r3, r9, r3
 8006f4a:	4313      	orrs	r3, r2
 8006f4c:	9304      	str	r3, [sp, #16]
 8006f4e:	46a2      	mov	sl, r4
 8006f50:	e7d2      	b.n	8006ef8 <_svfiprintf_r+0x9c>
 8006f52:	9b03      	ldr	r3, [sp, #12]
 8006f54:	1d19      	adds	r1, r3, #4
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	9103      	str	r1, [sp, #12]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	bfbb      	ittet	lt
 8006f5e:	425b      	neglt	r3, r3
 8006f60:	f042 0202 	orrlt.w	r2, r2, #2
 8006f64:	9307      	strge	r3, [sp, #28]
 8006f66:	9307      	strlt	r3, [sp, #28]
 8006f68:	bfb8      	it	lt
 8006f6a:	9204      	strlt	r2, [sp, #16]
 8006f6c:	7823      	ldrb	r3, [r4, #0]
 8006f6e:	2b2e      	cmp	r3, #46	; 0x2e
 8006f70:	d10c      	bne.n	8006f8c <_svfiprintf_r+0x130>
 8006f72:	7863      	ldrb	r3, [r4, #1]
 8006f74:	2b2a      	cmp	r3, #42	; 0x2a
 8006f76:	d135      	bne.n	8006fe4 <_svfiprintf_r+0x188>
 8006f78:	9b03      	ldr	r3, [sp, #12]
 8006f7a:	1d1a      	adds	r2, r3, #4
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	9203      	str	r2, [sp, #12]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	bfb8      	it	lt
 8006f84:	f04f 33ff 	movlt.w	r3, #4294967295
 8006f88:	3402      	adds	r4, #2
 8006f8a:	9305      	str	r3, [sp, #20]
 8006f8c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007058 <_svfiprintf_r+0x1fc>
 8006f90:	7821      	ldrb	r1, [r4, #0]
 8006f92:	2203      	movs	r2, #3
 8006f94:	4650      	mov	r0, sl
 8006f96:	f7f9 f933 	bl	8000200 <memchr>
 8006f9a:	b140      	cbz	r0, 8006fae <_svfiprintf_r+0x152>
 8006f9c:	2340      	movs	r3, #64	; 0x40
 8006f9e:	eba0 000a 	sub.w	r0, r0, sl
 8006fa2:	fa03 f000 	lsl.w	r0, r3, r0
 8006fa6:	9b04      	ldr	r3, [sp, #16]
 8006fa8:	4303      	orrs	r3, r0
 8006faa:	3401      	adds	r4, #1
 8006fac:	9304      	str	r3, [sp, #16]
 8006fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fb2:	4826      	ldr	r0, [pc, #152]	; (800704c <_svfiprintf_r+0x1f0>)
 8006fb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006fb8:	2206      	movs	r2, #6
 8006fba:	f7f9 f921 	bl	8000200 <memchr>
 8006fbe:	2800      	cmp	r0, #0
 8006fc0:	d038      	beq.n	8007034 <_svfiprintf_r+0x1d8>
 8006fc2:	4b23      	ldr	r3, [pc, #140]	; (8007050 <_svfiprintf_r+0x1f4>)
 8006fc4:	bb1b      	cbnz	r3, 800700e <_svfiprintf_r+0x1b2>
 8006fc6:	9b03      	ldr	r3, [sp, #12]
 8006fc8:	3307      	adds	r3, #7
 8006fca:	f023 0307 	bic.w	r3, r3, #7
 8006fce:	3308      	adds	r3, #8
 8006fd0:	9303      	str	r3, [sp, #12]
 8006fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006fd4:	4433      	add	r3, r6
 8006fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8006fd8:	e767      	b.n	8006eaa <_svfiprintf_r+0x4e>
 8006fda:	fb0c 3202 	mla	r2, ip, r2, r3
 8006fde:	460c      	mov	r4, r1
 8006fe0:	2001      	movs	r0, #1
 8006fe2:	e7a5      	b.n	8006f30 <_svfiprintf_r+0xd4>
 8006fe4:	2300      	movs	r3, #0
 8006fe6:	3401      	adds	r4, #1
 8006fe8:	9305      	str	r3, [sp, #20]
 8006fea:	4619      	mov	r1, r3
 8006fec:	f04f 0c0a 	mov.w	ip, #10
 8006ff0:	4620      	mov	r0, r4
 8006ff2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ff6:	3a30      	subs	r2, #48	; 0x30
 8006ff8:	2a09      	cmp	r2, #9
 8006ffa:	d903      	bls.n	8007004 <_svfiprintf_r+0x1a8>
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d0c5      	beq.n	8006f8c <_svfiprintf_r+0x130>
 8007000:	9105      	str	r1, [sp, #20]
 8007002:	e7c3      	b.n	8006f8c <_svfiprintf_r+0x130>
 8007004:	fb0c 2101 	mla	r1, ip, r1, r2
 8007008:	4604      	mov	r4, r0
 800700a:	2301      	movs	r3, #1
 800700c:	e7f0      	b.n	8006ff0 <_svfiprintf_r+0x194>
 800700e:	ab03      	add	r3, sp, #12
 8007010:	9300      	str	r3, [sp, #0]
 8007012:	462a      	mov	r2, r5
 8007014:	4b0f      	ldr	r3, [pc, #60]	; (8007054 <_svfiprintf_r+0x1f8>)
 8007016:	a904      	add	r1, sp, #16
 8007018:	4638      	mov	r0, r7
 800701a:	f3af 8000 	nop.w
 800701e:	1c42      	adds	r2, r0, #1
 8007020:	4606      	mov	r6, r0
 8007022:	d1d6      	bne.n	8006fd2 <_svfiprintf_r+0x176>
 8007024:	89ab      	ldrh	r3, [r5, #12]
 8007026:	065b      	lsls	r3, r3, #25
 8007028:	f53f af2c 	bmi.w	8006e84 <_svfiprintf_r+0x28>
 800702c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800702e:	b01d      	add	sp, #116	; 0x74
 8007030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007034:	ab03      	add	r3, sp, #12
 8007036:	9300      	str	r3, [sp, #0]
 8007038:	462a      	mov	r2, r5
 800703a:	4b06      	ldr	r3, [pc, #24]	; (8007054 <_svfiprintf_r+0x1f8>)
 800703c:	a904      	add	r1, sp, #16
 800703e:	4638      	mov	r0, r7
 8007040:	f000 f9d4 	bl	80073ec <_printf_i>
 8007044:	e7eb      	b.n	800701e <_svfiprintf_r+0x1c2>
 8007046:	bf00      	nop
 8007048:	08008230 	.word	0x08008230
 800704c:	0800823a 	.word	0x0800823a
 8007050:	00000000 	.word	0x00000000
 8007054:	08006da5 	.word	0x08006da5
 8007058:	08008236 	.word	0x08008236

0800705c <__sfputc_r>:
 800705c:	6893      	ldr	r3, [r2, #8]
 800705e:	3b01      	subs	r3, #1
 8007060:	2b00      	cmp	r3, #0
 8007062:	b410      	push	{r4}
 8007064:	6093      	str	r3, [r2, #8]
 8007066:	da08      	bge.n	800707a <__sfputc_r+0x1e>
 8007068:	6994      	ldr	r4, [r2, #24]
 800706a:	42a3      	cmp	r3, r4
 800706c:	db01      	blt.n	8007072 <__sfputc_r+0x16>
 800706e:	290a      	cmp	r1, #10
 8007070:	d103      	bne.n	800707a <__sfputc_r+0x1e>
 8007072:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007076:	f7ff bba9 	b.w	80067cc <__swbuf_r>
 800707a:	6813      	ldr	r3, [r2, #0]
 800707c:	1c58      	adds	r0, r3, #1
 800707e:	6010      	str	r0, [r2, #0]
 8007080:	7019      	strb	r1, [r3, #0]
 8007082:	4608      	mov	r0, r1
 8007084:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007088:	4770      	bx	lr

0800708a <__sfputs_r>:
 800708a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800708c:	4606      	mov	r6, r0
 800708e:	460f      	mov	r7, r1
 8007090:	4614      	mov	r4, r2
 8007092:	18d5      	adds	r5, r2, r3
 8007094:	42ac      	cmp	r4, r5
 8007096:	d101      	bne.n	800709c <__sfputs_r+0x12>
 8007098:	2000      	movs	r0, #0
 800709a:	e007      	b.n	80070ac <__sfputs_r+0x22>
 800709c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80070a0:	463a      	mov	r2, r7
 80070a2:	4630      	mov	r0, r6
 80070a4:	f7ff ffda 	bl	800705c <__sfputc_r>
 80070a8:	1c43      	adds	r3, r0, #1
 80070aa:	d1f3      	bne.n	8007094 <__sfputs_r+0xa>
 80070ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080070b0 <_vfiprintf_r>:
 80070b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b4:	460d      	mov	r5, r1
 80070b6:	b09d      	sub	sp, #116	; 0x74
 80070b8:	4614      	mov	r4, r2
 80070ba:	4698      	mov	r8, r3
 80070bc:	4606      	mov	r6, r0
 80070be:	b118      	cbz	r0, 80070c8 <_vfiprintf_r+0x18>
 80070c0:	6983      	ldr	r3, [r0, #24]
 80070c2:	b90b      	cbnz	r3, 80070c8 <_vfiprintf_r+0x18>
 80070c4:	f7ff fd5c 	bl	8006b80 <__sinit>
 80070c8:	4b89      	ldr	r3, [pc, #548]	; (80072f0 <_vfiprintf_r+0x240>)
 80070ca:	429d      	cmp	r5, r3
 80070cc:	d11b      	bne.n	8007106 <_vfiprintf_r+0x56>
 80070ce:	6875      	ldr	r5, [r6, #4]
 80070d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070d2:	07d9      	lsls	r1, r3, #31
 80070d4:	d405      	bmi.n	80070e2 <_vfiprintf_r+0x32>
 80070d6:	89ab      	ldrh	r3, [r5, #12]
 80070d8:	059a      	lsls	r2, r3, #22
 80070da:	d402      	bmi.n	80070e2 <_vfiprintf_r+0x32>
 80070dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80070de:	f7ff fded 	bl	8006cbc <__retarget_lock_acquire_recursive>
 80070e2:	89ab      	ldrh	r3, [r5, #12]
 80070e4:	071b      	lsls	r3, r3, #28
 80070e6:	d501      	bpl.n	80070ec <_vfiprintf_r+0x3c>
 80070e8:	692b      	ldr	r3, [r5, #16]
 80070ea:	b9eb      	cbnz	r3, 8007128 <_vfiprintf_r+0x78>
 80070ec:	4629      	mov	r1, r5
 80070ee:	4630      	mov	r0, r6
 80070f0:	f7ff fbbe 	bl	8006870 <__swsetup_r>
 80070f4:	b1c0      	cbz	r0, 8007128 <_vfiprintf_r+0x78>
 80070f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80070f8:	07dc      	lsls	r4, r3, #31
 80070fa:	d50e      	bpl.n	800711a <_vfiprintf_r+0x6a>
 80070fc:	f04f 30ff 	mov.w	r0, #4294967295
 8007100:	b01d      	add	sp, #116	; 0x74
 8007102:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007106:	4b7b      	ldr	r3, [pc, #492]	; (80072f4 <_vfiprintf_r+0x244>)
 8007108:	429d      	cmp	r5, r3
 800710a:	d101      	bne.n	8007110 <_vfiprintf_r+0x60>
 800710c:	68b5      	ldr	r5, [r6, #8]
 800710e:	e7df      	b.n	80070d0 <_vfiprintf_r+0x20>
 8007110:	4b79      	ldr	r3, [pc, #484]	; (80072f8 <_vfiprintf_r+0x248>)
 8007112:	429d      	cmp	r5, r3
 8007114:	bf08      	it	eq
 8007116:	68f5      	ldreq	r5, [r6, #12]
 8007118:	e7da      	b.n	80070d0 <_vfiprintf_r+0x20>
 800711a:	89ab      	ldrh	r3, [r5, #12]
 800711c:	0598      	lsls	r0, r3, #22
 800711e:	d4ed      	bmi.n	80070fc <_vfiprintf_r+0x4c>
 8007120:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007122:	f7ff fdcc 	bl	8006cbe <__retarget_lock_release_recursive>
 8007126:	e7e9      	b.n	80070fc <_vfiprintf_r+0x4c>
 8007128:	2300      	movs	r3, #0
 800712a:	9309      	str	r3, [sp, #36]	; 0x24
 800712c:	2320      	movs	r3, #32
 800712e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007132:	f8cd 800c 	str.w	r8, [sp, #12]
 8007136:	2330      	movs	r3, #48	; 0x30
 8007138:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80072fc <_vfiprintf_r+0x24c>
 800713c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007140:	f04f 0901 	mov.w	r9, #1
 8007144:	4623      	mov	r3, r4
 8007146:	469a      	mov	sl, r3
 8007148:	f813 2b01 	ldrb.w	r2, [r3], #1
 800714c:	b10a      	cbz	r2, 8007152 <_vfiprintf_r+0xa2>
 800714e:	2a25      	cmp	r2, #37	; 0x25
 8007150:	d1f9      	bne.n	8007146 <_vfiprintf_r+0x96>
 8007152:	ebba 0b04 	subs.w	fp, sl, r4
 8007156:	d00b      	beq.n	8007170 <_vfiprintf_r+0xc0>
 8007158:	465b      	mov	r3, fp
 800715a:	4622      	mov	r2, r4
 800715c:	4629      	mov	r1, r5
 800715e:	4630      	mov	r0, r6
 8007160:	f7ff ff93 	bl	800708a <__sfputs_r>
 8007164:	3001      	adds	r0, #1
 8007166:	f000 80aa 	beq.w	80072be <_vfiprintf_r+0x20e>
 800716a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800716c:	445a      	add	r2, fp
 800716e:	9209      	str	r2, [sp, #36]	; 0x24
 8007170:	f89a 3000 	ldrb.w	r3, [sl]
 8007174:	2b00      	cmp	r3, #0
 8007176:	f000 80a2 	beq.w	80072be <_vfiprintf_r+0x20e>
 800717a:	2300      	movs	r3, #0
 800717c:	f04f 32ff 	mov.w	r2, #4294967295
 8007180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007184:	f10a 0a01 	add.w	sl, sl, #1
 8007188:	9304      	str	r3, [sp, #16]
 800718a:	9307      	str	r3, [sp, #28]
 800718c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007190:	931a      	str	r3, [sp, #104]	; 0x68
 8007192:	4654      	mov	r4, sl
 8007194:	2205      	movs	r2, #5
 8007196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800719a:	4858      	ldr	r0, [pc, #352]	; (80072fc <_vfiprintf_r+0x24c>)
 800719c:	f7f9 f830 	bl	8000200 <memchr>
 80071a0:	9a04      	ldr	r2, [sp, #16]
 80071a2:	b9d8      	cbnz	r0, 80071dc <_vfiprintf_r+0x12c>
 80071a4:	06d1      	lsls	r1, r2, #27
 80071a6:	bf44      	itt	mi
 80071a8:	2320      	movmi	r3, #32
 80071aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071ae:	0713      	lsls	r3, r2, #28
 80071b0:	bf44      	itt	mi
 80071b2:	232b      	movmi	r3, #43	; 0x2b
 80071b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80071b8:	f89a 3000 	ldrb.w	r3, [sl]
 80071bc:	2b2a      	cmp	r3, #42	; 0x2a
 80071be:	d015      	beq.n	80071ec <_vfiprintf_r+0x13c>
 80071c0:	9a07      	ldr	r2, [sp, #28]
 80071c2:	4654      	mov	r4, sl
 80071c4:	2000      	movs	r0, #0
 80071c6:	f04f 0c0a 	mov.w	ip, #10
 80071ca:	4621      	mov	r1, r4
 80071cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80071d0:	3b30      	subs	r3, #48	; 0x30
 80071d2:	2b09      	cmp	r3, #9
 80071d4:	d94e      	bls.n	8007274 <_vfiprintf_r+0x1c4>
 80071d6:	b1b0      	cbz	r0, 8007206 <_vfiprintf_r+0x156>
 80071d8:	9207      	str	r2, [sp, #28]
 80071da:	e014      	b.n	8007206 <_vfiprintf_r+0x156>
 80071dc:	eba0 0308 	sub.w	r3, r0, r8
 80071e0:	fa09 f303 	lsl.w	r3, r9, r3
 80071e4:	4313      	orrs	r3, r2
 80071e6:	9304      	str	r3, [sp, #16]
 80071e8:	46a2      	mov	sl, r4
 80071ea:	e7d2      	b.n	8007192 <_vfiprintf_r+0xe2>
 80071ec:	9b03      	ldr	r3, [sp, #12]
 80071ee:	1d19      	adds	r1, r3, #4
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	9103      	str	r1, [sp, #12]
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	bfbb      	ittet	lt
 80071f8:	425b      	neglt	r3, r3
 80071fa:	f042 0202 	orrlt.w	r2, r2, #2
 80071fe:	9307      	strge	r3, [sp, #28]
 8007200:	9307      	strlt	r3, [sp, #28]
 8007202:	bfb8      	it	lt
 8007204:	9204      	strlt	r2, [sp, #16]
 8007206:	7823      	ldrb	r3, [r4, #0]
 8007208:	2b2e      	cmp	r3, #46	; 0x2e
 800720a:	d10c      	bne.n	8007226 <_vfiprintf_r+0x176>
 800720c:	7863      	ldrb	r3, [r4, #1]
 800720e:	2b2a      	cmp	r3, #42	; 0x2a
 8007210:	d135      	bne.n	800727e <_vfiprintf_r+0x1ce>
 8007212:	9b03      	ldr	r3, [sp, #12]
 8007214:	1d1a      	adds	r2, r3, #4
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	9203      	str	r2, [sp, #12]
 800721a:	2b00      	cmp	r3, #0
 800721c:	bfb8      	it	lt
 800721e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007222:	3402      	adds	r4, #2
 8007224:	9305      	str	r3, [sp, #20]
 8007226:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800730c <_vfiprintf_r+0x25c>
 800722a:	7821      	ldrb	r1, [r4, #0]
 800722c:	2203      	movs	r2, #3
 800722e:	4650      	mov	r0, sl
 8007230:	f7f8 ffe6 	bl	8000200 <memchr>
 8007234:	b140      	cbz	r0, 8007248 <_vfiprintf_r+0x198>
 8007236:	2340      	movs	r3, #64	; 0x40
 8007238:	eba0 000a 	sub.w	r0, r0, sl
 800723c:	fa03 f000 	lsl.w	r0, r3, r0
 8007240:	9b04      	ldr	r3, [sp, #16]
 8007242:	4303      	orrs	r3, r0
 8007244:	3401      	adds	r4, #1
 8007246:	9304      	str	r3, [sp, #16]
 8007248:	f814 1b01 	ldrb.w	r1, [r4], #1
 800724c:	482c      	ldr	r0, [pc, #176]	; (8007300 <_vfiprintf_r+0x250>)
 800724e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007252:	2206      	movs	r2, #6
 8007254:	f7f8 ffd4 	bl	8000200 <memchr>
 8007258:	2800      	cmp	r0, #0
 800725a:	d03f      	beq.n	80072dc <_vfiprintf_r+0x22c>
 800725c:	4b29      	ldr	r3, [pc, #164]	; (8007304 <_vfiprintf_r+0x254>)
 800725e:	bb1b      	cbnz	r3, 80072a8 <_vfiprintf_r+0x1f8>
 8007260:	9b03      	ldr	r3, [sp, #12]
 8007262:	3307      	adds	r3, #7
 8007264:	f023 0307 	bic.w	r3, r3, #7
 8007268:	3308      	adds	r3, #8
 800726a:	9303      	str	r3, [sp, #12]
 800726c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800726e:	443b      	add	r3, r7
 8007270:	9309      	str	r3, [sp, #36]	; 0x24
 8007272:	e767      	b.n	8007144 <_vfiprintf_r+0x94>
 8007274:	fb0c 3202 	mla	r2, ip, r2, r3
 8007278:	460c      	mov	r4, r1
 800727a:	2001      	movs	r0, #1
 800727c:	e7a5      	b.n	80071ca <_vfiprintf_r+0x11a>
 800727e:	2300      	movs	r3, #0
 8007280:	3401      	adds	r4, #1
 8007282:	9305      	str	r3, [sp, #20]
 8007284:	4619      	mov	r1, r3
 8007286:	f04f 0c0a 	mov.w	ip, #10
 800728a:	4620      	mov	r0, r4
 800728c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007290:	3a30      	subs	r2, #48	; 0x30
 8007292:	2a09      	cmp	r2, #9
 8007294:	d903      	bls.n	800729e <_vfiprintf_r+0x1ee>
 8007296:	2b00      	cmp	r3, #0
 8007298:	d0c5      	beq.n	8007226 <_vfiprintf_r+0x176>
 800729a:	9105      	str	r1, [sp, #20]
 800729c:	e7c3      	b.n	8007226 <_vfiprintf_r+0x176>
 800729e:	fb0c 2101 	mla	r1, ip, r1, r2
 80072a2:	4604      	mov	r4, r0
 80072a4:	2301      	movs	r3, #1
 80072a6:	e7f0      	b.n	800728a <_vfiprintf_r+0x1da>
 80072a8:	ab03      	add	r3, sp, #12
 80072aa:	9300      	str	r3, [sp, #0]
 80072ac:	462a      	mov	r2, r5
 80072ae:	4b16      	ldr	r3, [pc, #88]	; (8007308 <_vfiprintf_r+0x258>)
 80072b0:	a904      	add	r1, sp, #16
 80072b2:	4630      	mov	r0, r6
 80072b4:	f3af 8000 	nop.w
 80072b8:	4607      	mov	r7, r0
 80072ba:	1c78      	adds	r0, r7, #1
 80072bc:	d1d6      	bne.n	800726c <_vfiprintf_r+0x1bc>
 80072be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80072c0:	07d9      	lsls	r1, r3, #31
 80072c2:	d405      	bmi.n	80072d0 <_vfiprintf_r+0x220>
 80072c4:	89ab      	ldrh	r3, [r5, #12]
 80072c6:	059a      	lsls	r2, r3, #22
 80072c8:	d402      	bmi.n	80072d0 <_vfiprintf_r+0x220>
 80072ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80072cc:	f7ff fcf7 	bl	8006cbe <__retarget_lock_release_recursive>
 80072d0:	89ab      	ldrh	r3, [r5, #12]
 80072d2:	065b      	lsls	r3, r3, #25
 80072d4:	f53f af12 	bmi.w	80070fc <_vfiprintf_r+0x4c>
 80072d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80072da:	e711      	b.n	8007100 <_vfiprintf_r+0x50>
 80072dc:	ab03      	add	r3, sp, #12
 80072de:	9300      	str	r3, [sp, #0]
 80072e0:	462a      	mov	r2, r5
 80072e2:	4b09      	ldr	r3, [pc, #36]	; (8007308 <_vfiprintf_r+0x258>)
 80072e4:	a904      	add	r1, sp, #16
 80072e6:	4630      	mov	r0, r6
 80072e8:	f000 f880 	bl	80073ec <_printf_i>
 80072ec:	e7e4      	b.n	80072b8 <_vfiprintf_r+0x208>
 80072ee:	bf00      	nop
 80072f0:	080081f0 	.word	0x080081f0
 80072f4:	08008210 	.word	0x08008210
 80072f8:	080081d0 	.word	0x080081d0
 80072fc:	08008230 	.word	0x08008230
 8007300:	0800823a 	.word	0x0800823a
 8007304:	00000000 	.word	0x00000000
 8007308:	0800708b 	.word	0x0800708b
 800730c:	08008236 	.word	0x08008236

08007310 <_printf_common>:
 8007310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007314:	4616      	mov	r6, r2
 8007316:	4699      	mov	r9, r3
 8007318:	688a      	ldr	r2, [r1, #8]
 800731a:	690b      	ldr	r3, [r1, #16]
 800731c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007320:	4293      	cmp	r3, r2
 8007322:	bfb8      	it	lt
 8007324:	4613      	movlt	r3, r2
 8007326:	6033      	str	r3, [r6, #0]
 8007328:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800732c:	4607      	mov	r7, r0
 800732e:	460c      	mov	r4, r1
 8007330:	b10a      	cbz	r2, 8007336 <_printf_common+0x26>
 8007332:	3301      	adds	r3, #1
 8007334:	6033      	str	r3, [r6, #0]
 8007336:	6823      	ldr	r3, [r4, #0]
 8007338:	0699      	lsls	r1, r3, #26
 800733a:	bf42      	ittt	mi
 800733c:	6833      	ldrmi	r3, [r6, #0]
 800733e:	3302      	addmi	r3, #2
 8007340:	6033      	strmi	r3, [r6, #0]
 8007342:	6825      	ldr	r5, [r4, #0]
 8007344:	f015 0506 	ands.w	r5, r5, #6
 8007348:	d106      	bne.n	8007358 <_printf_common+0x48>
 800734a:	f104 0a19 	add.w	sl, r4, #25
 800734e:	68e3      	ldr	r3, [r4, #12]
 8007350:	6832      	ldr	r2, [r6, #0]
 8007352:	1a9b      	subs	r3, r3, r2
 8007354:	42ab      	cmp	r3, r5
 8007356:	dc26      	bgt.n	80073a6 <_printf_common+0x96>
 8007358:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800735c:	1e13      	subs	r3, r2, #0
 800735e:	6822      	ldr	r2, [r4, #0]
 8007360:	bf18      	it	ne
 8007362:	2301      	movne	r3, #1
 8007364:	0692      	lsls	r2, r2, #26
 8007366:	d42b      	bmi.n	80073c0 <_printf_common+0xb0>
 8007368:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800736c:	4649      	mov	r1, r9
 800736e:	4638      	mov	r0, r7
 8007370:	47c0      	blx	r8
 8007372:	3001      	adds	r0, #1
 8007374:	d01e      	beq.n	80073b4 <_printf_common+0xa4>
 8007376:	6823      	ldr	r3, [r4, #0]
 8007378:	68e5      	ldr	r5, [r4, #12]
 800737a:	6832      	ldr	r2, [r6, #0]
 800737c:	f003 0306 	and.w	r3, r3, #6
 8007380:	2b04      	cmp	r3, #4
 8007382:	bf08      	it	eq
 8007384:	1aad      	subeq	r5, r5, r2
 8007386:	68a3      	ldr	r3, [r4, #8]
 8007388:	6922      	ldr	r2, [r4, #16]
 800738a:	bf0c      	ite	eq
 800738c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007390:	2500      	movne	r5, #0
 8007392:	4293      	cmp	r3, r2
 8007394:	bfc4      	itt	gt
 8007396:	1a9b      	subgt	r3, r3, r2
 8007398:	18ed      	addgt	r5, r5, r3
 800739a:	2600      	movs	r6, #0
 800739c:	341a      	adds	r4, #26
 800739e:	42b5      	cmp	r5, r6
 80073a0:	d11a      	bne.n	80073d8 <_printf_common+0xc8>
 80073a2:	2000      	movs	r0, #0
 80073a4:	e008      	b.n	80073b8 <_printf_common+0xa8>
 80073a6:	2301      	movs	r3, #1
 80073a8:	4652      	mov	r2, sl
 80073aa:	4649      	mov	r1, r9
 80073ac:	4638      	mov	r0, r7
 80073ae:	47c0      	blx	r8
 80073b0:	3001      	adds	r0, #1
 80073b2:	d103      	bne.n	80073bc <_printf_common+0xac>
 80073b4:	f04f 30ff 	mov.w	r0, #4294967295
 80073b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80073bc:	3501      	adds	r5, #1
 80073be:	e7c6      	b.n	800734e <_printf_common+0x3e>
 80073c0:	18e1      	adds	r1, r4, r3
 80073c2:	1c5a      	adds	r2, r3, #1
 80073c4:	2030      	movs	r0, #48	; 0x30
 80073c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80073ca:	4422      	add	r2, r4
 80073cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80073d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80073d4:	3302      	adds	r3, #2
 80073d6:	e7c7      	b.n	8007368 <_printf_common+0x58>
 80073d8:	2301      	movs	r3, #1
 80073da:	4622      	mov	r2, r4
 80073dc:	4649      	mov	r1, r9
 80073de:	4638      	mov	r0, r7
 80073e0:	47c0      	blx	r8
 80073e2:	3001      	adds	r0, #1
 80073e4:	d0e6      	beq.n	80073b4 <_printf_common+0xa4>
 80073e6:	3601      	adds	r6, #1
 80073e8:	e7d9      	b.n	800739e <_printf_common+0x8e>
	...

080073ec <_printf_i>:
 80073ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073f0:	7e0f      	ldrb	r7, [r1, #24]
 80073f2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80073f4:	2f78      	cmp	r7, #120	; 0x78
 80073f6:	4691      	mov	r9, r2
 80073f8:	4680      	mov	r8, r0
 80073fa:	460c      	mov	r4, r1
 80073fc:	469a      	mov	sl, r3
 80073fe:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007402:	d807      	bhi.n	8007414 <_printf_i+0x28>
 8007404:	2f62      	cmp	r7, #98	; 0x62
 8007406:	d80a      	bhi.n	800741e <_printf_i+0x32>
 8007408:	2f00      	cmp	r7, #0
 800740a:	f000 80d8 	beq.w	80075be <_printf_i+0x1d2>
 800740e:	2f58      	cmp	r7, #88	; 0x58
 8007410:	f000 80a3 	beq.w	800755a <_printf_i+0x16e>
 8007414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007418:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800741c:	e03a      	b.n	8007494 <_printf_i+0xa8>
 800741e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007422:	2b15      	cmp	r3, #21
 8007424:	d8f6      	bhi.n	8007414 <_printf_i+0x28>
 8007426:	a101      	add	r1, pc, #4	; (adr r1, 800742c <_printf_i+0x40>)
 8007428:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800742c:	08007485 	.word	0x08007485
 8007430:	08007499 	.word	0x08007499
 8007434:	08007415 	.word	0x08007415
 8007438:	08007415 	.word	0x08007415
 800743c:	08007415 	.word	0x08007415
 8007440:	08007415 	.word	0x08007415
 8007444:	08007499 	.word	0x08007499
 8007448:	08007415 	.word	0x08007415
 800744c:	08007415 	.word	0x08007415
 8007450:	08007415 	.word	0x08007415
 8007454:	08007415 	.word	0x08007415
 8007458:	080075a5 	.word	0x080075a5
 800745c:	080074c9 	.word	0x080074c9
 8007460:	08007587 	.word	0x08007587
 8007464:	08007415 	.word	0x08007415
 8007468:	08007415 	.word	0x08007415
 800746c:	080075c7 	.word	0x080075c7
 8007470:	08007415 	.word	0x08007415
 8007474:	080074c9 	.word	0x080074c9
 8007478:	08007415 	.word	0x08007415
 800747c:	08007415 	.word	0x08007415
 8007480:	0800758f 	.word	0x0800758f
 8007484:	682b      	ldr	r3, [r5, #0]
 8007486:	1d1a      	adds	r2, r3, #4
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	602a      	str	r2, [r5, #0]
 800748c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007490:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007494:	2301      	movs	r3, #1
 8007496:	e0a3      	b.n	80075e0 <_printf_i+0x1f4>
 8007498:	6820      	ldr	r0, [r4, #0]
 800749a:	6829      	ldr	r1, [r5, #0]
 800749c:	0606      	lsls	r6, r0, #24
 800749e:	f101 0304 	add.w	r3, r1, #4
 80074a2:	d50a      	bpl.n	80074ba <_printf_i+0xce>
 80074a4:	680e      	ldr	r6, [r1, #0]
 80074a6:	602b      	str	r3, [r5, #0]
 80074a8:	2e00      	cmp	r6, #0
 80074aa:	da03      	bge.n	80074b4 <_printf_i+0xc8>
 80074ac:	232d      	movs	r3, #45	; 0x2d
 80074ae:	4276      	negs	r6, r6
 80074b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80074b4:	485e      	ldr	r0, [pc, #376]	; (8007630 <_printf_i+0x244>)
 80074b6:	230a      	movs	r3, #10
 80074b8:	e019      	b.n	80074ee <_printf_i+0x102>
 80074ba:	680e      	ldr	r6, [r1, #0]
 80074bc:	602b      	str	r3, [r5, #0]
 80074be:	f010 0f40 	tst.w	r0, #64	; 0x40
 80074c2:	bf18      	it	ne
 80074c4:	b236      	sxthne	r6, r6
 80074c6:	e7ef      	b.n	80074a8 <_printf_i+0xbc>
 80074c8:	682b      	ldr	r3, [r5, #0]
 80074ca:	6820      	ldr	r0, [r4, #0]
 80074cc:	1d19      	adds	r1, r3, #4
 80074ce:	6029      	str	r1, [r5, #0]
 80074d0:	0601      	lsls	r1, r0, #24
 80074d2:	d501      	bpl.n	80074d8 <_printf_i+0xec>
 80074d4:	681e      	ldr	r6, [r3, #0]
 80074d6:	e002      	b.n	80074de <_printf_i+0xf2>
 80074d8:	0646      	lsls	r6, r0, #25
 80074da:	d5fb      	bpl.n	80074d4 <_printf_i+0xe8>
 80074dc:	881e      	ldrh	r6, [r3, #0]
 80074de:	4854      	ldr	r0, [pc, #336]	; (8007630 <_printf_i+0x244>)
 80074e0:	2f6f      	cmp	r7, #111	; 0x6f
 80074e2:	bf0c      	ite	eq
 80074e4:	2308      	moveq	r3, #8
 80074e6:	230a      	movne	r3, #10
 80074e8:	2100      	movs	r1, #0
 80074ea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80074ee:	6865      	ldr	r5, [r4, #4]
 80074f0:	60a5      	str	r5, [r4, #8]
 80074f2:	2d00      	cmp	r5, #0
 80074f4:	bfa2      	ittt	ge
 80074f6:	6821      	ldrge	r1, [r4, #0]
 80074f8:	f021 0104 	bicge.w	r1, r1, #4
 80074fc:	6021      	strge	r1, [r4, #0]
 80074fe:	b90e      	cbnz	r6, 8007504 <_printf_i+0x118>
 8007500:	2d00      	cmp	r5, #0
 8007502:	d04d      	beq.n	80075a0 <_printf_i+0x1b4>
 8007504:	4615      	mov	r5, r2
 8007506:	fbb6 f1f3 	udiv	r1, r6, r3
 800750a:	fb03 6711 	mls	r7, r3, r1, r6
 800750e:	5dc7      	ldrb	r7, [r0, r7]
 8007510:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007514:	4637      	mov	r7, r6
 8007516:	42bb      	cmp	r3, r7
 8007518:	460e      	mov	r6, r1
 800751a:	d9f4      	bls.n	8007506 <_printf_i+0x11a>
 800751c:	2b08      	cmp	r3, #8
 800751e:	d10b      	bne.n	8007538 <_printf_i+0x14c>
 8007520:	6823      	ldr	r3, [r4, #0]
 8007522:	07de      	lsls	r6, r3, #31
 8007524:	d508      	bpl.n	8007538 <_printf_i+0x14c>
 8007526:	6923      	ldr	r3, [r4, #16]
 8007528:	6861      	ldr	r1, [r4, #4]
 800752a:	4299      	cmp	r1, r3
 800752c:	bfde      	ittt	le
 800752e:	2330      	movle	r3, #48	; 0x30
 8007530:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007534:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007538:	1b52      	subs	r2, r2, r5
 800753a:	6122      	str	r2, [r4, #16]
 800753c:	f8cd a000 	str.w	sl, [sp]
 8007540:	464b      	mov	r3, r9
 8007542:	aa03      	add	r2, sp, #12
 8007544:	4621      	mov	r1, r4
 8007546:	4640      	mov	r0, r8
 8007548:	f7ff fee2 	bl	8007310 <_printf_common>
 800754c:	3001      	adds	r0, #1
 800754e:	d14c      	bne.n	80075ea <_printf_i+0x1fe>
 8007550:	f04f 30ff 	mov.w	r0, #4294967295
 8007554:	b004      	add	sp, #16
 8007556:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800755a:	4835      	ldr	r0, [pc, #212]	; (8007630 <_printf_i+0x244>)
 800755c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007560:	6829      	ldr	r1, [r5, #0]
 8007562:	6823      	ldr	r3, [r4, #0]
 8007564:	f851 6b04 	ldr.w	r6, [r1], #4
 8007568:	6029      	str	r1, [r5, #0]
 800756a:	061d      	lsls	r5, r3, #24
 800756c:	d514      	bpl.n	8007598 <_printf_i+0x1ac>
 800756e:	07df      	lsls	r7, r3, #31
 8007570:	bf44      	itt	mi
 8007572:	f043 0320 	orrmi.w	r3, r3, #32
 8007576:	6023      	strmi	r3, [r4, #0]
 8007578:	b91e      	cbnz	r6, 8007582 <_printf_i+0x196>
 800757a:	6823      	ldr	r3, [r4, #0]
 800757c:	f023 0320 	bic.w	r3, r3, #32
 8007580:	6023      	str	r3, [r4, #0]
 8007582:	2310      	movs	r3, #16
 8007584:	e7b0      	b.n	80074e8 <_printf_i+0xfc>
 8007586:	6823      	ldr	r3, [r4, #0]
 8007588:	f043 0320 	orr.w	r3, r3, #32
 800758c:	6023      	str	r3, [r4, #0]
 800758e:	2378      	movs	r3, #120	; 0x78
 8007590:	4828      	ldr	r0, [pc, #160]	; (8007634 <_printf_i+0x248>)
 8007592:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007596:	e7e3      	b.n	8007560 <_printf_i+0x174>
 8007598:	0659      	lsls	r1, r3, #25
 800759a:	bf48      	it	mi
 800759c:	b2b6      	uxthmi	r6, r6
 800759e:	e7e6      	b.n	800756e <_printf_i+0x182>
 80075a0:	4615      	mov	r5, r2
 80075a2:	e7bb      	b.n	800751c <_printf_i+0x130>
 80075a4:	682b      	ldr	r3, [r5, #0]
 80075a6:	6826      	ldr	r6, [r4, #0]
 80075a8:	6961      	ldr	r1, [r4, #20]
 80075aa:	1d18      	adds	r0, r3, #4
 80075ac:	6028      	str	r0, [r5, #0]
 80075ae:	0635      	lsls	r5, r6, #24
 80075b0:	681b      	ldr	r3, [r3, #0]
 80075b2:	d501      	bpl.n	80075b8 <_printf_i+0x1cc>
 80075b4:	6019      	str	r1, [r3, #0]
 80075b6:	e002      	b.n	80075be <_printf_i+0x1d2>
 80075b8:	0670      	lsls	r0, r6, #25
 80075ba:	d5fb      	bpl.n	80075b4 <_printf_i+0x1c8>
 80075bc:	8019      	strh	r1, [r3, #0]
 80075be:	2300      	movs	r3, #0
 80075c0:	6123      	str	r3, [r4, #16]
 80075c2:	4615      	mov	r5, r2
 80075c4:	e7ba      	b.n	800753c <_printf_i+0x150>
 80075c6:	682b      	ldr	r3, [r5, #0]
 80075c8:	1d1a      	adds	r2, r3, #4
 80075ca:	602a      	str	r2, [r5, #0]
 80075cc:	681d      	ldr	r5, [r3, #0]
 80075ce:	6862      	ldr	r2, [r4, #4]
 80075d0:	2100      	movs	r1, #0
 80075d2:	4628      	mov	r0, r5
 80075d4:	f7f8 fe14 	bl	8000200 <memchr>
 80075d8:	b108      	cbz	r0, 80075de <_printf_i+0x1f2>
 80075da:	1b40      	subs	r0, r0, r5
 80075dc:	6060      	str	r0, [r4, #4]
 80075de:	6863      	ldr	r3, [r4, #4]
 80075e0:	6123      	str	r3, [r4, #16]
 80075e2:	2300      	movs	r3, #0
 80075e4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075e8:	e7a8      	b.n	800753c <_printf_i+0x150>
 80075ea:	6923      	ldr	r3, [r4, #16]
 80075ec:	462a      	mov	r2, r5
 80075ee:	4649      	mov	r1, r9
 80075f0:	4640      	mov	r0, r8
 80075f2:	47d0      	blx	sl
 80075f4:	3001      	adds	r0, #1
 80075f6:	d0ab      	beq.n	8007550 <_printf_i+0x164>
 80075f8:	6823      	ldr	r3, [r4, #0]
 80075fa:	079b      	lsls	r3, r3, #30
 80075fc:	d413      	bmi.n	8007626 <_printf_i+0x23a>
 80075fe:	68e0      	ldr	r0, [r4, #12]
 8007600:	9b03      	ldr	r3, [sp, #12]
 8007602:	4298      	cmp	r0, r3
 8007604:	bfb8      	it	lt
 8007606:	4618      	movlt	r0, r3
 8007608:	e7a4      	b.n	8007554 <_printf_i+0x168>
 800760a:	2301      	movs	r3, #1
 800760c:	4632      	mov	r2, r6
 800760e:	4649      	mov	r1, r9
 8007610:	4640      	mov	r0, r8
 8007612:	47d0      	blx	sl
 8007614:	3001      	adds	r0, #1
 8007616:	d09b      	beq.n	8007550 <_printf_i+0x164>
 8007618:	3501      	adds	r5, #1
 800761a:	68e3      	ldr	r3, [r4, #12]
 800761c:	9903      	ldr	r1, [sp, #12]
 800761e:	1a5b      	subs	r3, r3, r1
 8007620:	42ab      	cmp	r3, r5
 8007622:	dcf2      	bgt.n	800760a <_printf_i+0x21e>
 8007624:	e7eb      	b.n	80075fe <_printf_i+0x212>
 8007626:	2500      	movs	r5, #0
 8007628:	f104 0619 	add.w	r6, r4, #25
 800762c:	e7f5      	b.n	800761a <_printf_i+0x22e>
 800762e:	bf00      	nop
 8007630:	08008241 	.word	0x08008241
 8007634:	08008252 	.word	0x08008252

08007638 <_putc_r>:
 8007638:	b570      	push	{r4, r5, r6, lr}
 800763a:	460d      	mov	r5, r1
 800763c:	4614      	mov	r4, r2
 800763e:	4606      	mov	r6, r0
 8007640:	b118      	cbz	r0, 800764a <_putc_r+0x12>
 8007642:	6983      	ldr	r3, [r0, #24]
 8007644:	b90b      	cbnz	r3, 800764a <_putc_r+0x12>
 8007646:	f7ff fa9b 	bl	8006b80 <__sinit>
 800764a:	4b1c      	ldr	r3, [pc, #112]	; (80076bc <_putc_r+0x84>)
 800764c:	429c      	cmp	r4, r3
 800764e:	d124      	bne.n	800769a <_putc_r+0x62>
 8007650:	6874      	ldr	r4, [r6, #4]
 8007652:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007654:	07d8      	lsls	r0, r3, #31
 8007656:	d405      	bmi.n	8007664 <_putc_r+0x2c>
 8007658:	89a3      	ldrh	r3, [r4, #12]
 800765a:	0599      	lsls	r1, r3, #22
 800765c:	d402      	bmi.n	8007664 <_putc_r+0x2c>
 800765e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007660:	f7ff fb2c 	bl	8006cbc <__retarget_lock_acquire_recursive>
 8007664:	68a3      	ldr	r3, [r4, #8]
 8007666:	3b01      	subs	r3, #1
 8007668:	2b00      	cmp	r3, #0
 800766a:	60a3      	str	r3, [r4, #8]
 800766c:	da05      	bge.n	800767a <_putc_r+0x42>
 800766e:	69a2      	ldr	r2, [r4, #24]
 8007670:	4293      	cmp	r3, r2
 8007672:	db1c      	blt.n	80076ae <_putc_r+0x76>
 8007674:	b2eb      	uxtb	r3, r5
 8007676:	2b0a      	cmp	r3, #10
 8007678:	d019      	beq.n	80076ae <_putc_r+0x76>
 800767a:	6823      	ldr	r3, [r4, #0]
 800767c:	1c5a      	adds	r2, r3, #1
 800767e:	6022      	str	r2, [r4, #0]
 8007680:	701d      	strb	r5, [r3, #0]
 8007682:	b2ed      	uxtb	r5, r5
 8007684:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007686:	07da      	lsls	r2, r3, #31
 8007688:	d405      	bmi.n	8007696 <_putc_r+0x5e>
 800768a:	89a3      	ldrh	r3, [r4, #12]
 800768c:	059b      	lsls	r3, r3, #22
 800768e:	d402      	bmi.n	8007696 <_putc_r+0x5e>
 8007690:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007692:	f7ff fb14 	bl	8006cbe <__retarget_lock_release_recursive>
 8007696:	4628      	mov	r0, r5
 8007698:	bd70      	pop	{r4, r5, r6, pc}
 800769a:	4b09      	ldr	r3, [pc, #36]	; (80076c0 <_putc_r+0x88>)
 800769c:	429c      	cmp	r4, r3
 800769e:	d101      	bne.n	80076a4 <_putc_r+0x6c>
 80076a0:	68b4      	ldr	r4, [r6, #8]
 80076a2:	e7d6      	b.n	8007652 <_putc_r+0x1a>
 80076a4:	4b07      	ldr	r3, [pc, #28]	; (80076c4 <_putc_r+0x8c>)
 80076a6:	429c      	cmp	r4, r3
 80076a8:	bf08      	it	eq
 80076aa:	68f4      	ldreq	r4, [r6, #12]
 80076ac:	e7d1      	b.n	8007652 <_putc_r+0x1a>
 80076ae:	4629      	mov	r1, r5
 80076b0:	4622      	mov	r2, r4
 80076b2:	4630      	mov	r0, r6
 80076b4:	f7ff f88a 	bl	80067cc <__swbuf_r>
 80076b8:	4605      	mov	r5, r0
 80076ba:	e7e3      	b.n	8007684 <_putc_r+0x4c>
 80076bc:	080081f0 	.word	0x080081f0
 80076c0:	08008210 	.word	0x08008210
 80076c4:	080081d0 	.word	0x080081d0

080076c8 <__sread>:
 80076c8:	b510      	push	{r4, lr}
 80076ca:	460c      	mov	r4, r1
 80076cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80076d0:	f000 f8de 	bl	8007890 <_read_r>
 80076d4:	2800      	cmp	r0, #0
 80076d6:	bfab      	itete	ge
 80076d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80076da:	89a3      	ldrhlt	r3, [r4, #12]
 80076dc:	181b      	addge	r3, r3, r0
 80076de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80076e2:	bfac      	ite	ge
 80076e4:	6563      	strge	r3, [r4, #84]	; 0x54
 80076e6:	81a3      	strhlt	r3, [r4, #12]
 80076e8:	bd10      	pop	{r4, pc}

080076ea <__swrite>:
 80076ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076ee:	461f      	mov	r7, r3
 80076f0:	898b      	ldrh	r3, [r1, #12]
 80076f2:	05db      	lsls	r3, r3, #23
 80076f4:	4605      	mov	r5, r0
 80076f6:	460c      	mov	r4, r1
 80076f8:	4616      	mov	r6, r2
 80076fa:	d505      	bpl.n	8007708 <__swrite+0x1e>
 80076fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007700:	2302      	movs	r3, #2
 8007702:	2200      	movs	r2, #0
 8007704:	f000 f868 	bl	80077d8 <_lseek_r>
 8007708:	89a3      	ldrh	r3, [r4, #12]
 800770a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800770e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007712:	81a3      	strh	r3, [r4, #12]
 8007714:	4632      	mov	r2, r6
 8007716:	463b      	mov	r3, r7
 8007718:	4628      	mov	r0, r5
 800771a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800771e:	f000 b817 	b.w	8007750 <_write_r>

08007722 <__sseek>:
 8007722:	b510      	push	{r4, lr}
 8007724:	460c      	mov	r4, r1
 8007726:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800772a:	f000 f855 	bl	80077d8 <_lseek_r>
 800772e:	1c43      	adds	r3, r0, #1
 8007730:	89a3      	ldrh	r3, [r4, #12]
 8007732:	bf15      	itete	ne
 8007734:	6560      	strne	r0, [r4, #84]	; 0x54
 8007736:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800773a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800773e:	81a3      	strheq	r3, [r4, #12]
 8007740:	bf18      	it	ne
 8007742:	81a3      	strhne	r3, [r4, #12]
 8007744:	bd10      	pop	{r4, pc}

08007746 <__sclose>:
 8007746:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800774a:	f000 b813 	b.w	8007774 <_close_r>
	...

08007750 <_write_r>:
 8007750:	b538      	push	{r3, r4, r5, lr}
 8007752:	4d07      	ldr	r5, [pc, #28]	; (8007770 <_write_r+0x20>)
 8007754:	4604      	mov	r4, r0
 8007756:	4608      	mov	r0, r1
 8007758:	4611      	mov	r1, r2
 800775a:	2200      	movs	r2, #0
 800775c:	602a      	str	r2, [r5, #0]
 800775e:	461a      	mov	r2, r3
 8007760:	f7fa fd77 	bl	8002252 <_write>
 8007764:	1c43      	adds	r3, r0, #1
 8007766:	d102      	bne.n	800776e <_write_r+0x1e>
 8007768:	682b      	ldr	r3, [r5, #0]
 800776a:	b103      	cbz	r3, 800776e <_write_r+0x1e>
 800776c:	6023      	str	r3, [r4, #0]
 800776e:	bd38      	pop	{r3, r4, r5, pc}
 8007770:	200023f8 	.word	0x200023f8

08007774 <_close_r>:
 8007774:	b538      	push	{r3, r4, r5, lr}
 8007776:	4d06      	ldr	r5, [pc, #24]	; (8007790 <_close_r+0x1c>)
 8007778:	2300      	movs	r3, #0
 800777a:	4604      	mov	r4, r0
 800777c:	4608      	mov	r0, r1
 800777e:	602b      	str	r3, [r5, #0]
 8007780:	f7fa fd83 	bl	800228a <_close>
 8007784:	1c43      	adds	r3, r0, #1
 8007786:	d102      	bne.n	800778e <_close_r+0x1a>
 8007788:	682b      	ldr	r3, [r5, #0]
 800778a:	b103      	cbz	r3, 800778e <_close_r+0x1a>
 800778c:	6023      	str	r3, [r4, #0]
 800778e:	bd38      	pop	{r3, r4, r5, pc}
 8007790:	200023f8 	.word	0x200023f8

08007794 <_fstat_r>:
 8007794:	b538      	push	{r3, r4, r5, lr}
 8007796:	4d07      	ldr	r5, [pc, #28]	; (80077b4 <_fstat_r+0x20>)
 8007798:	2300      	movs	r3, #0
 800779a:	4604      	mov	r4, r0
 800779c:	4608      	mov	r0, r1
 800779e:	4611      	mov	r1, r2
 80077a0:	602b      	str	r3, [r5, #0]
 80077a2:	f7fa fd7e 	bl	80022a2 <_fstat>
 80077a6:	1c43      	adds	r3, r0, #1
 80077a8:	d102      	bne.n	80077b0 <_fstat_r+0x1c>
 80077aa:	682b      	ldr	r3, [r5, #0]
 80077ac:	b103      	cbz	r3, 80077b0 <_fstat_r+0x1c>
 80077ae:	6023      	str	r3, [r4, #0]
 80077b0:	bd38      	pop	{r3, r4, r5, pc}
 80077b2:	bf00      	nop
 80077b4:	200023f8 	.word	0x200023f8

080077b8 <_isatty_r>:
 80077b8:	b538      	push	{r3, r4, r5, lr}
 80077ba:	4d06      	ldr	r5, [pc, #24]	; (80077d4 <_isatty_r+0x1c>)
 80077bc:	2300      	movs	r3, #0
 80077be:	4604      	mov	r4, r0
 80077c0:	4608      	mov	r0, r1
 80077c2:	602b      	str	r3, [r5, #0]
 80077c4:	f7fa fd7d 	bl	80022c2 <_isatty>
 80077c8:	1c43      	adds	r3, r0, #1
 80077ca:	d102      	bne.n	80077d2 <_isatty_r+0x1a>
 80077cc:	682b      	ldr	r3, [r5, #0]
 80077ce:	b103      	cbz	r3, 80077d2 <_isatty_r+0x1a>
 80077d0:	6023      	str	r3, [r4, #0]
 80077d2:	bd38      	pop	{r3, r4, r5, pc}
 80077d4:	200023f8 	.word	0x200023f8

080077d8 <_lseek_r>:
 80077d8:	b538      	push	{r3, r4, r5, lr}
 80077da:	4d07      	ldr	r5, [pc, #28]	; (80077f8 <_lseek_r+0x20>)
 80077dc:	4604      	mov	r4, r0
 80077de:	4608      	mov	r0, r1
 80077e0:	4611      	mov	r1, r2
 80077e2:	2200      	movs	r2, #0
 80077e4:	602a      	str	r2, [r5, #0]
 80077e6:	461a      	mov	r2, r3
 80077e8:	f7fa fd76 	bl	80022d8 <_lseek>
 80077ec:	1c43      	adds	r3, r0, #1
 80077ee:	d102      	bne.n	80077f6 <_lseek_r+0x1e>
 80077f0:	682b      	ldr	r3, [r5, #0]
 80077f2:	b103      	cbz	r3, 80077f6 <_lseek_r+0x1e>
 80077f4:	6023      	str	r3, [r4, #0]
 80077f6:	bd38      	pop	{r3, r4, r5, pc}
 80077f8:	200023f8 	.word	0x200023f8

080077fc <memmove>:
 80077fc:	4288      	cmp	r0, r1
 80077fe:	b510      	push	{r4, lr}
 8007800:	eb01 0402 	add.w	r4, r1, r2
 8007804:	d902      	bls.n	800780c <memmove+0x10>
 8007806:	4284      	cmp	r4, r0
 8007808:	4623      	mov	r3, r4
 800780a:	d807      	bhi.n	800781c <memmove+0x20>
 800780c:	1e43      	subs	r3, r0, #1
 800780e:	42a1      	cmp	r1, r4
 8007810:	d008      	beq.n	8007824 <memmove+0x28>
 8007812:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800781a:	e7f8      	b.n	800780e <memmove+0x12>
 800781c:	4402      	add	r2, r0
 800781e:	4601      	mov	r1, r0
 8007820:	428a      	cmp	r2, r1
 8007822:	d100      	bne.n	8007826 <memmove+0x2a>
 8007824:	bd10      	pop	{r4, pc}
 8007826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800782a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800782e:	e7f7      	b.n	8007820 <memmove+0x24>

08007830 <_realloc_r>:
 8007830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007834:	4680      	mov	r8, r0
 8007836:	4614      	mov	r4, r2
 8007838:	460e      	mov	r6, r1
 800783a:	b921      	cbnz	r1, 8007846 <_realloc_r+0x16>
 800783c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007840:	4611      	mov	r1, r2
 8007842:	f7fe bd0b 	b.w	800625c <_malloc_r>
 8007846:	b92a      	cbnz	r2, 8007854 <_realloc_r+0x24>
 8007848:	f7fe fc9c 	bl	8006184 <_free_r>
 800784c:	4625      	mov	r5, r4
 800784e:	4628      	mov	r0, r5
 8007850:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007854:	f000 f82e 	bl	80078b4 <_malloc_usable_size_r>
 8007858:	4284      	cmp	r4, r0
 800785a:	4607      	mov	r7, r0
 800785c:	d802      	bhi.n	8007864 <_realloc_r+0x34>
 800785e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007862:	d812      	bhi.n	800788a <_realloc_r+0x5a>
 8007864:	4621      	mov	r1, r4
 8007866:	4640      	mov	r0, r8
 8007868:	f7fe fcf8 	bl	800625c <_malloc_r>
 800786c:	4605      	mov	r5, r0
 800786e:	2800      	cmp	r0, #0
 8007870:	d0ed      	beq.n	800784e <_realloc_r+0x1e>
 8007872:	42bc      	cmp	r4, r7
 8007874:	4622      	mov	r2, r4
 8007876:	4631      	mov	r1, r6
 8007878:	bf28      	it	cs
 800787a:	463a      	movcs	r2, r7
 800787c:	f7fe fc6c 	bl	8006158 <memcpy>
 8007880:	4631      	mov	r1, r6
 8007882:	4640      	mov	r0, r8
 8007884:	f7fe fc7e 	bl	8006184 <_free_r>
 8007888:	e7e1      	b.n	800784e <_realloc_r+0x1e>
 800788a:	4635      	mov	r5, r6
 800788c:	e7df      	b.n	800784e <_realloc_r+0x1e>
	...

08007890 <_read_r>:
 8007890:	b538      	push	{r3, r4, r5, lr}
 8007892:	4d07      	ldr	r5, [pc, #28]	; (80078b0 <_read_r+0x20>)
 8007894:	4604      	mov	r4, r0
 8007896:	4608      	mov	r0, r1
 8007898:	4611      	mov	r1, r2
 800789a:	2200      	movs	r2, #0
 800789c:	602a      	str	r2, [r5, #0]
 800789e:	461a      	mov	r2, r3
 80078a0:	f7fa fcba 	bl	8002218 <_read>
 80078a4:	1c43      	adds	r3, r0, #1
 80078a6:	d102      	bne.n	80078ae <_read_r+0x1e>
 80078a8:	682b      	ldr	r3, [r5, #0]
 80078aa:	b103      	cbz	r3, 80078ae <_read_r+0x1e>
 80078ac:	6023      	str	r3, [r4, #0]
 80078ae:	bd38      	pop	{r3, r4, r5, pc}
 80078b0:	200023f8 	.word	0x200023f8

080078b4 <_malloc_usable_size_r>:
 80078b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80078b8:	1f18      	subs	r0, r3, #4
 80078ba:	2b00      	cmp	r3, #0
 80078bc:	bfbc      	itt	lt
 80078be:	580b      	ldrlt	r3, [r1, r0]
 80078c0:	18c0      	addlt	r0, r0, r3
 80078c2:	4770      	bx	lr

080078c4 <_init>:
 80078c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078c6:	bf00      	nop
 80078c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078ca:	bc08      	pop	{r3}
 80078cc:	469e      	mov	lr, r3
 80078ce:	4770      	bx	lr

080078d0 <_fini>:
 80078d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80078d2:	bf00      	nop
 80078d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80078d6:	bc08      	pop	{r3}
 80078d8:	469e      	mov	lr, r3
 80078da:	4770      	bx	lr
